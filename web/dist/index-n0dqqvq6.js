var X4=Object.defineProperty;var U4=(A,j)=>{for(var q in j)X4(A,q,{get:j[q],enumerable:!0,configurable:!0,set:($)=>j[q]=()=>$})};var Pq=[],l$=[];(()=>{let A="lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map((j)=>j?parseInt(j,36):1);for(let j=0,q=0;j<A.length;j++)(j%2?l$:Pq).push(q=q+A[j])})();function Y4(A){if(A<768)return!1;for(let j=0,q=Pq.length;;){let $=j+q>>1;if(A<Pq[$])q=$;else if(A>=l$[$])j=$+1;else return!0;if(j==q)return!1}}function g$(A){return A>=127462&&A<=127487}var f$=8205;function d$(A,j,q=!0,$=!0){return(q?c$:Q4)(A,j,$)}function c$(A,j,q){if(j==A.length)return j;if(j&&s$(A.charCodeAt(j))&&i$(A.charCodeAt(j-1)))j--;let $=Lq(A,j);j+=p$($);while(j<A.length){let B=Lq(A,j);if($==f$||B==f$||q&&Y4(B))j+=p$(B),$=B;else if(g$(B)){let G=0,K=j-2;while(K>=0&&g$(Lq(A,K)))G++,K-=2;if(G%2==0)break;else j+=2}else break}return j}function Q4(A,j,q){while(j>0){let $=c$(A,j-2,q);if($<j)return $;j--}return 0}function Lq(A,j){let q=A.charCodeAt(j);if(!i$(q)||j+1==A.length)return q;let $=A.charCodeAt(j+1);if(!s$($))return q;return(q-55296<<10)+($-56320)+65536}function s$(A){return A>=56320&&A<57344}function i$(A){return A>=55296&&A<56320}function p$(A){return A<65536?1:2}class m{lineAt(A){if(A<0||A>this.length)throw new RangeError(`Invalid position ${A} in document of length ${this.length}`);return this.lineInner(A,!1,1,0)}line(A){if(A<1||A>this.lines)throw new RangeError(`Invalid line number ${A} in ${this.lines}-line document`);return this.lineInner(A,!0,1,0)}replace(A,j,q){[A,j]=ij(this,A,j);let $=[];if(this.decompose(0,A,$,2),q.length)q.decompose(0,q.length,$,3);return this.decompose(j,this.length,$,1),eA.from($,this.length-(j-A)+q.length)}append(A){return this.replace(this.length,this.length,A)}slice(A,j=this.length){[A,j]=ij(this,A,j);let q=[];return this.decompose(A,j,q,0),eA.from(q,j-A)}eq(A){if(A==this)return!0;if(A.length!=this.length||A.lines!=this.lines)return!1;let j=this.scanIdentical(A,1),q=this.length-this.scanIdentical(A,-1),$=new cj(this),B=new cj(A);for(let G=j,K=j;;){if($.next(G),B.next(G),G=0,$.lineBreak!=B.lineBreak||$.done!=B.done||$.value!=B.value)return!1;if(K+=$.value.length,$.done||K>=q)return!0}}iter(A=1){return new cj(this,A)}iterRange(A,j=this.length){return new uq(this,A,j)}iterLines(A,j){let q;if(A==null)q=this.iter();else{if(j==null)j=this.lines+1;let $=this.line(A).from;q=this.iterRange($,Math.max($,j==this.lines+1?this.length:j<=1?0:this.line(j-1).to))}return new gq(q)}toString(){return this.sliceString(0)}toJSON(){let A=[];return this.flatten(A),A}constructor(){}static of(A){if(A.length==0)throw new RangeError("A document must have at least one line");if(A.length==1&&!A[0])return m.empty;return A.length<=32?new AA(A):eA.from(AA.split(A,[]))}}class AA extends m{constructor(A,j=O4(A)){super();this.text=A,this.length=j}get lines(){return this.text.length}get children(){return null}lineInner(A,j,q,$){for(let B=0;;B++){let G=this.text[B],K=$+G.length;if((j?q:K)>=A)return new e$($,K,q,G);$=K+1,q++}}decompose(A,j,q,$){let B=A<=0&&j>=this.length?this:new AA(n$(this.text,A,j),Math.min(j,this.length)-Math.max(0,A));if($&1){let G=q.pop(),K=X7(B.text,G.text.slice(),0,B.length);if(K.length<=32)q.push(new AA(K,G.length+B.length));else{let J=K.length>>1;q.push(new AA(K.slice(0,J)),new AA(K.slice(J)))}}else q.push(B)}replace(A,j,q){if(!(q instanceof AA))return super.replace(A,j,q);[A,j]=ij(this,A,j);let $=X7(this.text,X7(q.text,n$(this.text,0,A)),j),B=this.length+q.length-(j-A);if($.length<=32)return new AA($,B);return eA.from(AA.split($,[]),B)}sliceString(A,j=this.length,q=`
`){[A,j]=ij(this,A,j);let $="";for(let B=0,G=0;B<=j&&G<this.text.length;G++){let K=this.text[G],J=B+K.length;if(B>A&&G)$+=q;if(A<J&&j>B)$+=K.slice(Math.max(0,A-B),j-B);B=J+1}return $}flatten(A){for(let j of this.text)A.push(j)}scanIdentical(){return 0}static split(A,j){let q=[],$=-1;for(let B of A)if(q.push(B),$+=B.length+1,q.length==32)j.push(new AA(q,$)),q=[],$=-1;if($>-1)j.push(new AA(q,$));return j}}class eA extends m{constructor(A,j){super();this.children=A,this.length=j,this.lines=0;for(let q of A)this.lines+=q.lines}lineInner(A,j,q,$){for(let B=0;;B++){let G=this.children[B],K=$+G.length,J=q+G.lines-1;if((j?J:K)>=A)return G.lineInner(A,j,q,$);$=K+1,q=J+1}}decompose(A,j,q,$){for(let B=0,G=0;G<=j&&B<this.children.length;B++){let K=this.children[B],J=G+K.length;if(A<=J&&j>=G){let Z=$&((G<=A?1:0)|(J>=j?2:0));if(G>=A&&J<=j&&!Z)q.push(K);else K.decompose(A-G,j-G,q,Z)}G=J+1}}replace(A,j,q){if([A,j]=ij(this,A,j),q.lines<this.lines)for(let $=0,B=0;$<this.children.length;$++){let G=this.children[$],K=B+G.length;if(A>=B&&j<=K){let J=G.replace(A-B,j-B,q),Z=this.lines-G.lines+J.lines;if(J.lines<Z>>4&&J.lines>Z>>6){let X=this.children.slice();return X[$]=J,new eA(X,this.length-(j-A)+q.length)}return super.replace(B,K,J)}B=K+1}return super.replace(A,j,q)}sliceString(A,j=this.length,q=`
`){[A,j]=ij(this,A,j);let $="";for(let B=0,G=0;B<this.children.length&&G<=j;B++){let K=this.children[B],J=G+K.length;if(G>A&&B)$+=q;if(A<J&&j>G)$+=K.sliceString(A-G,j-G,q);G=J+1}return $}flatten(A){for(let j of this.children)j.flatten(A)}scanIdentical(A,j){if(!(A instanceof eA))return 0;let q=0,[$,B,G,K]=j>0?[0,0,this.children.length,A.children.length]:[this.children.length-1,A.children.length-1,-1,-1];for(;;$+=j,B+=j){if($==G||B==K)return q;let J=this.children[$],Z=A.children[B];if(J!=Z)return q+J.scanIdentical(Z,j);q+=J.length+1}}static from(A,j=A.reduce((q,$)=>q+$.length+1,-1)){let q=0;for(let Q of A)q+=Q.lines;if(q<32){let Q=[];for(let O of A)O.flatten(Q);return new AA(Q,j)}let $=Math.max(32,q>>5),B=$<<1,G=$>>1,K=[],J=0,Z=-1,X=[];function U(Q){let O;if(Q.lines>B&&Q instanceof eA)for(let F of Q.children)U(F);else if(Q.lines>G&&(J>G||!J))Y(),K.push(Q);else if(Q instanceof AA&&J&&(O=X[X.length-1])instanceof AA&&Q.lines+O.lines<=32)J+=Q.lines,Z+=Q.length+1,X[X.length-1]=new AA(O.text.concat(Q.text),O.length+1+Q.length);else{if(J+Q.lines>$)Y();J+=Q.lines,Z+=Q.length+1,X.push(Q)}}function Y(){if(J==0)return;K.push(X.length==1?X[0]:eA.from(X,Z)),Z=-1,J=X.length=0}for(let Q of A)U(Q);return Y(),K.length==1?K[0]:new eA(K,j)}}m.empty=new AA([""],0);function O4(A){let j=-1;for(let q of A)j+=q.length+1;return j}function X7(A,j,q=0,$=1e9){for(let B=0,G=0,K=!0;G<A.length&&B<=$;G++){let J=A[G],Z=B+J.length;if(Z>=q){if(Z>$)J=J.slice(0,$-B);if(B<q)J=J.slice(q-B);if(K)j[j.length-1]+=J,K=!1;else j.push(J)}B=Z+1}return j}function n$(A,j,q){return X7(A,[""],j,q)}class cj{constructor(A,j=1){this.dir=j,this.done=!1,this.lineBreak=!1,this.value="",this.nodes=[A],this.offsets=[j>0?1:(A instanceof AA?A.text.length:A.children.length)<<1]}nextInner(A,j){this.done=this.lineBreak=!1;for(;;){let q=this.nodes.length-1,$=this.nodes[q],B=this.offsets[q],G=B>>1,K=$ instanceof AA?$.text.length:$.children.length;if(G==(j>0?K:0)){if(q==0)return this.done=!0,this.value="",this;if(j>0)this.offsets[q-1]++;this.nodes.pop(),this.offsets.pop()}else if((B&1)==(j>0?0:1)){if(this.offsets[q]+=j,A==0)return this.lineBreak=!0,this.value=`
`,this;A--}else if($ instanceof AA){let J=$.text[G+(j<0?-1:0)];if(this.offsets[q]+=j,J.length>Math.max(0,A))return this.value=A==0?J:j>0?J.slice(A):J.slice(0,J.length-A),this;A-=J.length}else{let J=$.children[G+(j<0?-1:0)];if(A>J.length)A-=J.length,this.offsets[q]+=j;else{if(j<0)this.offsets[q]--;this.nodes.push(J),this.offsets.push(j>0?1:(J instanceof AA?J.text.length:J.children.length)<<1)}}}}next(A=0){if(A<0)this.nextInner(-A,-this.dir),A=this.value.length;return this.nextInner(A,this.dir)}}class uq{constructor(A,j,q){this.value="",this.done=!1,this.cursor=new cj(A,j>q?-1:1),this.pos=j>q?A.length:0,this.from=Math.min(j,q),this.to=Math.max(j,q)}nextInner(A,j){if(j<0?this.pos<=this.from:this.pos>=this.to)return this.value="",this.done=!0,this;A+=Math.max(0,j<0?this.pos-this.to:this.from-this.pos);let q=j<0?this.pos-this.from:this.to-this.pos;if(A>q)A=q;q-=A;let{value:$}=this.cursor.next(A);return this.pos+=($.length+A)*j,this.value=$.length<=q?$:j<0?$.slice($.length-q):$.slice(0,q),this.done=!this.value,this}next(A=0){if(A<0)A=Math.max(A,this.from-this.pos);else if(A>0)A=Math.min(A,this.to-this.pos);return this.nextInner(A,this.cursor.dir)}get lineBreak(){return this.cursor.lineBreak&&this.value!=""}}class gq{constructor(A){this.inner=A,this.afterBreak=!0,this.value="",this.done=!1}next(A=0){let{done:j,lineBreak:q,value:$}=this.inner.next(A);if(j&&this.afterBreak)this.value="",this.afterBreak=!1;else if(j)this.done=!0,this.value="";else if(q)if(this.afterBreak)this.value="";else this.afterBreak=!0,this.next();else this.value=$,this.afterBreak=!1;return this}get lineBreak(){return!1}}if(typeof Symbol!="undefined")m.prototype[Symbol.iterator]=function(){return this.iter()},cj.prototype[Symbol.iterator]=uq.prototype[Symbol.iterator]=gq.prototype[Symbol.iterator]=function(){return this};class e${constructor(A,j,q,$){this.from=A,this.to=j,this.number=q,this.text=$}get length(){return this.to-this.from}}function ij(A,j,q){return j=Math.max(0,Math.min(A.length,j)),[j,Math.max(j,Math.min(A.length,q))]}function qA(A,j,q=!0,$=!0){return d$(A,j,q,$)}function F4(A){return A>=56320&&A<57344}function z4(A){return A>=55296&&A<56320}function XA(A,j){let q=A.charCodeAt(j);if(!z4(q)||j+1==A.length)return q;let $=A.charCodeAt(j+1);if(!F4($))return q;return(q-55296<<10)+($-56320)+65536}function H6(A){if(A<=65535)return String.fromCharCode(A);return A-=65536,String.fromCharCode((A>>10)+55296,(A&1023)+56320)}function VA(A){return A<65536?1:2}var Cq=/\r\n?|\n/,ZA=function(A){return A[A.Simple=0]="Simple",A[A.TrackDel=1]="TrackDel",A[A.TrackBefore=2]="TrackBefore",A[A.TrackAfter=3]="TrackAfter",A}(ZA||(ZA={}));class pA{constructor(A){this.sections=A}get length(){let A=0;for(let j=0;j<this.sections.length;j+=2)A+=this.sections[j];return A}get newLength(){let A=0;for(let j=0;j<this.sections.length;j+=2){let q=this.sections[j+1];A+=q<0?this.sections[j]:q}return A}get empty(){return this.sections.length==0||this.sections.length==2&&this.sections[1]<0}iterGaps(A){for(let j=0,q=0,$=0;j<this.sections.length;){let B=this.sections[j++],G=this.sections[j++];if(G<0)A(q,$,B),$+=B;else $+=G;q+=B}}iterChangedRanges(A,j=!1){yq(this,A,j)}get invertedDesc(){let A=[];for(let j=0;j<this.sections.length;){let q=this.sections[j++],$=this.sections[j++];if($<0)A.push(q,$);else A.push($,q)}return new pA(A)}composeDesc(A){return this.empty?A:A.empty?this:AB(this,A)}mapDesc(A,j=!1){return A.empty?this:bq(this,A,j)}mapPos(A,j=-1,q=ZA.Simple){let $=0,B=0;for(let G=0;G<this.sections.length;){let K=this.sections[G++],J=this.sections[G++],Z=$+K;if(J<0){if(Z>A)return B+(A-$);B+=K}else{if(q!=ZA.Simple&&Z>=A&&(q==ZA.TrackDel&&$<A&&Z>A||q==ZA.TrackBefore&&$<A||q==ZA.TrackAfter&&Z>A))return null;if(Z>A||Z==A&&j<0&&!K)return A==$||j<0?B:B+J;B+=J}$=Z}if(A>$)throw new RangeError(`Position ${A} is out of range for changeset of length ${$}`);return B}touchesRange(A,j=A){for(let q=0,$=0;q<this.sections.length&&$<=j;){let B=this.sections[q++],G=this.sections[q++],K=$+B;if(G>=0&&$<=j&&K>=A)return $<A&&K>j?"cover":!0;$=K}return!1}toString(){let A="";for(let j=0;j<this.sections.length;){let q=this.sections[j++],$=this.sections[j++];A+=(A?" ":"")+q+($>=0?":"+$:"")}return A}toJSON(){return this.sections}static fromJSON(A){if(!Array.isArray(A)||A.length%2||A.some((j)=>typeof j!="number"))throw new RangeError("Invalid JSON representation of ChangeDesc");return new pA(A)}static create(A){return new pA(A)}}class jA extends pA{constructor(A,j){super(A);this.inserted=j}apply(A){if(this.length!=A.length)throw new RangeError("Applying change set to a document with the wrong length");return yq(this,(j,q,$,B,G)=>A=A.replace($,$+(q-j),G),!1),A}mapDesc(A,j=!1){return bq(this,A,j,!0)}invert(A){let j=this.sections.slice(),q=[];for(let $=0,B=0;$<j.length;$+=2){let G=j[$],K=j[$+1];if(K>=0){j[$]=K,j[$+1]=G;let J=$>>1;while(q.length<J)q.push(m.empty);q.push(G?A.slice(B,B+G):m.empty)}B+=G}return new jA(j,q)}compose(A){return this.empty?A:A.empty?this:AB(this,A,!0)}map(A,j=!1){return A.empty?this:bq(this,A,j,!0)}iterChanges(A,j=!1){yq(this,A,j)}get desc(){return pA.create(this.sections)}filter(A){let j=[],q=[],$=[],B=new nj(this);A:for(let G=0,K=0;;){let J=G==A.length?1e9:A[G++];while(K<J||K==J&&B.len==0){if(B.done)break A;let X=Math.min(B.len,J-K);OA($,X,-1);let U=B.ins==-1?-1:B.off==0?B.ins:0;if(OA(j,X,U),U>0)Ij(q,j,B.text);B.forward(X),K+=X}let Z=A[G++];while(K<Z){if(B.done)break A;let X=Math.min(B.len,Z-K);OA(j,X,-1),OA($,X,B.ins==-1?-1:B.off==0?B.ins:0),B.forward(X),K+=X}}return{changes:new jA(j,q),filtered:pA.create($)}}toJSON(){let A=[];for(let j=0;j<this.sections.length;j+=2){let q=this.sections[j],$=this.sections[j+1];if($<0)A.push(q);else if($==0)A.push([q]);else A.push([q].concat(this.inserted[j>>1].toJSON()))}return A}static of(A,j,q){let $=[],B=[],G=0,K=null;function J(X=!1){if(!X&&!$.length)return;if(G<j)OA($,j-G,-1);let U=new jA($,B);K=K?K.compose(U.map(K)):U,$=[],B=[],G=0}function Z(X){if(Array.isArray(X))for(let U of X)Z(U);else if(X instanceof jA){if(X.length!=j)throw new RangeError(`Mismatched change set length (got ${X.length}, expected ${j})`);J(),K=K?K.compose(X.map(K)):X}else{let{from:U,to:Y=U,insert:Q}=X;if(U>Y||U<0||Y>j)throw new RangeError(`Invalid change range ${U} to ${Y} (in doc of length ${j})`);let O=!Q?m.empty:typeof Q=="string"?m.of(Q.split(q||Cq)):Q,F=O.length;if(U==Y&&F==0)return;if(U<G)J();if(U>G)OA($,U-G,-1);OA($,Y-U,F),Ij(B,$,O),G=Y}}return Z(A),J(!K),K}static empty(A){return new jA(A?[A,-1]:[],[])}static fromJSON(A){if(!Array.isArray(A))throw new RangeError("Invalid JSON representation of ChangeSet");let j=[],q=[];for(let $=0;$<A.length;$++){let B=A[$];if(typeof B=="number")j.push(B,-1);else if(!Array.isArray(B)||typeof B[0]!="number"||B.some((G,K)=>K&&typeof G!="string"))throw new RangeError("Invalid JSON representation of ChangeSet");else if(B.length==1)j.push(B[0],0);else{while(q.length<$)q.push(m.empty);q[$]=m.of(B.slice(1)),j.push(B[0],q[$].length)}}return new jA(j,q)}static createSet(A,j){return new jA(A,j)}}function OA(A,j,q,$=!1){if(j==0&&q<=0)return;let B=A.length-2;if(B>=0&&q<=0&&q==A[B+1])A[B]+=j;else if(B>=0&&j==0&&A[B]==0)A[B+1]+=q;else if($)A[B]+=j,A[B+1]+=q;else A.push(j,q)}function Ij(A,j,q){if(q.length==0)return;let $=j.length-2>>1;if($<A.length)A[A.length-1]=A[A.length-1].append(q);else{while(A.length<$)A.push(m.empty);A.push(q)}}function yq(A,j,q){let $=A.inserted;for(let B=0,G=0,K=0;K<A.sections.length;){let J=A.sections[K++],Z=A.sections[K++];if(Z<0)B+=J,G+=J;else{let X=B,U=G,Y=m.empty;for(;;){if(X+=J,U+=Z,Z&&$)Y=Y.append($[K-2>>1]);if(q||K==A.sections.length||A.sections[K+1]<0)break;J=A.sections[K++],Z=A.sections[K++]}j(B,X,G,U,Y),B=X,G=U}}}function bq(A,j,q,$=!1){let B=[],G=$?[]:null,K=new nj(A),J=new nj(j);for(let Z=-1;;)if(K.done&&J.len||J.done&&K.len)throw new Error("Mismatched change set lengths");else if(K.ins==-1&&J.ins==-1){let X=Math.min(K.len,J.len);OA(B,X,-1),K.forward(X),J.forward(X)}else if(J.ins>=0&&(K.ins<0||Z==K.i||K.off==0&&(J.len<K.len||J.len==K.len&&!q))){let X=J.len;OA(B,J.ins,-1);while(X){let U=Math.min(K.len,X);if(K.ins>=0&&Z<K.i&&K.len<=U){if(OA(B,0,K.ins),G)Ij(G,B,K.text);Z=K.i}K.forward(U),X-=U}J.next()}else if(K.ins>=0){let X=0,U=K.len;while(U)if(J.ins==-1){let Y=Math.min(U,J.len);X+=Y,U-=Y,J.forward(Y)}else if(J.ins==0&&J.len<U)U-=J.len,J.next();else break;if(OA(B,X,Z<K.i?K.ins:0),G&&Z<K.i)Ij(G,B,K.text);Z=K.i,K.forward(K.len-U)}else if(K.done&&J.done)return G?jA.createSet(B,G):pA.create(B);else throw new Error("Mismatched change set lengths")}function AB(A,j,q=!1){let $=[],B=q?[]:null,G=new nj(A),K=new nj(j);for(let J=!1;;)if(G.done&&K.done)return B?jA.createSet($,B):pA.create($);else if(G.ins==0)OA($,G.len,0,J),G.next();else if(K.len==0&&!K.done){if(OA($,0,K.ins,J),B)Ij(B,$,K.text);K.next()}else if(G.done||K.done)throw new Error("Mismatched change set lengths");else{let Z=Math.min(G.len2,K.len),X=$.length;if(G.ins==-1){let U=K.ins==-1?-1:K.off?0:K.ins;if(OA($,Z,U,J),B&&U)Ij(B,$,K.text)}else if(K.ins==-1){if(OA($,G.off?0:G.len,Z,J),B)Ij(B,$,G.textBit(Z))}else if(OA($,G.off?0:G.len,K.off?0:K.ins,J),B&&!K.off)Ij(B,$,K.text);J=(G.ins>Z||K.ins>=0&&K.len>Z)&&(J||$.length>X),G.forward2(Z),K.forward(Z)}}class nj{constructor(A){this.set=A,this.i=0,this.next()}next(){let{sections:A}=this.set;if(this.i<A.length)this.len=A[this.i++],this.ins=A[this.i++];else this.len=0,this.ins=-2;this.off=0}get done(){return this.ins==-2}get len2(){return this.ins<0?this.len:this.ins}get text(){let{inserted:A}=this.set,j=this.i-2>>1;return j>=A.length?m.empty:A[j]}textBit(A){let{inserted:j}=this.set,q=this.i-2>>1;return q>=j.length&&!A?m.empty:j[q].slice(this.off,A==null?void 0:this.off+A)}forward(A){if(A==this.len)this.next();else this.len-=A,this.off+=A}forward2(A){if(this.ins==-1)this.forward(A);else if(A==this.ins)this.next();else this.ins-=A,this.off+=A}}class Cj{constructor(A,j,q){this.from=A,this.to=j,this.flags=q}get anchor(){return this.flags&32?this.to:this.from}get head(){return this.flags&32?this.from:this.to}get empty(){return this.from==this.to}get assoc(){return this.flags&8?-1:this.flags&16?1:0}get bidiLevel(){let A=this.flags&7;return A==7?null:A}get goalColumn(){let A=this.flags>>6;return A==16777215?void 0:A}map(A,j=-1){let q,$;if(this.empty)q=$=A.mapPos(this.from,j);else q=A.mapPos(this.from,1),$=A.mapPos(this.to,-1);return q==this.from&&$==this.to?this:new Cj(q,$,this.flags)}extend(A,j=A){if(A<=this.anchor&&j>=this.anchor)return E.range(A,j);let q=Math.abs(A-this.anchor)>Math.abs(j-this.anchor)?A:j;return E.range(this.anchor,q)}eq(A,j=!1){return this.anchor==A.anchor&&this.head==A.head&&(!j||!this.empty||this.assoc==A.assoc)}toJSON(){return{anchor:this.anchor,head:this.head}}static fromJSON(A){if(!A||typeof A.anchor!="number"||typeof A.head!="number")throw new RangeError("Invalid JSON representation for SelectionRange");return E.range(A.anchor,A.head)}static create(A,j,q){return new Cj(A,j,q)}}class E{constructor(A,j){this.ranges=A,this.mainIndex=j}map(A,j=-1){if(A.empty)return this;return E.create(this.ranges.map((q)=>q.map(A,j)),this.mainIndex)}eq(A,j=!1){if(this.ranges.length!=A.ranges.length||this.mainIndex!=A.mainIndex)return!1;for(let q=0;q<this.ranges.length;q++)if(!this.ranges[q].eq(A.ranges[q],j))return!1;return!0}get main(){return this.ranges[this.mainIndex]}asSingle(){return this.ranges.length==1?this:new E([this.main],0)}addRange(A,j=!0){return E.create([A].concat(this.ranges),j?0:this.mainIndex+1)}replaceRange(A,j=this.mainIndex){let q=this.ranges.slice();return q[j]=A,E.create(q,this.mainIndex)}toJSON(){return{ranges:this.ranges.map((A)=>A.toJSON()),main:this.mainIndex}}static fromJSON(A){if(!A||!Array.isArray(A.ranges)||typeof A.main!="number"||A.main>=A.ranges.length)throw new RangeError("Invalid JSON representation for EditorSelection");return new E(A.ranges.map((j)=>Cj.fromJSON(j)),A.main)}static single(A,j=A){return new E([E.range(A,j)],0)}static create(A,j=0){if(A.length==0)throw new RangeError("A selection needs at least one range");for(let q=0,$=0;$<A.length;$++){let B=A[$];if(B.empty?B.from<=q:B.from<q)return E.normalized(A.slice(),j);q=B.to}return new E(A,j)}static cursor(A,j=0,q,$){return Cj.create(A,A,(j==0?0:j<0?8:16)|(q==null?7:Math.min(6,q))|($!==null&&$!==void 0?$:16777215)<<6)}static range(A,j,q,$){let B=(q!==null&&q!==void 0?q:16777215)<<6|($==null?7:Math.min(6,$));return j<A?Cj.create(j,A,48|B):Cj.create(A,j,(j>A?8:0)|B)}static normalized(A,j=0){let q=A[j];A.sort(($,B)=>$.from-B.from),j=A.indexOf(q);for(let $=1;$<A.length;$++){let B=A[$],G=A[$-1];if(B.empty?B.from<=G.to:B.from<G.to){let K=G.from,J=Math.max(B.to,G.to);if($<=j)j--;A.splice(--$,2,B.anchor>B.head?E.range(J,K):E.range(K,J))}}return new E(A,j)}}function jB(A,j){for(let q of A.ranges)if(q.to>j)throw new RangeError("Selection points outside of document")}var fq=0;class k{constructor(A,j,q,$,B){this.combine=A,this.compareInput=j,this.compare=q,this.isStatic=$,this.id=fq++,this.default=A([]),this.extensions=typeof B=="function"?B(this):B}get reader(){return this}static define(A={}){return new k(A.combine||((j)=>j),A.compareInput||((j,q)=>j===q),A.compare||(!A.combine?pq:(j,q)=>j===q),!!A.static,A.enables)}of(A){return new z6([],this,0,A)}compute(A,j){if(this.isStatic)throw new Error("Can't compute a static facet");return new z6(A,this,1,j)}computeN(A,j){if(this.isStatic)throw new Error("Can't compute a static facet");return new z6(A,this,2,j)}from(A,j){if(!j)j=(q)=>q;return this.compute([A],(q)=>j(q.field(A)))}}function pq(A,j){return A==j||A.length==j.length&&A.every((q,$)=>q===j[$])}class z6{constructor(A,j,q,$){this.dependencies=A,this.facet=j,this.type=q,this.value=$,this.id=fq++}dynamicSlot(A){var j;let q=this.value,$=this.facet.compareInput,B=this.id,G=A[B]>>1,K=this.type==2,J=!1,Z=!1,X=[];for(let U of this.dependencies)if(U=="doc")J=!0;else if(U=="selection")Z=!0;else if((((j=A[U.id])!==null&&j!==void 0?j:1)&1)==0)X.push(A[U.id]);return{create(U){return U.values[G]=q(U),1},update(U,Y){if(J&&Y.docChanged||Z&&(Y.docChanged||Y.selection)||xq(U,X)){let Q=q(U);if(K?!a$(Q,U.values[G],$):!$(Q,U.values[G]))return U.values[G]=Q,1}return 0},reconfigure:(U,Y)=>{let Q,O=Y.config.address[B];if(O!=null){let F=Q7(Y,O);if(this.dependencies.every((z)=>{return z instanceof k?Y.facet(z)===U.facet(z):z instanceof o?Y.field(z,!1)==U.field(z,!1):!0})||(K?a$(Q=q(U),F,$):$(Q=q(U),F)))return U.values[G]=F,0}else Q=q(U);return U.values[G]=Q,1}}}}function a$(A,j,q){if(A.length!=j.length)return!1;for(let $=0;$<A.length;$++)if(!q(A[$],j[$]))return!1;return!0}function xq(A,j){let q=!1;for(let $ of j)if(I6(A,$)&1)q=!0;return q}function I4(A,j,q){let $=q.map((Z)=>A[Z.id]),B=q.map((Z)=>Z.type),G=$.filter((Z)=>!(Z&1)),K=A[j.id]>>1;function J(Z){let X=[];for(let U=0;U<$.length;U++){let Y=Q7(Z,$[U]);if(B[U]==2)for(let Q of Y)X.push(Q);else X.push(Y)}return j.combine(X)}return{create(Z){for(let X of $)I6(Z,X);return Z.values[K]=J(Z),1},update(Z,X){if(!xq(Z,G))return 0;let U=J(Z);if(j.compare(U,Z.values[K]))return 0;return Z.values[K]=U,1},reconfigure(Z,X){let U=xq(Z,$),Y=X.config.facets[j.id],Q=X.facet(j);if(Y&&!U&&pq(q,Y))return Z.values[K]=Q,0;let O=J(Z);if(j.compare(O,Q))return Z.values[K]=Q,0;return Z.values[K]=O,1}}}var K7=k.define({static:!0});class o{constructor(A,j,q,$,B){this.id=A,this.createF=j,this.updateF=q,this.compareF=$,this.spec=B,this.provides=void 0}static define(A){let j=new o(fq++,A.create,A.update,A.compare||((q,$)=>q===$),A);if(A.provide)j.provides=A.provide(j);return j}create(A){let j=A.facet(K7).find((q)=>q.field==this);return((j===null||j===void 0?void 0:j.create)||this.createF)(A)}slot(A){let j=A[this.id]>>1;return{create:(q)=>{return q.values[j]=this.create(q),1},update:(q,$)=>{let B=q.values[j],G=this.updateF(B,$);if(this.compareF(B,G))return 0;return q.values[j]=G,1},reconfigure:(q,$)=>{let B=q.facet(K7),G=$.facet(K7),K;if((K=B.find((J)=>J.field==this))&&K!=G.find((J)=>J.field==this))return q.values[j]=K.create(q),1;if($.config.address[this.id]!=null)return q.values[j]=$.field(this),0;return q.values[j]=this.create(q),1}}}init(A){return[this,K7.of({field:this,create:A})]}get extension(){return this}}var Tj={lowest:4,low:3,default:2,high:1,highest:0};function F6(A){return(j)=>new lq(j,A)}var lA={highest:F6(Tj.highest),high:F6(Tj.high),default:F6(Tj.default),low:F6(Tj.low),lowest:F6(Tj.lowest)};class lq{constructor(A,j){this.inner=A,this.prec=j}}class O7{of(A){return new U7(this,A)}reconfigure(A){return O7.reconfigure.of({compartment:this,extension:A})}get(A){return A.config.compartments.get(this)}}class U7{constructor(A,j){this.compartment=A,this.inner=j}}class Y7{constructor(A,j,q,$,B,G){this.base=A,this.compartments=j,this.dynamicSlots=q,this.address=$,this.staticValues=B,this.facets=G,this.statusTemplate=[];while(this.statusTemplate.length<q.length)this.statusTemplate.push(0)}staticFacet(A){let j=this.address[A.id];return j==null?A.default:this.staticValues[j>>1]}static resolve(A,j,q){let $=[],B=Object.create(null),G=new Map;for(let Y of W4(A,j,G))if(Y instanceof o)$.push(Y);else(B[Y.facet.id]||(B[Y.facet.id]=[])).push(Y);let K=Object.create(null),J=[],Z=[];for(let Y of $)K[Y.id]=Z.length<<1,Z.push((Q)=>Y.slot(Q));let X=q===null||q===void 0?void 0:q.config.facets;for(let Y in B){let Q=B[Y],O=Q[0].facet,F=X&&X[Y]||[];if(Q.every((z)=>z.type==0))if(K[O.id]=J.length<<1|1,pq(F,Q))J.push(q.facet(O));else{let z=O.combine(Q.map((I)=>I.value));J.push(q&&O.compare(z,q.facet(O))?q.facet(O):z)}else{for(let z of Q)if(z.type==0)K[z.id]=J.length<<1|1,J.push(z.value);else K[z.id]=Z.length<<1,Z.push((I)=>z.dynamicSlot(I));K[O.id]=Z.length<<1,Z.push((z)=>I4(z,O,Q))}}let U=Z.map((Y)=>Y(K));return new Y7(A,G,U,K,J,B)}}function W4(A,j,q){let $=[[],[],[],[],[]],B=new Map;function G(K,J){let Z=B.get(K);if(Z!=null){if(Z<=J)return;let X=$[Z].indexOf(K);if(X>-1)$[Z].splice(X,1);if(K instanceof U7)q.delete(K.compartment)}if(B.set(K,J),Array.isArray(K))for(let X of K)G(X,J);else if(K instanceof U7){if(q.has(K.compartment))throw new RangeError("Duplicate use of compartment in extensions");let X=j.get(K.compartment)||K.inner;q.set(K.compartment,X),G(X,J)}else if(K instanceof lq)G(K.inner,K.prec);else if(K instanceof o){if($[J].push(K),K.provides)G(K.provides,J)}else if(K instanceof z6){if($[J].push(K),K.facet.extensions)G(K.facet.extensions,Tj.default)}else{let X=K.extension;if(!X)throw new Error(`Unrecognized extension value in extension set (${K}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);G(X,J)}}return G(A,Tj.default),$.reduce((K,J)=>K.concat(J))}function I6(A,j){if(j&1)return 2;let q=j>>1,$=A.status[q];if($==4)throw new Error("Cyclic dependency between fields and/or facets");if($&2)return $;A.status[q]=4;let B=A.computeSlot(A,A.config.dynamicSlots[q]);return A.status[q]=2|B}function Q7(A,j){return j&1?A.config.staticValues[j>>1]:A.values[j>>1]}var qB=k.define(),Sq=k.define({combine:(A)=>A.some((j)=>j),static:!0}),$B=k.define({combine:(A)=>A.length?A[0]:void 0,static:!0}),BB=k.define(),GB=k.define(),KB=k.define(),JB=k.define({combine:(A)=>A.length?A[0]:!1});class kA{constructor(A,j){this.type=A,this.value=j}static define(){return new ZB}}class ZB{of(A){return new kA(this,A)}}class XB{constructor(A){this.map=A}of(A){return new b(this,A)}}class b{constructor(A,j){this.type=A,this.value=j}map(A){let j=this.type.map(this.value,A);return j===void 0?void 0:j==this.value?this:new b(this.type,j)}is(A){return this.type==A}static define(A={}){return new XB(A.map||((j)=>j))}static mapEffects(A,j){if(!A.length)return A;let q=[];for(let $ of A){let B=$.map(j);if(B)q.push(B)}return q}}b.reconfigure=b.define();b.appendConfig=b.define();class e{constructor(A,j,q,$,B,G){if(this.startState=A,this.changes=j,this.selection=q,this.effects=$,this.annotations=B,this.scrollIntoView=G,this._doc=null,this._state=null,q)jB(q,j.newLength);if(!B.some((K)=>K.type==e.time))this.annotations=B.concat(e.time.of(Date.now()))}static create(A,j,q,$,B,G){return new e(A,j,q,$,B,G)}get newDoc(){return this._doc||(this._doc=this.changes.apply(this.startState.doc))}get newSelection(){return this.selection||this.startState.selection.map(this.changes)}get state(){if(!this._state)this.startState.applyTransaction(this);return this._state}annotation(A){for(let j of this.annotations)if(j.type==A)return j.value;return}get docChanged(){return!this.changes.empty}get reconfigured(){return this.startState.config!=this.state.config}isUserEvent(A){let j=this.annotation(e.userEvent);return!!(j&&(j==A||j.length>A.length&&j.slice(0,A.length)==A&&j[A.length]=="."))}}e.time=kA.define();e.userEvent=kA.define();e.addToHistory=kA.define();e.remote=kA.define();function E4(A,j){let q=[];for(let $=0,B=0;;){let G,K;if($<A.length&&(B==j.length||j[B]>=A[$]))G=A[$++],K=A[$++];else if(B<j.length)G=j[B++],K=j[B++];else return q;if(!q.length||q[q.length-1]<G)q.push(G,K);else if(q[q.length-1]<K)q[q.length-1]=K}}function UB(A,j,q){var $;let B,G,K;if(q)B=j.changes,G=jA.empty(j.changes.length),K=A.changes.compose(j.changes);else B=j.changes.map(A.changes),G=A.changes.mapDesc(j.changes,!0),K=A.changes.compose(B);return{changes:K,selection:j.selection?j.selection.map(G):($=A.selection)===null||$===void 0?void 0:$.map(B),effects:b.mapEffects(A.effects,B).concat(b.mapEffects(j.effects,G)),annotations:A.annotations.length?A.annotations.concat(j.annotations):j.annotations,scrollIntoView:A.scrollIntoView||j.scrollIntoView}}function wq(A,j,q){let $=j.selection,B=sj(j.annotations);if(j.userEvent)B=B.concat(e.userEvent.of(j.userEvent));return{changes:j.changes instanceof jA?j.changes:jA.of(j.changes||[],q,A.facet($B)),selection:$&&($ instanceof E?$:E.single($.anchor,$.head)),effects:sj(j.effects),annotations:B,scrollIntoView:!!j.scrollIntoView}}function YB(A,j,q){let $=wq(A,j.length?j[0]:{},A.doc.length);if(j.length&&j[0].filter===!1)q=!1;for(let G=1;G<j.length;G++){if(j[G].filter===!1)q=!1;let K=!!j[G].sequential;$=UB($,wq(A,j[G],K?$.changes.newLength:A.doc.length),K)}let B=e.create(A,$.changes,$.selection,$.effects,$.annotations,$.scrollIntoView);return _4(q?H4(B):B)}function H4(A){let j=A.startState,q=!0;for(let B of j.facet(BB)){let G=B(A);if(G===!1){q=!1;break}if(Array.isArray(G))q=q===!0?G:E4(q,G)}if(q!==!0){let B,G;if(q===!1)G=A.changes.invertedDesc,B=jA.empty(j.doc.length);else{let K=A.changes.filter(q);B=K.changes,G=K.filtered.mapDesc(K.changes).invertedDesc}A=e.create(j,B,A.selection&&A.selection.map(G),b.mapEffects(A.effects,G),A.annotations,A.scrollIntoView)}let $=j.facet(GB);for(let B=$.length-1;B>=0;B--){let G=$[B](A);if(G instanceof e)A=G;else if(Array.isArray(G)&&G.length==1&&G[0]instanceof e)A=G[0];else A=YB(j,sj(G),!1)}return A}function _4(A){let j=A.startState,q=j.facet(KB),$=A;for(let B=q.length-1;B>=0;B--){let G=q[B](A);if(G&&Object.keys(G).length)$=UB($,wq(j,G,A.changes.newLength),!0)}return $==A?A:e.create(j,A.changes,A.selection,$.effects,$.annotations,$.scrollIntoView)}var N4=[];function sj(A){return A==null?N4:Array.isArray(A)?A:[A]}var l=function(A){return A[A.Word=0]="Word",A[A.Space=1]="Space",A[A.Other=2]="Other",A}(l||(l={})),D4=/[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/,hq;try{hq=new RegExp("[\\p{Alphabetic}\\p{Number}_]","u")}catch(A){}function M4(A){if(hq)return hq.test(A);for(let j=0;j<A.length;j++){let q=A[j];if(/\w/.test(q)||q>""&&(q.toUpperCase()!=q.toLowerCase()||D4.test(q)))return!0}return!1}function R4(A){return(j)=>{if(!/\S/.test(j))return l.Space;if(M4(j))return l.Word;for(let q=0;q<A.length;q++)if(j.indexOf(A[q])>-1)return l.Word;return l.Other}}class v{constructor(A,j,q,$,B,G){if(this.config=A,this.doc=j,this.selection=q,this.values=$,this.status=A.statusTemplate.slice(),this.computeSlot=B,G)G._state=this;for(let K=0;K<this.config.dynamicSlots.length;K++)I6(this,K<<1);this.computeSlot=null}field(A,j=!0){let q=this.config.address[A.id];if(q==null){if(j)throw new RangeError("Field is not present in this state");return}return I6(this,q),Q7(this,q)}update(...A){return YB(this,A,!0)}applyTransaction(A){let j=this.config,{base:q,compartments:$}=j;for(let K of A.effects)if(K.is(O7.reconfigure)){if(j)$=new Map,j.compartments.forEach((J,Z)=>$.set(Z,J)),j=null;$.set(K.value.compartment,K.value.extension)}else if(K.is(b.reconfigure))j=null,q=K.value;else if(K.is(b.appendConfig))j=null,q=sj(q).concat(K.value);let B;if(!j)j=Y7.resolve(q,$,this),B=new v(j,this.doc,this.selection,j.dynamicSlots.map(()=>null),(J,Z)=>Z.reconfigure(J,this),null).values;else B=A.startState.values.slice();let G=A.startState.facet(Sq)?A.newSelection:A.newSelection.asSingle();new v(j,A.newDoc,G,B,(K,J)=>J.update(K,A),A)}replaceSelection(A){if(typeof A=="string")A=this.toText(A);return this.changeByRange((j)=>({changes:{from:j.from,to:j.to,insert:A},range:E.cursor(j.from+A.length)}))}changeByRange(A){let j=this.selection,q=A(j.ranges[0]),$=this.changes(q.changes),B=[q.range],G=sj(q.effects);for(let K=1;K<j.ranges.length;K++){let J=A(j.ranges[K]),Z=this.changes(J.changes),X=Z.map($);for(let Y=0;Y<K;Y++)B[Y]=B[Y].map(X);let U=$.mapDesc(Z,!0);B.push(J.range.map(U)),$=$.compose(X),G=b.mapEffects(G,X).concat(b.mapEffects(sj(J.effects),U))}return{changes:$,selection:E.create(B,j.mainIndex),effects:G}}changes(A=[]){if(A instanceof jA)return A;return jA.of(A,this.doc.length,this.facet(v.lineSeparator))}toText(A){return m.of(A.split(this.facet(v.lineSeparator)||Cq))}sliceDoc(A=0,j=this.doc.length){return this.doc.sliceString(A,j,this.lineBreak)}facet(A){let j=this.config.address[A.id];if(j==null)return A.default;return I6(this,j),Q7(this,j)}toJSON(A){let j={doc:this.sliceDoc(),selection:this.selection.toJSON()};if(A)for(let q in A){let $=A[q];if($ instanceof o&&this.config.address[$.id]!=null)j[q]=$.spec.toJSON(this.field(A[q]),this)}return j}static fromJSON(A,j={},q){if(!A||typeof A.doc!="string")throw new RangeError("Invalid JSON representation for EditorState");let $=[];if(q){for(let B in q)if(Object.prototype.hasOwnProperty.call(A,B)){let G=q[B],K=A[B];$.push(G.init((J)=>G.spec.fromJSON(K,J)))}}return v.create({doc:A.doc,selection:E.fromJSON(A.selection),extensions:j.extensions?$.concat([j.extensions]):$})}static create(A={}){let j=Y7.resolve(A.extensions||[],new Map),q=A.doc instanceof m?A.doc:m.of((A.doc||"").split(j.staticFacet(v.lineSeparator)||Cq)),$=!A.selection?E.single(0):A.selection instanceof E?A.selection:E.single(A.selection.anchor,A.selection.head);if(jB($,q.length),!j.staticFacet(Sq))$=$.asSingle();return new v(j,q,$,j.dynamicSlots.map(()=>null),(B,G)=>G.create(B),null)}get tabSize(){return this.facet(v.tabSize)}get lineBreak(){return this.facet(v.lineSeparator)||`
`}get readOnly(){return this.facet(JB)}phrase(A,...j){for(let q of this.facet(v.phrases))if(Object.prototype.hasOwnProperty.call(q,A)){A=q[A];break}if(j.length)A=A.replace(/\$(\$|\d*)/g,(q,$)=>{if($=="$")return"$";let B=+($||1);return!B||B>j.length?q:j[B-1]});return A}languageDataAt(A,j,q=-1){let $=[];for(let B of this.facet(qB))for(let G of B(this,j,q))if(Object.prototype.hasOwnProperty.call(G,A))$.push(G[A]);return $}charCategorizer(A){return R4(this.languageDataAt("wordChars",A).join(""))}wordAt(A){let{text:j,from:q,length:$}=this.doc.lineAt(A),B=this.charCategorizer(A),G=A-q,K=A-q;while(G>0){let J=qA(j,G,!1);if(B(j.slice(J,G))!=l.Word)break;G=J}while(K<$){let J=qA(j,K);if(B(j.slice(K,J))!=l.Word)break;K=J}return G==K?null:E.range(G+q,K+q)}}v.allowMultipleSelections=Sq;v.tabSize=k.define({combine:(A)=>A.length?A[0]:4});v.lineSeparator=$B;v.readOnly=JB;v.phrases=k.define({compare(A,j){let q=Object.keys(A),$=Object.keys(j);return q.length==$.length&&q.every((B)=>A[B]==j[B])}});v.languageData=qB;v.changeFilter=BB;v.transactionFilter=GB;v.transactionExtender=KB;O7.reconfigure=b.define();function FA(A,j,q={}){let $={};for(let B of A)for(let G of Object.keys(B)){let K=B[G],J=$[G];if(J===void 0)$[G]=K;else if(J===K||K===void 0);else if(Object.hasOwnProperty.call(q,G))$[G]=q[G](J,K);else throw new Error("Config merge conflict for field "+G)}for(let B in j)if($[B]===void 0)$[B]=j[B];return $}class Aj{eq(A){return this==A}range(A,j=A){return W6.create(A,j,this)}}Aj.prototype.startSide=Aj.prototype.endSide=0;Aj.prototype.point=!1;Aj.prototype.mapMode=ZA.TrackDel;class W6{constructor(A,j,q){this.from=A,this.to=j,this.value=q}static create(A,j,q){return new W6(A,j,q)}}function vq(A,j){return A.from-j.from||A.value.startSide-j.value.startSide}class dq{constructor(A,j,q,$){this.from=A,this.to=j,this.value=q,this.maxPoint=$}get length(){return this.to[this.to.length-1]}findIndex(A,j,q,$=0){let B=q?this.to:this.from;for(let G=$,K=B.length;;){if(G==K)return G;let J=G+K>>1,Z=B[J]-A||(q?this.value[J].endSide:this.value[J].startSide)-j;if(J==G)return Z>=0?G:K;if(Z>=0)K=J;else G=J+1}}between(A,j,q,$){for(let B=this.findIndex(j,-1e9,!0),G=this.findIndex(q,1e9,!1,B);B<G;B++)if($(this.from[B]+A,this.to[B]+A,this.value[B])===!1)return!1}map(A,j){let q=[],$=[],B=[],G=-1,K=-1;for(let J=0;J<this.value.length;J++){let Z=this.value[J],X=this.from[J]+A,U=this.to[J]+A,Y,Q;if(X==U){let O=j.mapPos(X,Z.startSide,Z.mapMode);if(O==null)continue;if(Y=Q=O,Z.startSide!=Z.endSide){if(Q=j.mapPos(X,Z.endSide),Q<Y)continue}}else if(Y=j.mapPos(X,Z.startSide),Q=j.mapPos(U,Z.endSide),Y>Q||Y==Q&&Z.startSide>0&&Z.endSide<=0)continue;if((Q-Y||Z.endSide-Z.startSide)<0)continue;if(G<0)G=Y;if(Z.point)K=Math.max(K,Q-Y);q.push(Z),$.push(Y-G),B.push(Q-G)}return{mapped:q.length?new dq($,B,q,K):null,pos:G}}}class h{constructor(A,j,q,$){this.chunkPos=A,this.chunk=j,this.nextLayer=q,this.maxPoint=$}static create(A,j,q,$){return new h(A,j,q,$)}get length(){let A=this.chunk.length-1;return A<0?0:Math.max(this.chunkEnd(A),this.nextLayer.length)}get size(){if(this.isEmpty)return 0;let A=this.nextLayer.size;for(let j of this.chunk)A+=j.value.length;return A}chunkEnd(A){return this.chunkPos[A]+this.chunk[A].length}update(A){let{add:j=[],sort:q=!1,filterFrom:$=0,filterTo:B=this.length}=A,G=A.filter;if(j.length==0&&!G)return this;if(q)j=j.slice().sort(vq);if(this.isEmpty)return j.length?h.of(j):this;let K=new cq(this,null,-1).goto(0),J=0,Z=[],X=new RA;while(K.value||J<j.length)if(J<j.length&&(K.from-j[J].from||K.startSide-j[J].value.startSide)>=0){let U=j[J++];if(!X.addInner(U.from,U.to,U.value))Z.push(U)}else if(K.rangeIndex==1&&K.chunkIndex<this.chunk.length&&(J==j.length||this.chunkEnd(K.chunkIndex)<j[J].from)&&(!G||$>this.chunkEnd(K.chunkIndex)||B<this.chunkPos[K.chunkIndex])&&X.addChunk(this.chunkPos[K.chunkIndex],this.chunk[K.chunkIndex]))K.nextChunk();else{if(!G||$>K.to||B<K.from||G(K.from,K.to,K.value)){if(!X.addInner(K.from,K.to,K.value))Z.push(W6.create(K.from,K.to,K.value))}K.next()}return X.finishInner(this.nextLayer.isEmpty&&!Z.length?h.empty:this.nextLayer.update({add:Z,filter:G,filterFrom:$,filterTo:B}))}map(A){if(A.empty||this.isEmpty)return this;let j=[],q=[],$=-1;for(let G=0;G<this.chunk.length;G++){let K=this.chunkPos[G],J=this.chunk[G],Z=A.touchesRange(K,K+J.length);if(Z===!1)$=Math.max($,J.maxPoint),j.push(J),q.push(A.mapPos(K));else if(Z===!0){let{mapped:X,pos:U}=J.map(K,A);if(X)$=Math.max($,X.maxPoint),j.push(X),q.push(U)}}let B=this.nextLayer.map(A);return j.length==0?B:new h(q,j,B||h.empty,$)}between(A,j,q){if(this.isEmpty)return;for(let $=0;$<this.chunk.length;$++){let B=this.chunkPos[$],G=this.chunk[$];if(j>=B&&A<=B+G.length&&G.between(B,A-B,j-B,q)===!1)return}this.nextLayer.between(A,j,q)}iter(A=0){return E6.from([this]).goto(A)}get isEmpty(){return this.nextLayer==this}static iter(A,j=0){return E6.from(A).goto(j)}static compare(A,j,q,$,B=-1){let G=A.filter((U)=>U.maxPoint>0||!U.isEmpty&&U.maxPoint>=B),K=j.filter((U)=>U.maxPoint>0||!U.isEmpty&&U.maxPoint>=B),J=r$(G,K,q),Z=new dj(G,J,B),X=new dj(K,J,B);if(q.iterGaps((U,Y,Q)=>o$(Z,U,X,Y,Q,$)),q.empty&&q.length==0)o$(Z,0,X,0,0,$)}static eq(A,j,q=0,$){if($==null)$=999999999;let B=A.filter((X)=>!X.isEmpty&&j.indexOf(X)<0),G=j.filter((X)=>!X.isEmpty&&A.indexOf(X)<0);if(B.length!=G.length)return!1;if(!B.length)return!0;let K=r$(B,G),J=new dj(B,K,0).goto(q),Z=new dj(G,K,0).goto(q);for(;;){if(J.to!=Z.to||!mq(J.active,Z.active)||J.point&&(!Z.point||!J.point.eq(Z.point)))return!1;if(J.to>$)return!0;J.next(),Z.next()}}static spans(A,j,q,$,B=-1){let G=new dj(A,null,B).goto(j),K=j,J=G.openStart;for(;;){let Z=Math.min(G.to,q);if(G.point){let X=G.activeForPoint(G.to),U=G.pointFrom<j?X.length+1:G.point.startSide<0?X.length:Math.min(X.length,J);$.point(K,Z,G.point,X,U,G.pointRank),J=Math.min(G.openEnd(Z),X.length)}else if(Z>K)$.span(K,Z,G.active,J),J=G.openEnd(Z);if(G.to>q)return J+(G.point&&G.to>q?1:0);K=G.to,G.next()}}static of(A,j=!1){let q=new RA;for(let $ of A instanceof W6?[A]:j?V4(A):A)q.add($.from,$.to,$.value);return q.finish()}static join(A){if(!A.length)return h.empty;let j=A[A.length-1];for(let q=A.length-2;q>=0;q--)for(let $=A[q];$!=h.empty;$=$.nextLayer)j=new h($.chunkPos,$.chunk,j,Math.max($.maxPoint,j.maxPoint));return j}}h.empty=new h([],[],null,-1);function V4(A){if(A.length>1)for(let j=A[0],q=1;q<A.length;q++){let $=A[q];if(vq(j,$)>0)return A.slice().sort(vq);j=$}return A}h.empty.nextLayer=h.empty;class RA{finishChunk(A){if(this.chunks.push(new dq(this.from,this.to,this.value,this.maxPoint)),this.chunkPos.push(this.chunkStart),this.chunkStart=-1,this.setMaxPoint=Math.max(this.setMaxPoint,this.maxPoint),this.maxPoint=-1,A)this.from=[],this.to=[],this.value=[]}constructor(){this.chunks=[],this.chunkPos=[],this.chunkStart=-1,this.last=null,this.lastFrom=-1e9,this.lastTo=-1e9,this.from=[],this.to=[],this.value=[],this.maxPoint=-1,this.setMaxPoint=-1,this.nextLayer=null}add(A,j,q){if(!this.addInner(A,j,q))(this.nextLayer||(this.nextLayer=new RA)).add(A,j,q)}addInner(A,j,q){let $=A-this.lastTo||q.startSide-this.last.endSide;if($<=0&&(A-this.lastFrom||q.startSide-this.last.startSide)<0)throw new Error("Ranges must be added sorted by `from` position and `startSide`");if($<0)return!1;if(this.from.length==250)this.finishChunk(!0);if(this.chunkStart<0)this.chunkStart=A;if(this.from.push(A-this.chunkStart),this.to.push(j-this.chunkStart),this.last=q,this.lastFrom=A,this.lastTo=j,this.value.push(q),q.point)this.maxPoint=Math.max(this.maxPoint,j-A);return!0}addChunk(A,j){if((A-this.lastTo||j.value[0].startSide-this.last.endSide)<0)return!1;if(this.from.length)this.finishChunk(!0);this.setMaxPoint=Math.max(this.setMaxPoint,j.maxPoint),this.chunks.push(j),this.chunkPos.push(A);let q=j.value.length-1;return this.last=j.value[q],this.lastFrom=j.from[q]+A,this.lastTo=j.to[q]+A,!0}finish(){return this.finishInner(h.empty)}finishInner(A){if(this.from.length)this.finishChunk(!1);if(this.chunks.length==0)return A;let j=h.create(this.chunkPos,this.chunks,this.nextLayer?this.nextLayer.finishInner(A):A,this.setMaxPoint);return this.from=null,j}}function r$(A,j,q){let $=new Map;for(let G of A)for(let K=0;K<G.chunk.length;K++)if(G.chunk[K].maxPoint<=0)$.set(G.chunk[K],G.chunkPos[K]);let B=new Set;for(let G of j)for(let K=0;K<G.chunk.length;K++){let J=$.get(G.chunk[K]);if(J!=null&&(q?q.mapPos(J):J)==G.chunkPos[K]&&!(q===null||q===void 0?void 0:q.touchesRange(J,J+G.chunk[K].length)))B.add(G.chunk[K])}return B}class cq{constructor(A,j,q,$=0){this.layer=A,this.skip=j,this.minPoint=q,this.rank=$}get startSide(){return this.value?this.value.startSide:0}get endSide(){return this.value?this.value.endSide:0}goto(A,j=-1e9){return this.chunkIndex=this.rangeIndex=0,this.gotoInner(A,j,!1),this}gotoInner(A,j,q){while(this.chunkIndex<this.layer.chunk.length){let $=this.layer.chunk[this.chunkIndex];if(!(this.skip&&this.skip.has($)||this.layer.chunkEnd(this.chunkIndex)<A||$.maxPoint<this.minPoint))break;this.chunkIndex++,q=!1}if(this.chunkIndex<this.layer.chunk.length){let $=this.layer.chunk[this.chunkIndex].findIndex(A-this.layer.chunkPos[this.chunkIndex],j,!0);if(!q||this.rangeIndex<$)this.setRangeIndex($)}this.next()}forward(A,j){if((this.to-A||this.endSide-j)<0)this.gotoInner(A,j,!0)}next(){for(;;)if(this.chunkIndex==this.layer.chunk.length){this.from=this.to=1e9,this.value=null;break}else{let A=this.layer.chunkPos[this.chunkIndex],j=this.layer.chunk[this.chunkIndex],q=A+j.from[this.rangeIndex];if(this.from=q,this.to=A+j.to[this.rangeIndex],this.value=j.value[this.rangeIndex],this.setRangeIndex(this.rangeIndex+1),this.minPoint<0||this.value.point&&this.to-this.from>=this.minPoint)break}}setRangeIndex(A){if(A==this.layer.chunk[this.chunkIndex].value.length){if(this.chunkIndex++,this.skip)while(this.chunkIndex<this.layer.chunk.length&&this.skip.has(this.layer.chunk[this.chunkIndex]))this.chunkIndex++;this.rangeIndex=0}else this.rangeIndex=A}nextChunk(){this.chunkIndex++,this.rangeIndex=0,this.next()}compare(A){return this.from-A.from||this.startSide-A.startSide||this.rank-A.rank||this.to-A.to||this.endSide-A.endSide}}class E6{constructor(A){this.heap=A}static from(A,j=null,q=-1){let $=[];for(let B=0;B<A.length;B++)for(let G=A[B];!G.isEmpty;G=G.nextLayer)if(G.maxPoint>=q)$.push(new cq(G,j,q,B));return $.length==1?$[0]:new E6($)}get startSide(){return this.value?this.value.startSide:0}goto(A,j=-1e9){for(let q of this.heap)q.goto(A,j);for(let q=this.heap.length>>1;q>=0;q--)Tq(this.heap,q);return this.next(),this}forward(A,j){for(let q of this.heap)q.forward(A,j);for(let q=this.heap.length>>1;q>=0;q--)Tq(this.heap,q);if((this.to-A||this.value.endSide-j)<0)this.next()}next(){if(this.heap.length==0)this.from=this.to=1e9,this.value=null,this.rank=-1;else{let A=this.heap[0];if(this.from=A.from,this.to=A.to,this.value=A.value,this.rank=A.rank,A.value)A.next();Tq(this.heap,0)}}}function Tq(A,j){for(let q=A[j];;){let $=(j<<1)+1;if($>=A.length)break;let B=A[$];if($+1<A.length&&B.compare(A[$+1])>=0)B=A[$+1],$++;if(q.compare(B)<0)break;A[$]=q,A[j]=B,j=$}}class dj{constructor(A,j,q){this.minPoint=q,this.active=[],this.activeTo=[],this.activeRank=[],this.minActive=-1,this.point=null,this.pointFrom=0,this.pointRank=0,this.to=-1e9,this.endSide=0,this.openStart=-1,this.cursor=E6.from(A,j,q)}goto(A,j=-1e9){return this.cursor.goto(A,j),this.active.length=this.activeTo.length=this.activeRank.length=0,this.minActive=-1,this.to=A,this.endSide=j,this.openStart=-1,this.next(),this}forward(A,j){while(this.minActive>-1&&(this.activeTo[this.minActive]-A||this.active[this.minActive].endSide-j)<0)this.removeActive(this.minActive);this.cursor.forward(A,j)}removeActive(A){J7(this.active,A),J7(this.activeTo,A),J7(this.activeRank,A),this.minActive=t$(this.active,this.activeTo)}addActive(A){let j=0,{value:q,to:$,rank:B}=this.cursor;while(j<this.activeRank.length&&(B-this.activeRank[j]||$-this.activeTo[j])>0)j++;if(Z7(this.active,j,q),Z7(this.activeTo,j,$),Z7(this.activeRank,j,B),A)Z7(A,j,this.cursor.from);this.minActive=t$(this.active,this.activeTo)}next(){let A=this.to,j=this.point;this.point=null;let q=this.openStart<0?[]:null;for(;;){let $=this.minActive;if($>-1&&(this.activeTo[$]-this.cursor.from||this.active[$].endSide-this.cursor.startSide)<0){if(this.activeTo[$]>A){this.to=this.activeTo[$],this.endSide=this.active[$].endSide;break}if(this.removeActive($),q)J7(q,$)}else if(!this.cursor.value){this.to=this.endSide=1e9;break}else if(this.cursor.from>A){this.to=this.cursor.from,this.endSide=this.cursor.startSide;break}else{let B=this.cursor.value;if(!B.point)this.addActive(q),this.cursor.next();else if(j&&this.cursor.to==this.to&&this.cursor.from<this.cursor.to)this.cursor.next();else{this.point=B,this.pointFrom=this.cursor.from,this.pointRank=this.cursor.rank,this.to=this.cursor.to,this.endSide=B.endSide,this.cursor.next(),this.forward(this.to,this.endSide);break}}}if(q){this.openStart=0;for(let $=q.length-1;$>=0&&q[$]<A;$--)this.openStart++}}activeForPoint(A){if(!this.active.length)return this.active;let j=[];for(let q=this.active.length-1;q>=0;q--){if(this.activeRank[q]<this.pointRank)break;if(this.activeTo[q]>A||this.activeTo[q]==A&&this.active[q].endSide>=this.point.endSide)j.push(this.active[q])}return j.reverse()}openEnd(A){let j=0;for(let q=this.activeTo.length-1;q>=0&&this.activeTo[q]>A;q--)j++;return j}}function o$(A,j,q,$,B,G){A.goto(j),q.goto($);let K=$+B,J=$,Z=$-j;for(;;){let X=A.to+Z-q.to,U=X||A.endSide-q.endSide,Y=U<0?A.to+Z:q.to,Q=Math.min(Y,K);if(A.point||q.point){if(!(A.point&&q.point&&(A.point==q.point||A.point.eq(q.point))&&mq(A.activeForPoint(A.to),q.activeForPoint(q.to))))G.comparePoint(J,Q,A.point,q.point)}else if(Q>J&&!mq(A.active,q.active))G.compareRange(J,Q,A.active,q.active);if(Y>K)break;if((X||A.openEnd!=q.openEnd)&&G.boundChange)G.boundChange(Y);if(J=Y,U<=0)A.next();if(U>=0)q.next()}}function mq(A,j){if(A.length!=j.length)return!1;for(let q=0;q<A.length;q++)if(A[q]!=j[q]&&!A[q].eq(j[q]))return!1;return!0}function J7(A,j){for(let q=j,$=A.length-1;q<$;q++)A[q]=A[q+1];A.pop()}function Z7(A,j,q){for(let $=A.length-1;$>=j;$--)A[$+1]=A[$];A[j]=q}function t$(A,j){let q=-1,$=1e9;for(let B=0;B<j.length;B++)if((j[B]-$||A[B].endSide-A[q].endSide)<0)q=B,$=j[B];return q}function Uj(A,j,q=A.length){let $=0;for(let B=0;B<q&&B<A.length;)if(A.charCodeAt(B)==9)$+=j-$%j,B++;else $++,B=qA(A,B);return $}function F7(A,j,q,$){for(let B=0,G=0;;){if(G>=j)return B;if(B==A.length)break;G+=A.charCodeAt(B)==9?q-G%q:1,B=qA(A,B)}return $===!0?-1:A.length}var QB=typeof Symbol=="undefined"?"__"+"ͼ":Symbol.for("ͼ"),sq=typeof Symbol=="undefined"?"__styleSet"+Math.floor(Math.random()*1e8):Symbol("styleSet"),OB=typeof globalThis!="undefined"?globalThis:typeof window!="undefined"?window:{};class dA{constructor(A,j){this.rules=[];let{finish:q}=j||{};function $(G){return/^@/.test(G)?[G]:G.split(/,\s*/)}function B(G,K,J,Z){let X=[],U=/^@(\w+)\b/.exec(G[0]),Y=U&&U[1]=="keyframes";if(U&&K==null)return J.push(G[0]+";");for(let Q in K){let O=K[Q];if(/&/.test(Q))B(Q.split(/,\s*/).map((F)=>G.map((z)=>F.replace(/&/,z))).reduce((F,z)=>F.concat(z)),O,J);else if(O&&typeof O=="object"){if(!U)throw new RangeError("The value of a property ("+Q+") should be a primitive value.");B($(Q),O,X,Y)}else if(O!=null)X.push(Q.replace(/_.*/,"").replace(/[A-Z]/g,(F)=>"-"+F.toLowerCase())+": "+O+";")}if(X.length||Y)J.push((q&&!U&&!Z?G.map(q):G).join(", ")+" {"+X.join(" ")+"}")}for(let G in A)B($(G),A[G],this.rules)}getRules(){return this.rules.join(`
`)}static newName(){let A=OB[QB]||1;return OB[QB]=A+1,"ͼ"+A.toString(36)}static mount(A,j,q){let $=A[sq],B=q&&q.nonce;if(!$)$=new zB(A,B);else if(B)$.setNonce(B);$.mount(Array.isArray(j)?j:[j],A)}}var FB=new Map;class zB{constructor(A,j){let q=A.ownerDocument||A,$=q.defaultView;if(!A.head&&A.adoptedStyleSheets&&$.CSSStyleSheet){let B=FB.get(q);if(B)return A[sq]=B;this.sheet=new $.CSSStyleSheet,FB.set(q,this)}else if(this.styleTag=q.createElement("style"),j)this.styleTag.setAttribute("nonce",j);this.modules=[],A[sq]=this}mount(A,j){let q=this.sheet,$=0,B=0;for(let G=0;G<A.length;G++){let K=A[G],J=this.modules.indexOf(K);if(J<B&&J>-1)this.modules.splice(J,1),B--,J=-1;if(J==-1){if(this.modules.splice(B++,0,K),q)for(let Z=0;Z<K.rules.length;Z++)q.insertRule(K.rules[Z],$++)}else{while(B<J)$+=this.modules[B++].rules.length;$+=K.rules.length,B++}}if(q){if(j.adoptedStyleSheets.indexOf(this.sheet)<0)j.adoptedStyleSheets=[this.sheet,...j.adoptedStyleSheets]}else{let G="";for(let J=0;J<this.modules.length;J++)G+=this.modules[J].getRules()+`
`;this.styleTag.textContent=G;let K=j.head||j;if(this.styleTag.parentNode!=K)K.insertBefore(this.styleTag,K.firstChild)}}setNonce(A){if(this.styleTag&&this.styleTag.getAttribute("nonce")!=A)this.styleTag.setAttribute("nonce",A)}}var Yj={8:"Backspace",9:"Tab",10:"Enter",12:"NumLock",13:"Enter",16:"Shift",17:"Control",18:"Alt",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",44:"PrintScreen",45:"Insert",46:"Delete",59:";",61:"=",91:"Meta",92:"Meta",106:"*",107:"+",108:",",109:"-",110:".",111:"/",144:"NumLock",145:"ScrollLock",160:"Shift",161:"Shift",162:"Control",163:"Control",164:"Alt",165:"Alt",173:"-",186:";",187:"=",188:",",189:"-",190:".",191:"/",192:"`",219:"[",220:"\\",221:"]",222:"'"},aj={48:")",49:"!",50:"@",51:"#",52:"$",53:"%",54:"^",55:"&",56:"*",57:"(",59:":",61:"+",173:"_",186:":",187:"+",188:"<",189:"_",190:">",191:"?",192:"~",219:"{",220:"|",221:"}",222:'"'},k4=typeof navigator!="undefined"&&/Mac/.test(navigator.platform),L4=typeof navigator!="undefined"&&/MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);for(t=0;t<10;t++)Yj[48+t]=Yj[96+t]=String(t);var t;for(t=1;t<=24;t++)Yj[t+111]="F"+t;var t;for(t=65;t<=90;t++)Yj[t]=String.fromCharCode(t+32),aj[t]=String.fromCharCode(t);var t;for(_6 in Yj)if(!aj.hasOwnProperty(_6))aj[_6]=Yj[_6];var _6;function IB(A){var j=k4&&A.metaKey&&A.shiftKey&&!A.ctrlKey&&!A.altKey||L4&&A.shiftKey&&A.key&&A.key.length==1||A.key=="Unidentified",q=!j&&A.key||(A.shiftKey?aj:Yj)[A.keyCode]||A.key||"Unidentified";if(q=="Esc")q="Escape";if(q=="Del")q="Delete";if(q=="Left")q="ArrowLeft";if(q=="Up")q="ArrowUp";if(q=="Right")q="ArrowRight";if(q=="Down")q="ArrowDown";return q}function f(){var A=arguments[0];if(typeof A=="string")A=document.createElement(A);var j=1,q=arguments[1];if(q&&typeof q=="object"&&q.nodeType==null&&!Array.isArray(q)){for(var $ in q)if(Object.prototype.hasOwnProperty.call(q,$)){var B=q[$];if(typeof B=="string")A.setAttribute($,B);else if(B!=null)A[$]=B}j++}for(;j<arguments.length;j++)WB(A,arguments[j]);return A}function WB(A,j){if(typeof j=="string")A.appendChild(document.createTextNode(j));else if(j==null);else if(j.nodeType!=null)A.appendChild(j);else if(Array.isArray(j))for(var q=0;q<j.length;q++)WB(A,j[q]);else throw new RangeError("Unsupported child node: "+j)}function y6(A){let j;if(A.nodeType==11)j=A.getSelection?A:A.ownerDocument;else j=A;return j.getSelection()}function A0(A,j){return j?A==j||A.contains(j.nodeType!=1?j.parentNode:j):!1}function R7(A,j){if(!j.anchorNode)return!1;try{return A0(A,j.anchorNode)}catch(q){return!1}}function b6(A){if(A.nodeType==3)return bj(A,0,A.nodeValue.length).getClientRects();else if(A.nodeType==1)return A.getClientRects();else return[]}function P6(A,j,q,$){return q?EB(A,j,q,$,-1)||EB(A,j,q,$,1):!1}function yj(A){for(var j=0;;j++)if(A=A.previousSibling,!A)return j}function S7(A){return A.nodeType==1&&/^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(A.nodeName)}function EB(A,j,q,$,B){for(;;){if(A==q&&j==$)return!0;if(j==(B<0?0:$j(A))){if(A.nodeName=="DIV")return!1;let G=A.parentNode;if(!G||G.nodeType!=1)return!1;j=yj(A)+(B<0?0:1),A=G}else if(A.nodeType==1){if(A=A.childNodes[j+(B<0?-1:0)],A.nodeType==1&&A.contentEditable=="false")return!1;j=B<0?$j(A):0}else return!1}}function $j(A){return A.nodeType==3?A.nodeValue.length:A.childNodes.length}function f7(A,j){let q=j?A.left:A.right;return{left:q,right:q,top:A.top,bottom:A.bottom}}function P4(A){let j=A.visualViewport;if(j)return{left:0,right:j.width,top:0,bottom:j.height};return{left:0,right:A.innerWidth,top:0,bottom:A.innerHeight}}function K8(A,j){let q=j.width/A.offsetWidth,$=j.height/A.offsetHeight;if(q>0.995&&q<1.005||!isFinite(q)||Math.abs(j.width-A.offsetWidth)<1)q=1;if($>0.995&&$<1.005||!isFinite($)||Math.abs(j.height-A.offsetHeight)<1)$=1;return{scaleX:q,scaleY:$}}function T4(A,j,q,$,B,G,K,J){let Z=A.ownerDocument,X=Z.defaultView||window;for(let U=A,Y=!1;U&&!Y;)if(U.nodeType==1){let Q,O=U==Z.body,F=1,z=1;if(O)Q=P4(X);else{if(/^(fixed|sticky)$/.test(getComputedStyle(U).position))Y=!0;if(U.scrollHeight<=U.clientHeight&&U.scrollWidth<=U.clientWidth){U=U.assignedSlot||U.parentNode;continue}let N=U.getBoundingClientRect();({scaleX:F,scaleY:z}=K8(U,N)),Q={left:N.left,right:N.left+U.clientWidth*F,top:N.top,bottom:N.top+U.clientHeight*z}}let I=0,W=0;if(B=="nearest"){if(j.top<Q.top){if(W=j.top-(Q.top+K),q>0&&j.bottom>Q.bottom+W)W=j.bottom-Q.bottom+K}else if(j.bottom>Q.bottom){if(W=j.bottom-Q.bottom+K,q<0&&j.top-W<Q.top)W=j.top-(Q.top+K)}}else{let N=j.bottom-j.top,_=Q.bottom-Q.top;W=(B=="center"&&N<=_?j.top+N/2-_/2:B=="start"||B=="center"&&q<0?j.top-K:j.bottom-_+K)-Q.top}if($=="nearest"){if(j.left<Q.left){if(I=j.left-(Q.left+G),q>0&&j.right>Q.right+I)I=j.right-Q.right+G}else if(j.right>Q.right){if(I=j.right-Q.right+G,q<0&&j.left<Q.left+I)I=j.left-(Q.left+G)}}else I=($=="center"?j.left+(j.right-j.left)/2-(Q.right-Q.left)/2:$=="start"==J?j.left-G:j.right-(Q.right-Q.left)+G)-Q.left;if(I||W)if(O)X.scrollBy(I,W);else{let N=0,_=0;if(W){let H=U.scrollTop;U.scrollTop+=W/z,_=(U.scrollTop-H)*z}if(I){let H=U.scrollLeft;U.scrollLeft+=I/F,N=(U.scrollLeft-H)*F}if(j={left:j.left-N,top:j.top-_,right:j.right-N,bottom:j.bottom-_},N&&Math.abs(N-I)<1)$="nearest";if(_&&Math.abs(_-W)<1)B="nearest"}if(O)break;if(j.top<Q.top||j.bottom>Q.bottom||j.left<Q.left||j.right>Q.right)j={left:Math.max(j.left,Q.left),right:Math.min(j.right,Q.right),top:Math.max(j.top,Q.top),bottom:Math.min(j.bottom,Q.bottom)};U=U.assignedSlot||U.parentNode}else if(U.nodeType==11)U=U.host;else break}function C4(A){let j=A.ownerDocument,q,$;for(let B=A.parentNode;B;)if(B==j.body||q&&$)break;else if(B.nodeType==1){if(!$&&B.scrollHeight>B.clientHeight)$=B;if(!q&&B.scrollWidth>B.clientWidth)q=B;B=B.assignedSlot||B.parentNode}else if(B.nodeType==11)B=B.host;else break;return{x:q,y:$}}class J8{constructor(){this.anchorNode=null,this.anchorOffset=0,this.focusNode=null,this.focusOffset=0}eq(A){return this.anchorNode==A.anchorNode&&this.anchorOffset==A.anchorOffset&&this.focusNode==A.focusNode&&this.focusOffset==A.focusOffset}setRange(A){let{anchorNode:j,focusNode:q}=A;this.set(j,Math.min(A.anchorOffset,j?$j(j):0),q,Math.min(A.focusOffset,q?$j(q):0))}set(A,j,q,$){this.anchorNode=A,this.anchorOffset=j,this.focusNode=q,this.focusOffset=$}}var rj=null;function Z8(A){if(A.setActive)return A.setActive();if(rj)return A.focus(rj);let j=[];for(let q=A;q;q=q.parentNode)if(j.push(q,q.scrollTop,q.scrollLeft),q==q.ownerDocument)break;if(A.focus(rj==null?{get preventScroll(){return rj={preventScroll:!0},!0}}:void 0),!rj){rj=!1;for(let q=0;q<j.length;){let $=j[q++],B=j[q++],G=j[q++];if($.scrollTop!=B)$.scrollTop=B;if($.scrollLeft!=G)$.scrollLeft=G}}}var HB;function bj(A,j,q=j){let $=HB||(HB=document.createRange());return $.setEnd(A,q),$.setStart(A,j),$}function ej(A,j,q,$){let B={key:j,code:j,keyCode:q,which:q,cancelable:!0};if($)({altKey:B.altKey,ctrlKey:B.ctrlKey,shiftKey:B.shiftKey,metaKey:B.metaKey}=$);let G=new KeyboardEvent("keydown",B);G.synthetic=!0,A.dispatchEvent(G);let K=new KeyboardEvent("keyup",B);return K.synthetic=!0,A.dispatchEvent(K),G.defaultPrevented||K.defaultPrevented}function y4(A){while(A){if(A&&(A.nodeType==9||A.nodeType==11&&A.host))return A;A=A.assignedSlot||A.parentNode}return null}function X8(A){while(A.attributes.length)A.removeAttributeNode(A.attributes[0])}function b4(A,j){let{focusNode:q,focusOffset:$}=j;if(!q||j.anchorNode!=q||j.anchorOffset!=$)return!1;$=Math.min($,$j(q));for(;;)if($){if(q.nodeType!=1)return!1;let B=q.childNodes[$-1];if(B.contentEditable=="false")$--;else q=B,$=$j(q)}else if(q==A)return!0;else $=yj(q),q=q.parentNode}function U8(A){return A.scrollTop>Math.max(1,A.scrollHeight-A.clientHeight-4)}function Y8(A,j){for(let q=A,$=j;;)if(q.nodeType==3&&$>0)return{node:q,offset:$};else if(q.nodeType==1&&$>0){if(q.contentEditable=="false")return null;q=q.childNodes[$-1],$=$j(q)}else if(q.parentNode&&!S7(q))$=yj(q),q=q.parentNode;else return null}function Q8(A,j){for(let q=A,$=j;;)if(q.nodeType==3&&$<q.nodeValue.length)return{node:q,offset:$};else if(q.nodeType==1&&$<q.childNodes.length){if(q.contentEditable=="false")return null;q=q.childNodes[$],$=0}else if(q.parentNode&&!S7(q))$=yj(q)+1,q=q.parentNode;else return null}class zA{constructor(A,j,q=!0){this.node=A,this.offset=j,this.precise=q}static before(A,j){return new zA(A.parentNode,yj(A),j)}static after(A,j){return new zA(A.parentNode,yj(A)+1,j)}}var V0=[];class i{constructor(){this.parent=null,this.dom=null,this.flags=2}get overrideDOMText(){return null}get posAtStart(){return this.parent?this.parent.posBefore(this):0}get posAtEnd(){return this.posAtStart+this.length}posBefore(A){let j=this.posAtStart;for(let q of this.children){if(q==A)return j;j+=q.length+q.breakAfter}throw new RangeError("Invalid child in posBefore")}posAfter(A){return this.posBefore(A)+A.length}sync(A,j){if(this.flags&2){let q=this.dom,$=null,B;for(let G of this.children){if(G.flags&7){if(!G.dom&&(B=$?$.nextSibling:q.firstChild)){let K=i.get(B);if(!K||!K.parent&&K.canReuseDOM(G))G.reuseDOM(B)}G.sync(A,j),G.flags&=-8}if(B=$?$.nextSibling:q.firstChild,j&&!j.written&&j.node==q&&B!=G.dom)j.written=!0;if(G.dom.parentNode==q)while(B&&B!=G.dom)B=_B(B);else q.insertBefore(G.dom,B);$=G.dom}if(B=$?$.nextSibling:q.firstChild,B&&j&&j.node==q)j.written=!0;while(B)B=_B(B)}else if(this.flags&1){for(let q of this.children)if(q.flags&7)q.sync(A,j),q.flags&=-8}}reuseDOM(A){}localPosFromDOM(A,j){let q;if(A==this.dom)q=this.dom.childNodes[j];else{let $=$j(A)==0?0:j==0?-1:1;for(;;){let B=A.parentNode;if(B==this.dom)break;if($==0&&B.firstChild!=B.lastChild)if(A==B.firstChild)$=-1;else $=1;A=B}if($<0)q=A;else q=A.nextSibling}if(q==this.dom.firstChild)return 0;while(q&&!i.get(q))q=q.nextSibling;if(!q)return this.length;for(let $=0,B=0;;$++){let G=this.children[$];if(G.dom==q)return B;B+=G.length+G.breakAfter}}domBoundsAround(A,j,q=0){let $=-1,B=-1,G=-1,K=-1;for(let J=0,Z=q,X=q;J<this.children.length;J++){let U=this.children[J],Y=Z+U.length;if(Z<A&&Y>j)return U.domBoundsAround(A,j,Z);if(Y>=A&&$==-1)$=J,B=Z;if(Z>j&&U.dom.parentNode==this.dom){G=J,K=X;break}X=Y,Z=Y+U.breakAfter}return{from:B,to:K<0?q+this.length:K,startDOM:($?this.children[$-1].dom.nextSibling:null)||this.dom.firstChild,endDOM:G<this.children.length&&G>=0?this.children[G].dom:null}}markDirty(A=!1){this.flags|=2,this.markParentsDirty(A)}markParentsDirty(A){for(let j=this.parent;j;j=j.parent){if(A)j.flags|=2;if(j.flags&1)return;j.flags|=1,A=!1}}setParent(A){if(this.parent!=A){if(this.parent=A,this.flags&7)this.markParentsDirty(!0)}}setDOM(A){if(this.dom==A)return;if(this.dom)this.dom.cmView=null;this.dom=A,A.cmView=this}get rootView(){for(let A=this;;){let j=A.parent;if(!j)return A;A=j}}replaceChildren(A,j,q=V0){this.markDirty();for(let $=A;$<j;$++){let B=this.children[$];if(B.parent==this&&q.indexOf(B)<0)B.destroy()}if(q.length<250)this.children.splice(A,j-A,...q);else this.children=[].concat(this.children.slice(0,A),q,this.children.slice(j));for(let $=0;$<q.length;$++)q[$].setParent(this)}ignoreMutation(A){return!1}ignoreEvent(A){return!1}childCursor(A=this.length){return new k0(this.children,A,this.children.length)}childPos(A,j=1){return this.childCursor().findPos(A,j)}toString(){let A=this.constructor.name.replace("View","");return A+(this.children.length?"("+this.children.join()+")":this.length?"["+(A=="Text"?this.text:this.length)+"]":"")+(this.breakAfter?"#":"")}static get(A){return A.cmView}get isEditable(){return!0}get isWidget(){return!1}get isHidden(){return!1}merge(A,j,q,$,B,G){return!1}become(A){return!1}canReuseDOM(A){return A.constructor==this.constructor&&!((this.flags|A.flags)&8)}getSide(){return 0}destroy(){for(let A of this.children)if(A.parent==this)A.destroy();this.parent=null}}i.prototype.breakAfter=0;function _B(A){let j=A.nextSibling;return A.parentNode.removeChild(A),j}class k0{constructor(A,j,q){this.children=A,this.pos=j,this.i=q,this.off=0}findPos(A,j=1){for(;;){if(A>this.pos||A==this.pos&&(j>0||this.i==0||this.children[this.i-1].breakAfter))return this.off=A-this.pos,this;let q=this.children[--this.i];this.pos-=q.length+q.breakAfter}}}function O8(A,j,q,$,B,G,K,J,Z){let{children:X}=A,U=X.length?X[j]:null,Y=G.length?G[G.length-1]:null,Q=Y?Y.breakAfter:K;if(j==$&&U&&!K&&!Q&&G.length<2&&U.merge(q,B,G.length?Y:null,q==0,J,Z))return;if($<X.length){let O=X[$];if(O&&(B<O.length||O.breakAfter&&(Y===null||Y===void 0?void 0:Y.breakAfter))){if(j==$)O=O.split(B),B=0;if(!Q&&Y&&O.merge(0,B,Y,!0,0,Z))G[G.length-1]=O;else{if(B||O.children.length&&!O.children[0].length)O.merge(0,B,null,!1,0,Z);G.push(O)}}else if(O===null||O===void 0?void 0:O.breakAfter)if(Y)Y.breakAfter=1;else K=1;$++}if(U){if(U.breakAfter=K,q>0){if(!K&&G.length&&U.merge(q,U.length,G[0],!1,J,0))U.breakAfter=G.shift().breakAfter;else if(q<U.length||U.children.length&&U.children[U.children.length-1].length==0)U.merge(q,U.length,null,!1,J,0);j++}}while(j<$&&G.length)if(X[$-1].become(G[G.length-1]))$--,G.pop(),Z=G.length?0:J;else if(X[j].become(G[0]))j++,G.shift(),J=G.length?0:Z;else break;if(!G.length&&j&&$<X.length&&!X[j-1].breakAfter&&X[$].merge(0,0,X[j-1],!1,J,Z))j--;if(j<$||G.length)A.replaceChildren(j,$,G)}function F8(A,j,q,$,B,G){let K=A.childCursor(),{i:J,off:Z}=K.findPos(q,1),{i:X,off:U}=K.findPos(j,-1),Y=j-q;for(let Q of $)Y+=Q.length;A.length+=Y,O8(A,X,U,J,Z,$,0,B,G)}var _A=typeof navigator!="undefined"?navigator:{userAgent:"",vendor:"",platform:""},j0=typeof document!="undefined"?document:{documentElement:{style:{}}},q0=/Edge\/(\d+)/.exec(_A.userAgent),z8=/MSIE \d/.test(_A.userAgent),$0=/Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(_A.userAgent),p7=!!(z8||$0||q0),NB=!p7&&/gecko\/(\d+)/i.test(_A.userAgent),iq=!p7&&/Chrome\/(\d+)/.exec(_A.userAgent),DB="webkitFontSmoothing"in j0.documentElement.style,I8=!p7&&/Apple Computer/.test(_A.vendor),MB=I8&&(/Mobile\/\w+/.test(_A.userAgent)||_A.maxTouchPoints>2),L={mac:MB||/Mac/.test(_A.platform),windows:/Win/.test(_A.platform),linux:/Linux|X11/.test(_A.platform),ie:p7,ie_version:z8?j0.documentMode||6:$0?+$0[1]:q0?+q0[1]:0,gecko:NB,gecko_version:NB?+(/Firefox\/(\d+)/.exec(_A.userAgent)||[0,0])[1]:0,chrome:!!iq,chrome_version:iq?+iq[1]:0,ios:MB,android:/Android\b/.test(_A.userAgent),webkit:DB,safari:I8,webkit_version:DB?+(/\bAppleWebKit\/(\d+)/.exec(_A.userAgent)||[0,0])[1]:0,tabSize:j0.documentElement.style.tabSize!=null?"tab-size":"-moz-tab-size"},x4=256;class cA extends i{constructor(A){super();this.text=A}get length(){return this.text.length}createDOM(A){this.setDOM(A||document.createTextNode(this.text))}sync(A,j){if(!this.dom)this.createDOM();if(this.dom.nodeValue!=this.text){if(j&&j.node==this.dom)j.written=!0;this.dom.nodeValue=this.text}}reuseDOM(A){if(A.nodeType==3)this.createDOM(A)}merge(A,j,q){if(this.flags&8||q&&(!(q instanceof cA)||this.length-(j-A)+q.length>x4||q.flags&8))return!1;return this.text=this.text.slice(0,A)+(q?q.text:"")+this.text.slice(j),this.markDirty(),!0}split(A){let j=new cA(this.text.slice(A));return this.text=this.text.slice(0,A),this.markDirty(),j.flags|=this.flags&8,j}localPosFromDOM(A,j){return A==this.dom?j:j?this.text.length:0}domAtPos(A){return new zA(this.dom,A)}domBoundsAround(A,j,q){return{from:q,to:q+this.length,startDOM:this.dom,endDOM:this.dom.nextSibling}}coordsAt(A,j){return S4(this.dom,A,j)}}class zj extends i{constructor(A,j=[],q=0){super();this.mark=A,this.children=j,this.length=q;for(let $ of j)$.setParent(this)}setAttrs(A){if(X8(A),this.mark.class)A.className=this.mark.class;if(this.mark.attrs)for(let j in this.mark.attrs)A.setAttribute(j,this.mark.attrs[j]);return A}canReuseDOM(A){return super.canReuseDOM(A)&&!((this.flags|A.flags)&8)}reuseDOM(A){if(A.nodeName==this.mark.tagName.toUpperCase())this.setDOM(A),this.flags|=6}sync(A,j){if(!this.dom)this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));else if(this.flags&4)this.setAttrs(this.dom);super.sync(A,j)}merge(A,j,q,$,B,G){if(q&&(!(q instanceof zj&&q.mark.eq(this.mark))||A&&B<=0||j<this.length&&G<=0))return!1;return F8(this,A,j,q?q.children.slice():[],B-1,G-1),this.markDirty(),!0}split(A){let j=[],q=0,$=-1,B=0;for(let K of this.children){let J=q+K.length;if(J>A)j.push(q<A?K.split(A-q):K);if($<0&&q>=A)$=B;q=J,B++}let G=this.length-A;if(this.length=A,$>-1)this.children.length=$,this.markDirty();return new zj(this.mark,j,G)}domAtPos(A){return W8(this,A)}coordsAt(A,j){return H8(this,A,j)}}function S4(A,j,q){let $=A.nodeValue.length;if(j>$)j=$;let B=j,G=j,K=0;if(j==0&&q<0||j==$&&q>=0){if(!(L.chrome||L.gecko)){if(j)B--,K=1;else if(G<$)G++,K=-1}}else if(q<0)B--;else if(G<$)G++;let J=bj(A,B,G).getClientRects();if(!J.length)return null;let Z=J[(K?K<0:q>=0)?0:J.length-1];if(L.safari&&!K&&Z.width==0)Z=Array.prototype.find.call(J,(X)=>X.width)||Z;return K?f7(Z,K<0):Z||null}class Ej extends i{static create(A,j,q){return new Ej(A,j,q)}constructor(A,j,q){super();this.widget=A,this.length=j,this.side=q,this.prevWidget=null}split(A){let j=Ej.create(this.widget,this.length-A,this.side);return this.length-=A,j}sync(A){if(!this.dom||!this.widget.updateDOM(this.dom,A)){if(this.dom&&this.prevWidget)this.prevWidget.destroy(this.dom);if(this.prevWidget=null,this.setDOM(this.widget.toDOM(A)),!this.widget.editable)this.dom.contentEditable="false"}}getSide(){return this.side}merge(A,j,q,$,B,G){if(q&&(!(q instanceof Ej)||!this.widget.compare(q.widget)||A>0&&B<=0||j<this.length&&G<=0))return!1;return this.length=A+(q?q.length:0)+(this.length-j),!0}become(A){if(A instanceof Ej&&A.side==this.side&&this.widget.constructor==A.widget.constructor){if(!this.widget.compare(A.widget))this.markDirty(!0);if(this.dom&&!this.prevWidget)this.prevWidget=this.widget;return this.widget=A.widget,this.length=A.length,!0}return!1}ignoreMutation(){return!0}ignoreEvent(A){return this.widget.ignoreEvent(A)}get overrideDOMText(){if(this.length==0)return m.empty;let A=this;while(A.parent)A=A.parent;let{view:j}=A,q=j&&j.state.doc,$=this.posAtStart;return q?q.slice($,$+this.length):m.empty}domAtPos(A){return(this.length?A==0:this.side>0)?zA.before(this.dom):zA.after(this.dom,A==this.length)}domBoundsAround(){return null}coordsAt(A,j){let q=this.widget.coordsAt(this.dom,A,j);if(q)return q;let $=this.dom.getClientRects(),B=null;if(!$.length)return null;let G=this.side?this.side<0:A>0;for(let K=G?$.length-1:0;;K+=G?-1:1)if(B=$[K],A>0?K==0:K==$.length-1||B.top<B.bottom)break;return f7(B,!G)}get isEditable(){return!1}get isWidget(){return!0}get isHidden(){return this.widget.isHidden}destroy(){if(super.destroy(),this.dom)this.widget.destroy(this.dom)}}class j6 extends i{constructor(A){super();this.side=A}get length(){return 0}merge(){return!1}become(A){return A instanceof j6&&A.side==this.side}split(){return new j6(this.side)}sync(){if(!this.dom){let A=document.createElement("img");A.className="cm-widgetBuffer",A.setAttribute("aria-hidden","true"),this.setDOM(A)}}getSide(){return this.side}domAtPos(A){return this.side>0?zA.before(this.dom):zA.after(this.dom)}localPosFromDOM(){return 0}domBoundsAround(){return null}coordsAt(A){return this.dom.getBoundingClientRect()}get overrideDOMText(){return m.empty}get isHidden(){return!0}}cA.prototype.children=Ej.prototype.children=j6.prototype.children=V0;function W8(A,j){let q=A.dom,{children:$}=A,B=0;for(let G=0;B<$.length;B++){let K=$[B],J=G+K.length;if(J==G&&K.getSide()<=0)continue;if(j>G&&j<J&&K.dom.parentNode==q)return K.domAtPos(j-G);if(j<=G)break;G=J}for(let G=B;G>0;G--){let K=$[G-1];if(K.dom.parentNode==q)return K.domAtPos(K.length)}for(let G=B;G<$.length;G++){let K=$[G];if(K.dom.parentNode==q)return K.domAtPos(0)}return new zA(q,0)}function E8(A,j,q){let $,{children:B}=A;if(q>0&&j instanceof zj&&B.length&&($=B[B.length-1])instanceof zj&&$.mark.eq(j.mark))E8($,j.children[0],q-1);else B.push(j),j.setParent(A);A.length+=j.length}function H8(A,j,q){let $=null,B=-1,G=null,K=-1;function J(X,U){for(let Y=0,Q=0;Y<X.children.length&&Q<=U;Y++){let O=X.children[Y],F=Q+O.length;if(F>=U){if(O.children.length)J(O,U-Q);else if((!G||G.isHidden&&(q>0||h4(G,O)))&&(F>U||Q==F&&O.getSide()>0))G=O,K=U-Q;else if(Q<U||Q==F&&O.getSide()<0&&!O.isHidden)$=O,B=U-Q}Q=F}}J(A,j);let Z=(q<0?$:G)||$||G;if(Z)return Z.coordsAt(Math.max(0,Z==$?B:K),q);return w4(A)}function w4(A){let j=A.dom.lastChild;if(!j)return A.dom.getBoundingClientRect();let q=b6(j);return q[q.length-1]||null}function h4(A,j){let q=A.coordsAt(0,1),$=j.coordsAt(0,1);return q&&$&&$.top<q.bottom}function B0(A,j){for(let q in A)if(q=="class"&&j.class)j.class+=" "+A.class;else if(q=="style"&&j.style)j.style+=";"+A.style;else j[q]=A[q];return j}var RB=Object.create(null);function w7(A,j,q){if(A==j)return!0;if(!A)A=RB;if(!j)j=RB;let $=Object.keys(A),B=Object.keys(j);if($.length-(q&&$.indexOf(q)>-1?1:0)!=B.length-(q&&B.indexOf(q)>-1?1:0))return!1;for(let G of $)if(G!=q&&(B.indexOf(G)==-1||A[G]!==j[G]))return!1;return!0}function G0(A,j,q){let $=!1;if(j){for(let B in j)if(!(q&&(B in q)))if($=!0,B=="style")A.style.cssText="";else A.removeAttribute(B)}if(q){for(let B in q)if(!(j&&j[B]==q[B]))if($=!0,B=="style")A.style.cssText=q[B];else A.setAttribute(B,q[B])}return $}function v4(A){let j=Object.create(null);for(let q=0;q<A.attributes.length;q++){let $=A.attributes[q];j[$.name]=$.value}return j}class hA{eq(A){return!1}updateDOM(A,j){return!1}compare(A){return this==A||this.constructor==A.constructor&&this.eq(A)}get estimatedHeight(){return-1}get lineBreaks(){return 0}ignoreEvent(A){return!0}coordsAt(A,j,q){return null}get isHidden(){return!1}get editable(){return!1}destroy(A){}}var EA=function(A){return A[A.Text=0]="Text",A[A.WidgetBefore=1]="WidgetBefore",A[A.WidgetAfter=2]="WidgetAfter",A[A.WidgetRange=3]="WidgetRange",A}(EA||(EA={}));class C extends Aj{constructor(A,j,q,$){super();this.startSide=A,this.endSide=j,this.widget=q,this.spec=$}get heightRelevant(){return!1}static mark(A){return new w6(A)}static widget(A){let j=Math.max(-1e4,Math.min(1e4,A.side||0)),q=!!A.block;return j+=q&&!A.inlineOrder?j>0?300000000:-400000000:j>0?1e8:-1e8,new Hj(A,j,j,q,A.widget||null,!1)}static replace(A){let j=!!A.block,q,$;if(A.isBlockGap)q=-500000000,$=400000000;else{let{start:B,end:G}=_8(A,j);q=(B?j?-300000000:-1:500000000)-1,$=(G?j?200000000:1:-600000000)+1}return new Hj(A,q,$,j,A.widget||null,!0)}static line(A){return new h6(A)}static set(A,j=!1){return h.of(A,j)}hasHeight(){return this.widget?this.widget.estimatedHeight>-1:!1}}C.none=h.empty;class w6 extends C{constructor(A){let{start:j,end:q}=_8(A);super(j?-1:500000000,q?1:-600000000,null,A);this.tagName=A.tagName||"span",this.class=A.class||"",this.attrs=A.attributes||null}eq(A){var j,q;return this==A||A instanceof w6&&this.tagName==A.tagName&&(this.class||((j=this.attrs)===null||j===void 0?void 0:j.class))==(A.class||((q=A.attrs)===null||q===void 0?void 0:q.class))&&w7(this.attrs,A.attrs,"class")}range(A,j=A){if(A>=j)throw new RangeError("Mark decorations may not be empty");return super.range(A,j)}}w6.prototype.point=!1;class h6 extends C{constructor(A){super(-200000000,-200000000,null,A)}eq(A){return A instanceof h6&&this.spec.class==A.spec.class&&w7(this.spec.attributes,A.spec.attributes)}range(A,j=A){if(j!=A)throw new RangeError("Line decoration ranges must be zero-length");return super.range(A,j)}}h6.prototype.mapMode=ZA.TrackBefore;h6.prototype.point=!0;class Hj extends C{constructor(A,j,q,$,B,G){super(j,q,B,A);this.block=$,this.isReplace=G,this.mapMode=!$?ZA.TrackDel:j<=0?ZA.TrackBefore:ZA.TrackAfter}get type(){return this.startSide!=this.endSide?EA.WidgetRange:this.startSide<=0?EA.WidgetBefore:EA.WidgetAfter}get heightRelevant(){return this.block||!!this.widget&&(this.widget.estimatedHeight>=5||this.widget.lineBreaks>0)}eq(A){return A instanceof Hj&&m4(this.widget,A.widget)&&this.block==A.block&&this.startSide==A.startSide&&this.endSide==A.endSide}range(A,j=A){if(this.isReplace&&(A>j||A==j&&this.startSide>0&&this.endSide<=0))throw new RangeError("Invalid range for replacement decoration");if(!this.isReplace&&j!=A)throw new RangeError("Widget decorations can only have zero-length ranges");return super.range(A,j)}}Hj.prototype.point=!0;function _8(A,j=!1){let{inclusiveStart:q,inclusiveEnd:$}=A;if(q==null)q=A.inclusive;if($==null)$=A.inclusive;return{start:q!==null&&q!==void 0?q:j,end:$!==null&&$!==void 0?$:j}}function m4(A,j){return A==j||!!(A&&j&&A.compare(j))}function V7(A,j,q,$=0){let B=q.length-1;if(B>=0&&q[B]+$>=A)q[B]=Math.max(q[B],j);else q.push(A,j)}class $A extends i{constructor(){super(...arguments);this.children=[],this.length=0,this.prevAttrs=void 0,this.attrs=null,this.breakAfter=0}merge(A,j,q,$,B,G){if(q){if(!(q instanceof $A))return!1;if(!this.dom)q.transferDOM(this)}if($)this.setDeco(q?q.attrs:null);return F8(this,A,j,q?q.children.slice():[],B,G),!0}split(A){let j=new $A;if(j.breakAfter=this.breakAfter,this.length==0)return j;let{i:q,off:$}=this.childPos(A);if($)j.append(this.children[q].split($),0),this.children[q].merge($,this.children[q].length,null,!1,0,0),q++;for(let B=q;B<this.children.length;B++)j.append(this.children[B],0);while(q>0&&this.children[q-1].length==0)this.children[--q].destroy();return this.children.length=q,this.markDirty(),this.length=A,j}transferDOM(A){if(!this.dom)return;this.markDirty(),A.setDOM(this.dom),A.prevAttrs=this.prevAttrs===void 0?this.attrs:this.prevAttrs,this.prevAttrs=void 0,this.dom=null}setDeco(A){if(!w7(this.attrs,A)){if(this.dom)this.prevAttrs=this.attrs,this.markDirty();this.attrs=A}}append(A,j){E8(this,A,j)}addLineDeco(A){let j=A.spec.attributes,q=A.spec.class;if(j)this.attrs=B0(j,this.attrs||{});if(q)this.attrs=B0({class:q},this.attrs||{})}domAtPos(A){return W8(this,A)}reuseDOM(A){if(A.nodeName=="DIV")this.setDOM(A),this.flags|=6}sync(A,j){var q;if(!this.dom)this.setDOM(document.createElement("div")),this.dom.className="cm-line",this.prevAttrs=this.attrs?null:void 0;else if(this.flags&4)X8(this.dom),this.dom.className="cm-line",this.prevAttrs=this.attrs?null:void 0;if(this.prevAttrs!==void 0)G0(this.dom,this.prevAttrs,this.attrs),this.dom.classList.add("cm-line"),this.prevAttrs=void 0;super.sync(A,j);let $=this.dom.lastChild;while($&&i.get($)instanceof zj)$=$.lastChild;if(!$||!this.length||$.nodeName!="BR"&&((q=i.get($))===null||q===void 0?void 0:q.isEditable)==!1&&(!L.ios||!this.children.some((B)=>B instanceof cA))){let B=document.createElement("BR");B.cmIgnore=!0,this.dom.appendChild(B)}}measureTextSize(){if(this.children.length==0||this.length>20)return null;let A=0,j;for(let q of this.children){if(!(q instanceof cA)||/[^ -~]/.test(q.text))return null;let $=b6(q.dom);if($.length!=1)return null;A+=$[0].width,j=$[0].height}return!A?null:{lineHeight:this.dom.getBoundingClientRect().height,charWidth:A/this.length,textHeight:j}}coordsAt(A,j){let q=H8(this,A,j);if(!this.children.length&&q&&this.parent){let{heightOracle:$}=this.parent.view.viewState,B=q.bottom-q.top;if(Math.abs(B-$.lineHeight)<2&&$.textHeight<B){let G=(B-$.textHeight)/2;return{top:q.top+G,bottom:q.bottom-G,left:q.left,right:q.left}}}return q}become(A){return A instanceof $A&&this.children.length==0&&A.children.length==0&&w7(this.attrs,A.attrs)&&this.breakAfter==A.breakAfter}covers(){return!0}static find(A,j){for(let q=0,$=0;q<A.children.length;q++){let B=A.children[q],G=$+B.length;if(G>=j){if(B instanceof $A)return B;if(G>j)break}$=G+B.breakAfter}return null}}class Fj extends i{constructor(A,j,q){super();this.widget=A,this.length=j,this.deco=q,this.breakAfter=0,this.prevWidget=null}merge(A,j,q,$,B,G){if(q&&(!(q instanceof Fj)||!this.widget.compare(q.widget)||A>0&&B<=0||j<this.length&&G<=0))return!1;return this.length=A+(q?q.length:0)+(this.length-j),!0}domAtPos(A){return A==0?zA.before(this.dom):zA.after(this.dom,A==this.length)}split(A){let j=this.length-A;this.length=A;let q=new Fj(this.widget,j,this.deco);return q.breakAfter=this.breakAfter,q}get children(){return V0}sync(A){if(!this.dom||!this.widget.updateDOM(this.dom,A)){if(this.dom&&this.prevWidget)this.prevWidget.destroy(this.dom);if(this.prevWidget=null,this.setDOM(this.widget.toDOM(A)),!this.widget.editable)this.dom.contentEditable="false"}}get overrideDOMText(){return this.parent?this.parent.view.state.doc.slice(this.posAtStart,this.posAtEnd):m.empty}domBoundsAround(){return null}become(A){if(A instanceof Fj&&A.widget.constructor==this.widget.constructor){if(!A.widget.compare(this.widget))this.markDirty(!0);if(this.dom&&!this.prevWidget)this.prevWidget=this.widget;return this.widget=A.widget,this.length=A.length,this.deco=A.deco,this.breakAfter=A.breakAfter,!0}return!1}ignoreMutation(){return!0}ignoreEvent(A){return this.widget.ignoreEvent(A)}get isEditable(){return!1}get isWidget(){return!0}coordsAt(A,j){let q=this.widget.coordsAt(this.dom,A,j);if(q)return q;if(this.widget instanceof h7)return null;return f7(this.dom.getBoundingClientRect(),this.length?A==0:j<=0)}destroy(){if(super.destroy(),this.dom)this.widget.destroy(this.dom)}covers(A){let{startSide:j,endSide:q}=this.deco;return j==q?!1:A<0?j<0:q>0}}class h7 extends hA{constructor(A){super();this.height=A}toDOM(){let A=document.createElement("div");return A.className="cm-gap",this.updateDOM(A),A}eq(A){return A.height==this.height}updateDOM(A){return A.style.height=this.height+"px",!0}get editable(){return!0}get estimatedHeight(){return this.height}ignoreEvent(){return!1}}class T6{constructor(A,j,q,$){this.doc=A,this.pos=j,this.end=q,this.disallowBlockEffectsFor=$,this.content=[],this.curLine=null,this.breakAtStart=0,this.pendingBuffer=0,this.bufferMarks=[],this.atCursorPos=!0,this.openStart=-1,this.openEnd=-1,this.text="",this.textOff=0,this.cursor=A.iter(),this.skip=j}posCovered(){if(this.content.length==0)return!this.breakAtStart&&this.doc.lineAt(this.pos).from!=this.pos;let A=this.content[this.content.length-1];return!(A.breakAfter||A instanceof Fj&&A.deco.endSide<0)}getLine(){if(!this.curLine)this.content.push(this.curLine=new $A),this.atCursorPos=!0;return this.curLine}flushBuffer(A=this.bufferMarks){if(this.pendingBuffer)this.curLine.append(z7(new j6(-1),A),A.length),this.pendingBuffer=0}addBlockWidget(A){this.flushBuffer(),this.curLine=null,this.content.push(A)}finish(A){if(this.pendingBuffer&&A<=this.bufferMarks.length)this.flushBuffer();else this.pendingBuffer=0;if(!this.posCovered()&&!(A&&this.content.length&&this.content[this.content.length-1]instanceof Fj))this.getLine()}buildText(A,j,q){while(A>0){if(this.textOff==this.text.length){let{value:B,lineBreak:G,done:K}=this.cursor.next(this.skip);if(this.skip=0,K)throw new Error("Ran out of text content when drawing inline views");if(G){if(!this.posCovered())this.getLine();if(this.content.length)this.content[this.content.length-1].breakAfter=1;else this.breakAtStart=1;this.flushBuffer(),this.curLine=null,this.atCursorPos=!0,A--;continue}else this.text=B,this.textOff=0}let $=Math.min(this.text.length-this.textOff,A,512);this.flushBuffer(j.slice(j.length-q)),this.getLine().append(z7(new cA(this.text.slice(this.textOff,this.textOff+$)),j),q),this.atCursorPos=!0,this.textOff+=$,A-=$,q=0}}span(A,j,q,$){if(this.buildText(j-A,q,$),this.pos=j,this.openStart<0)this.openStart=$}point(A,j,q,$,B,G){if(this.disallowBlockEffectsFor[G]&&q instanceof Hj){if(q.block)throw new RangeError("Block decorations may not be specified via plugins");if(j>this.doc.lineAt(this.pos).to)throw new RangeError("Decorations that replace line breaks may not be specified via plugins")}let K=j-A;if(q instanceof Hj)if(q.block){if(q.startSide>0&&!this.posCovered())this.getLine();this.addBlockWidget(new Fj(q.widget||xj.block,K,q))}else{let J=Ej.create(q.widget||xj.inline,K,K?0:q.startSide),Z=this.atCursorPos&&!J.isEditable&&B<=$.length&&(A<j||q.startSide>0),X=!J.isEditable&&(A<j||B>$.length||q.startSide<=0),U=this.getLine();if(this.pendingBuffer==2&&!Z&&!J.isEditable)this.pendingBuffer=0;if(this.flushBuffer($),Z)U.append(z7(new j6(1),$),B),B=$.length+Math.max(0,B-$.length);if(U.append(z7(J,$),B),this.atCursorPos=X,this.pendingBuffer=!X?0:A<j||B>$.length?1:2,this.pendingBuffer)this.bufferMarks=$.slice()}else if(this.doc.lineAt(this.pos).from==this.pos)this.getLine().addLineDeco(q);if(K){if(this.textOff+K<=this.text.length)this.textOff+=K;else this.skip+=K-(this.text.length-this.textOff),this.text="",this.textOff=0;this.pos=j}if(this.openStart<0)this.openStart=B}static build(A,j,q,$,B){let G=new T6(A,j,q,B);if(G.openEnd=h.spans($,j,q,G),G.openStart<0)G.openStart=G.openEnd;return G.finish(G.openEnd),G}}function z7(A,j){for(let q of j)A=new zj(q,[A],A.length);return A}class xj extends hA{constructor(A){super();this.tag=A}eq(A){return A.tag==this.tag}toDOM(){return document.createElement(this.tag)}updateDOM(A){return A.nodeName.toLowerCase()==this.tag}get isHidden(){return!0}}xj.inline=new xj("span");xj.block=new xj("div");var d=function(A){return A[A.LTR=0]="LTR",A[A.RTL=1]="RTL",A}(d||(d={})),Sj=d.LTR,L0=d.RTL;function N8(A){let j=[];for(let q=0;q<A.length;q++)j.push(1<<+A[q]);return j}var u4=N8("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008"),g4=N8("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333"),K0=Object.create(null),jj=[];for(let A of["()","[]","{}"]){let j=A.charCodeAt(0),q=A.charCodeAt(1);K0[j]=q,K0[q]=-j}function D8(A){return A<=247?u4[A]:1424<=A&&A<=1524?2:1536<=A&&A<=1785?g4[A-1536]:1774<=A&&A<=2220?4:8192<=A&&A<=8204?256:64336<=A&&A<=65023?4:1}var f4=/[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;class Oj{get dir(){return this.level%2?L0:Sj}constructor(A,j,q){this.from=A,this.to=j,this.level=q}side(A,j){return this.dir==j==A?this.to:this.from}forward(A,j){return A==(this.dir==j)}static find(A,j,q,$){let B=-1;for(let G=0;G<A.length;G++){let K=A[G];if(K.from<=j&&K.to>=j){if(K.level==q)return G;if(B<0||($!=0?$<0?K.from<j:K.to>j:A[B].level>K.level))B=G}}if(B<0)throw new RangeError("Index out of range");return B}}function M8(A,j){if(A.length!=j.length)return!1;for(let q=0;q<A.length;q++){let $=A[q],B=j[q];if($.from!=B.from||$.to!=B.to||$.direction!=B.direction||!M8($.inner,B.inner))return!1}return!0}var s=[];function p4(A,j,q,$,B){for(let G=0;G<=$.length;G++){let K=G?$[G-1].to:j,J=G<$.length?$[G].from:q,Z=G?256:B;for(let X=K,U=Z,Y=Z;X<J;X++){let Q=D8(A.charCodeAt(X));if(Q==512)Q=U;else if(Q==8&&Y==4)Q=16;if(s[X]=Q==4?2:Q,Q&7)Y=Q;U=Q}for(let X=K,U=Z,Y=Z;X<J;X++){let Q=s[X];if(Q==128)if(X<J-1&&U==s[X+1]&&U&24)Q=s[X]=U;else s[X]=256;else if(Q==64){let O=X+1;while(O<J&&s[O]==64)O++;let F=X&&U==8||O<q&&s[O]==8?Y==1?1:8:256;for(let z=X;z<O;z++)s[z]=F;X=O-1}else if(Q==8&&Y==1)s[X]=1;if(U=Q,Q&7)Y=Q}}}function l4(A,j,q,$,B){let G=B==1?2:1;for(let K=0,J=0,Z=0;K<=$.length;K++){let X=K?$[K-1].to:j,U=K<$.length?$[K].from:q;for(let Y=X,Q,O,F;Y<U;Y++)if(O=K0[Q=A.charCodeAt(Y)])if(O<0){for(let z=J-3;z>=0;z-=3)if(jj[z+1]==-O){let I=jj[z+2],W=I&2?B:!(I&4)?0:I&1?G:B;if(W)s[Y]=s[jj[z]]=W;J=z;break}}else if(jj.length==189)break;else jj[J++]=Y,jj[J++]=Q,jj[J++]=Z;else if((F=s[Y])==2||F==1){let z=F==B;Z=z?0:1;for(let I=J-3;I>=0;I-=3){let W=jj[I+2];if(W&2)break;if(z)jj[I+2]|=2;else{if(W&4)break;jj[I+2]|=4}}}}}function d4(A,j,q,$){for(let B=0,G=$;B<=q.length;B++){let K=B?q[B-1].to:A,J=B<q.length?q[B].from:j;for(let Z=K;Z<J;){let X=s[Z];if(X==256){let U=Z+1;for(;;)if(U==J){if(B==q.length)break;U=q[B++].to,J=B<q.length?q[B].from:j}else if(s[U]==256)U++;else break;let Y=G==1,Q=(U<j?s[U]:$)==1,O=Y==Q?Y?1:2:$;for(let F=U,z=B,I=z?q[z-1].to:A;F>Z;){if(F==I)F=q[--z].from,I=z?q[z-1].to:A;s[--F]=O}Z=U}else G=X,Z++}}}function J0(A,j,q,$,B,G,K){let J=$%2?2:1;if($%2==B%2)for(let Z=j,X=0;Z<q;){let U=!0,Y=!1;if(X==G.length||Z<G[X].from){let z=s[Z];if(z!=J)U=!1,Y=z==16}let Q=!U&&J==1?[]:null,O=U?$:$+1,F=Z;A:for(;;)if(X<G.length&&F==G[X].from){if(Y)break A;let z=G[X];if(!U)for(let I=z.to,W=X+1;;){if(I==q)break A;if(W<G.length&&G[W].from==I)I=G[W++].to;else if(s[I]==J)break A;else break}if(X++,Q)Q.push(z);else{if(z.from>Z)K.push(new Oj(Z,z.from,O));let I=z.direction==Sj!=!(O%2);Z0(A,I?$+1:$,B,z.inner,z.from,z.to,K),Z=z.to}F=z.to}else if(F==q||(U?s[F]!=J:s[F]==J))break;else F++;if(Q)J0(A,Z,F,$+1,B,Q,K);else if(Z<F)K.push(new Oj(Z,F,O));Z=F}else for(let Z=q,X=G.length;Z>j;){let U=!0,Y=!1;if(!X||Z>G[X-1].to){let z=s[Z-1];if(z!=J)U=!1,Y=z==16}let Q=!U&&J==1?[]:null,O=U?$:$+1,F=Z;A:for(;;)if(X&&F==G[X-1].to){if(Y)break A;let z=G[--X];if(!U)for(let I=z.from,W=X;;){if(I==j)break A;if(W&&G[W-1].to==I)I=G[--W].from;else if(s[I-1]==J)break A;else break}if(Q)Q.push(z);else{if(z.to<Z)K.push(new Oj(z.to,Z,O));let I=z.direction==Sj!=!(O%2);Z0(A,I?$+1:$,B,z.inner,z.from,z.to,K),Z=z.from}F=z.from}else if(F==j||(U?s[F-1]!=J:s[F-1]==J))break;else F--;if(Q)J0(A,F,Z,$+1,B,Q,K);else if(F<Z)K.push(new Oj(F,Z,O));Z=F}}function Z0(A,j,q,$,B,G,K){let J=j%2?2:1;p4(A,B,G,$,J),l4(A,B,G,$,J),d4(B,G,$,J),J0(A,B,G,j,q,$,K)}function c4(A,j,q){if(!A)return[new Oj(0,0,j==L0?1:0)];if(j==Sj&&!q.length&&!f4.test(A))return R8(A.length);if(q.length)while(A.length>s.length)s[s.length]=256;let $=[],B=j==Sj?0:1;return Z0(A,B,B,q,0,A.length,$),$}function R8(A){return[new Oj(0,A,0)]}var V8="";function s4(A,j,q,$,B){var G;let K=$.head-A.from,J=Oj.find(j,K,(G=$.bidiLevel)!==null&&G!==void 0?G:-1,$.assoc),Z=j[J],X=Z.side(B,q);if(K==X){let Q=J+=B?1:-1;if(Q<0||Q>=j.length)return null;Z=j[J=Q],K=Z.side(!B,q),X=Z.side(B,q)}let U=qA(A.text,K,Z.forward(B,q));if(U<Z.from||U>Z.to)U=X;V8=A.text.slice(Math.min(K,U),Math.max(K,U));let Y=J==(B?j.length-1:0)?null:j[J+(B?1:-1)];if(Y&&U==X&&Y.level+(B?0:1)<Z.level)return E.cursor(Y.side(!B,q)+A.from,Y.forward(B,q)?1:-1,Y.level);return E.cursor(U+A.from,Z.forward(B,q)?-1:1,Z.level)}function i4(A,j,q){for(let $=j;$<q;$++){let B=D8(A.charCodeAt($));if(B==1)return Sj;if(B==2||B==4)return L0}return Sj}var k8=k.define(),L8=k.define(),P8=k.define(),T8=k.define(),X0=k.define(),C8=k.define(),y8=k.define(),P0=k.define(),T0=k.define(),b8=k.define({combine:(A)=>A.some((j)=>j)}),x8=k.define({combine:(A)=>A.some((j)=>j)}),S8=k.define();class A6{constructor(A,j="nearest",q="nearest",$=5,B=5,G=!1){this.range=A,this.y=j,this.x=q,this.yMargin=$,this.xMargin=B,this.isSnapshot=G}map(A){return A.empty?this:new A6(this.range.map(A),this.y,this.x,this.yMargin,this.xMargin,this.isSnapshot)}clip(A){return this.range.to<=A.doc.length?this:new A6(E.cursor(A.doc.length),this.y,this.x,this.yMargin,this.xMargin,this.isSnapshot)}}var I7=b.define({map:(A,j)=>A.map(j)}),w8=b.define();function YA(A,j,q){let $=A.facet(T8);if($.length)$[0](j);else if(window.onerror&&window.onerror(String(j),q,void 0,void 0,j));else if(q)console.error(q+":",j);else console.error(j)}var Qj=k.define({combine:(A)=>A.length?A[0]:!0}),n4=0,oj=k.define({combine(A){return A.filter((j,q)=>{for(let $=0;$<q;$++)if(A[$].plugin==j.plugin)return!1;return!0})}});class r{constructor(A,j,q,$,B){this.id=A,this.create=j,this.domEventHandlers=q,this.domEventObservers=$,this.baseExtensions=B(this),this.extension=this.baseExtensions.concat(oj.of({plugin:this,arg:void 0}))}of(A){return this.baseExtensions.concat(oj.of({plugin:this,arg:A}))}static define(A,j){let{eventHandlers:q,eventObservers:$,provide:B,decorations:G}=j||{};return new r(n4++,A,q,$,(K)=>{let J=[];if(G)J.push(x6.of((Z)=>{let X=Z.plugin(K);return X?G(X):C.none}));if(B)J.push(B(K));return J})}static fromClass(A,j){return r.define((q,$)=>new A(q,$),j)}}class k7{constructor(A){this.spec=A,this.mustUpdate=null,this.value=null}get plugin(){return this.spec&&this.spec.plugin}update(A){if(!this.value){if(this.spec)try{this.value=this.spec.plugin.create(A,this.spec.arg)}catch(j){YA(A.state,j,"CodeMirror plugin crashed"),this.deactivate()}}else if(this.mustUpdate){let j=this.mustUpdate;if(this.mustUpdate=null,this.value.update)try{this.value.update(j)}catch(q){if(YA(j.state,q,"CodeMirror plugin crashed"),this.value.destroy)try{this.value.destroy()}catch($){}this.deactivate()}}return this}destroy(A){var j;if((j=this.value)===null||j===void 0?void 0:j.destroy)try{this.value.destroy()}catch(q){YA(A.state,q,"CodeMirror plugin crashed")}}deactivate(){this.spec=this.value=null}}var h8=k.define(),C0=k.define(),x6=k.define(),v8=k.define(),y0=k.define(),m8=k.define();function VB(A,j){let q=A.state.facet(m8);if(!q.length)return q;let $=q.map((G)=>G instanceof Function?G(A):G),B=[];return h.spans($,j.from,j.to,{point(){},span(G,K,J,Z){let X=G-j.from,U=K-j.from,Y=B;for(let Q=J.length-1;Q>=0;Q--,Z--){let O=J[Q].spec.bidiIsolate,F;if(O==null)O=i4(j.text,X,U);if(Z>0&&Y.length&&(F=Y[Y.length-1]).to==X&&F.direction==O)F.to=U,Y=F.inner;else{let z={from:X,to:U,direction:O,inner:[]};Y.push(z),Y=z.inner}}}}),B}var u8=k.define();function b0(A){let j=0,q=0,$=0,B=0;for(let G of A.state.facet(u8)){let K=G(A);if(K){if(K.left!=null)j=Math.max(j,K.left);if(K.right!=null)q=Math.max(q,K.right);if(K.top!=null)$=Math.max($,K.top);if(K.bottom!=null)B=Math.max(B,K.bottom)}}return{left:j,right:q,top:$,bottom:B}}var D6=k.define();class xA{constructor(A,j,q,$){this.fromA=A,this.toA=j,this.fromB=q,this.toB=$}join(A){return new xA(Math.min(this.fromA,A.fromA),Math.max(this.toA,A.toA),Math.min(this.fromB,A.fromB),Math.max(this.toB,A.toB))}addToSet(A){let j=A.length,q=this;for(;j>0;j--){let $=A[j-1];if($.fromA>q.toA)continue;if($.toA<q.fromA)break;q=q.join($),A.splice(j-1,1)}return A.splice(j,0,q),A}static extendWithRanges(A,j){if(j.length==0)return A;let q=[];for(let $=0,B=0,G=0,K=0;;$++){let J=$==A.length?null:A[$],Z=G-K,X=J?J.fromB:1e9;while(B<j.length&&j[B]<X){let U=j[B],Y=j[B+1],Q=Math.max(K,U),O=Math.min(X,Y);if(Q<=O)new xA(Q+Z,O+Z,Q,O).addToSet(q);if(Y>X)break;else B+=2}if(!J)return q;new xA(J.fromA,J.toA,J.fromB,J.toB).addToSet(q),G=J.toA,K=J.toB}}}class v7{constructor(A,j,q){this.view=A,this.state=j,this.transactions=q,this.flags=0,this.startState=A.state,this.changes=jA.empty(this.startState.doc.length);for(let B of q)this.changes=this.changes.compose(B.changes);let $=[];this.changes.iterChangedRanges((B,G,K,J)=>$.push(new xA(B,G,K,J))),this.changedRanges=$}static create(A,j,q){return new v7(A,j,q)}get viewportChanged(){return(this.flags&4)>0}get viewportMoved(){return(this.flags&8)>0}get heightChanged(){return(this.flags&2)>0}get geometryChanged(){return this.docChanged||(this.flags&18)>0}get focusChanged(){return(this.flags&1)>0}get docChanged(){return!this.changes.empty}get selectionSet(){return this.transactions.some((A)=>A.selection)}get empty(){return this.flags==0&&this.transactions.length==0}}class U0 extends i{get length(){return this.view.state.doc.length}constructor(A){super();this.view=A,this.decorations=[],this.dynamicDecorationMap=[!1],this.domChanged=null,this.hasComposition=null,this.markedForComposition=new Set,this.editContextFormatting=C.none,this.lastCompositionAfterCursor=!1,this.minWidth=0,this.minWidthFrom=0,this.minWidthTo=0,this.impreciseAnchor=null,this.impreciseHead=null,this.forceSelection=!1,this.lastUpdate=Date.now(),this.setDOM(A.contentDOM),this.children=[new $A],this.children[0].setParent(this),this.updateDeco(),this.updateInner([new xA(0,0,0,A.state.doc.length)],0,null)}update(A){var j;let q=A.changedRanges;if(this.minWidth>0&&q.length)if(!q.every(({fromA:Z,toA:X})=>X<this.minWidthFrom||Z>this.minWidthTo))this.minWidth=this.minWidthFrom=this.minWidthTo=0;else this.minWidthFrom=A.changes.mapPos(this.minWidthFrom,1),this.minWidthTo=A.changes.mapPos(this.minWidthTo,1);this.updateEditContextFormatting(A);let $=-1;if(this.view.inputState.composing>=0&&!this.view.observer.editContext){if((j=this.domChanged)===null||j===void 0?void 0:j.newSel)$=this.domChanged.newSel.head;else if(!j9(A.changes,this.hasComposition)&&!A.selectionSet)$=A.state.selection.main.head}let B=$>-1?r4(this.view,A.changes,$):null;if(this.domChanged=null,this.hasComposition){this.markedForComposition.clear();let{from:Z,to:X}=this.hasComposition;q=new xA(Z,X,A.changes.mapPos(Z,-1),A.changes.mapPos(X,1)).addToSet(q.slice())}if(this.hasComposition=B?{from:B.range.fromB,to:B.range.toB}:null,(L.ie||L.chrome)&&!B&&A&&A.state.doc.lines!=A.startState.doc.lines)this.forceSelection=!0;let G=this.decorations,K=this.updateDeco(),J=e4(G,K,A.changes);if(q=xA.extendWithRanges(q,J),!(this.flags&7)&&q.length==0)return!1;else{if(this.updateInner(q,A.startState.doc.length,B),A.transactions.length)this.lastUpdate=Date.now();return!0}}updateInner(A,j,q){this.view.viewState.mustMeasureContent=!0,this.updateChildren(A,j,q);let{observer:$}=this.view;$.ignore(()=>{this.dom.style.height=this.view.viewState.contentHeight/this.view.scaleY+"px",this.dom.style.flexBasis=this.minWidth?this.minWidth+"px":"";let G=L.chrome||L.ios?{node:$.selectionRange.focusNode,written:!1}:void 0;if(this.sync(this.view,G),this.flags&=-8,G&&(G.written||$.selectionRange.focusNode!=G.node))this.forceSelection=!0;this.dom.style.height=""}),this.markedForComposition.forEach((G)=>G.flags&=-9);let B=[];if(this.view.viewport.from||this.view.viewport.to<this.view.state.doc.length){for(let G of this.children)if(G instanceof Fj&&G.widget instanceof h7)B.push(G.dom)}$.updateGaps(B)}updateChildren(A,j,q){let $=q?q.range.addToSet(A.slice()):A,B=this.childCursor(j);for(let G=$.length-1;;G--){let K=G>=0?$[G]:null;if(!K)break;let{fromA:J,toA:Z,fromB:X,toB:U}=K,Y,Q,O,F;if(q&&q.range.fromB<U&&q.range.toB>X){let _=T6.build(this.view.state.doc,X,q.range.fromB,this.decorations,this.dynamicDecorationMap),H=T6.build(this.view.state.doc,q.range.toB,U,this.decorations,this.dynamicDecorationMap);Q=_.breakAtStart,O=_.openStart,F=H.openEnd;let D=this.compositionView(q);if(H.breakAtStart)D.breakAfter=1;else if(H.content.length&&D.merge(D.length,D.length,H.content[0],!1,H.openStart,0))D.breakAfter=H.content[0].breakAfter,H.content.shift();if(_.content.length&&D.merge(0,0,_.content[_.content.length-1],!0,0,_.openEnd))_.content.pop();Y=_.content.concat(D).concat(H.content)}else({content:Y,breakAtStart:Q,openStart:O,openEnd:F}=T6.build(this.view.state.doc,X,U,this.decorations,this.dynamicDecorationMap));let{i:z,off:I}=B.findPos(Z,1),{i:W,off:N}=B.findPos(J,-1);O8(this,W,N,z,I,Y,Q,O,F)}if(q)this.fixCompositionDOM(q)}updateEditContextFormatting(A){this.editContextFormatting=this.editContextFormatting.map(A.changes);for(let j of A.transactions)for(let q of j.effects)if(q.is(w8))this.editContextFormatting=q.value}compositionView(A){let j=new cA(A.text.nodeValue);j.flags|=8;for(let{deco:$}of A.marks)j=new zj($,[j],j.length);let q=new $A;return q.append(j,0),q}fixCompositionDOM(A){let j=(B,G)=>{G.flags|=8|(G.children.some((J)=>J.flags&7)?1:0),this.markedForComposition.add(G);let K=i.get(B);if(K&&K!=G)K.dom=null;G.setDOM(B)},q=this.childPos(A.range.fromB,1),$=this.children[q.i];j(A.line,$);for(let B=A.marks.length-1;B>=-1;B--)q=$.childPos(q.off,1),$=$.children[q.i],j(B>=0?A.marks[B].node:A.text,$)}updateSelection(A=!1,j=!1){if(A||!this.view.observer.selectionRange.focusNode)this.view.observer.readSelectionRange();let q=this.view.root.activeElement,$=q==this.dom,B=!$&&!(this.view.state.facet(Qj)||this.dom.tabIndex>-1)&&R7(this.dom,this.view.observer.selectionRange)&&!(q&&this.dom.contains(q));if(!($||j||B))return;let G=this.forceSelection;this.forceSelection=!1;let K=this.view.state.selection.main,J=this.moveToLine(this.domAtPos(K.anchor)),Z=K.empty?J:this.moveToLine(this.domAtPos(K.head));if(L.gecko&&K.empty&&!this.hasComposition&&a4(J)){let U=document.createTextNode("");this.view.observer.ignore(()=>J.node.insertBefore(U,J.node.childNodes[J.offset]||null)),J=Z=new zA(U,0),G=!0}let X=this.view.observer.selectionRange;if(G||!X.focusNode||(!P6(J.node,J.offset,X.anchorNode,X.anchorOffset)||!P6(Z.node,Z.offset,X.focusNode,X.focusOffset))&&!this.suppressWidgetCursorChange(X,K))this.view.observer.ignore(()=>{if(L.android&&L.chrome&&this.dom.contains(X.focusNode)&&A9(X.focusNode,this.dom))this.dom.blur(),this.dom.focus({preventScroll:!0});let U=y6(this.view.root);if(!U);else if(K.empty){if(L.gecko){let Y=o4(J.node,J.offset);if(Y&&Y!=3){let Q=(Y==1?Y8:Q8)(J.node,J.offset);if(Q)J=new zA(Q.node,Q.offset)}}if(U.collapse(J.node,J.offset),K.bidiLevel!=null&&U.caretBidiLevel!==void 0)U.caretBidiLevel=K.bidiLevel}else if(U.extend){U.collapse(J.node,J.offset);try{U.extend(Z.node,Z.offset)}catch(Y){}}else{let Y=document.createRange();if(K.anchor>K.head)[J,Z]=[Z,J];Y.setEnd(Z.node,Z.offset),Y.setStart(J.node,J.offset),U.removeAllRanges(),U.addRange(Y)}if(B&&this.view.root.activeElement==this.dom){if(this.dom.blur(),q)q.focus()}}),this.view.observer.setSelectionRange(J,Z);this.impreciseAnchor=J.precise?null:new zA(X.anchorNode,X.anchorOffset),this.impreciseHead=Z.precise?null:new zA(X.focusNode,X.focusOffset)}suppressWidgetCursorChange(A,j){return this.hasComposition&&j.empty&&P6(A.focusNode,A.focusOffset,A.anchorNode,A.anchorOffset)&&this.posFromDOM(A.focusNode,A.focusOffset)==j.head}enforceCursorAssoc(){if(this.hasComposition)return;let{view:A}=this,j=A.state.selection.main,q=y6(A.root),{anchorNode:$,anchorOffset:B}=A.observer.selectionRange;if(!q||!j.empty||!j.assoc||!q.modify)return;let G=$A.find(this,j.head);if(!G)return;let K=G.posAtStart;if(j.head==K||j.head==K+G.length)return;let J=this.coordsAt(j.head,-1),Z=this.coordsAt(j.head,1);if(!J||!Z||J.bottom>Z.top)return;let X=this.domAtPos(j.head+j.assoc);q.collapse(X.node,X.offset),q.modify("move",j.assoc<0?"forward":"backward","lineboundary"),A.observer.readSelectionRange();let U=A.observer.selectionRange;if(A.docView.posFromDOM(U.anchorNode,U.anchorOffset)!=j.from)q.collapse($,B)}moveToLine(A){let j=this.dom,q;if(A.node!=j)return A;for(let $=A.offset;!q&&$<j.childNodes.length;$++){let B=i.get(j.childNodes[$]);if(B instanceof $A)q=B.domAtPos(0)}for(let $=A.offset-1;!q&&$>=0;$--){let B=i.get(j.childNodes[$]);if(B instanceof $A)q=B.domAtPos(B.length)}return q?new zA(q.node,q.offset,!0):A}nearest(A){for(let j=A;j;){let q=i.get(j);if(q&&q.rootView==this)return q;j=j.parentNode}return null}posFromDOM(A,j){let q=this.nearest(A);if(!q)throw new RangeError("Trying to find position for a DOM position outside of the document");return q.localPosFromDOM(A,j)+q.posAtStart}domAtPos(A){let{i:j,off:q}=this.childCursor().findPos(A,-1);for(;j<this.children.length-1;){let $=this.children[j];if(q<$.length||$ instanceof $A)break;j++,q=0}return this.children[j].domAtPos(q)}coordsAt(A,j){let q=null,$=0;for(let B=this.length,G=this.children.length-1;G>=0;G--){let K=this.children[G],J=B-K.breakAfter,Z=J-K.length;if(J<A)break;if(Z<=A&&(Z<A||K.covers(-1))&&(J>A||K.covers(1))&&(!q||K instanceof $A&&!(q instanceof $A&&j>=0)))q=K,$=Z;else if(q&&Z==A&&J==A&&K instanceof Fj&&Math.abs(j)<2){if(K.deco.startSide<0)break;else if(G)q=null}B=Z}return q?q.coordsAt(A-$,j):null}coordsForChar(A){let{i:j,off:q}=this.childPos(A,1),$=this.children[j];if(!($ instanceof $A))return null;while($.children.length){let{i:K,off:J}=$.childPos(q,1);for(;;K++){if(K==$.children.length)return null;if(($=$.children[K]).length)break}q=J}if(!($ instanceof cA))return null;let B=qA($.text,q);if(B==q)return null;let G=bj($.dom,q,B).getClientRects();for(let K=0;K<G.length;K++){let J=G[K];if(K==G.length-1||J.top<J.bottom&&J.left<J.right)return J}return null}measureVisibleLineHeights(A){let j=[],{from:q,to:$}=A,B=this.view.contentDOM.clientWidth,G=B>Math.max(this.view.scrollDOM.clientWidth,this.minWidth)+1,K=-1,J=this.view.textDirection==d.LTR;for(let Z=0,X=0;X<this.children.length;X++){let U=this.children[X],Y=Z+U.length;if(Y>$)break;if(Z>=q){let Q=U.dom.getBoundingClientRect();if(j.push(Q.height),G){let O=U.dom.lastChild,F=O?b6(O):[];if(F.length){let z=F[F.length-1],I=J?z.right-Q.left:Q.right-z.left;if(I>K)K=I,this.minWidth=B,this.minWidthFrom=Z,this.minWidthTo=Y}}}Z=Y+U.breakAfter}return j}textDirectionAt(A){let{i:j}=this.childPos(A,1);return getComputedStyle(this.children[j].dom).direction=="rtl"?d.RTL:d.LTR}measureTextSize(){for(let B of this.children)if(B instanceof $A){let G=B.measureTextSize();if(G)return G}let A=document.createElement("div"),j,q,$;return A.className="cm-line",A.style.width="99999px",A.style.position="absolute",A.textContent="abc def ghi jkl mno pqr stu",this.view.observer.ignore(()=>{this.dom.appendChild(A);let B=b6(A.firstChild)[0];j=A.getBoundingClientRect().height,q=B?B.width/27:7,$=B?B.height:j,A.remove()}),{lineHeight:j,charWidth:q,textHeight:$}}childCursor(A=this.length){let j=this.children.length;if(j)A-=this.children[--j].length;return new k0(this.children,A,j)}computeBlockGapDeco(){let A=[],j=this.view.viewState;for(let q=0,$=0;;$++){let B=$==j.viewports.length?null:j.viewports[$],G=B?B.from-1:this.length;if(G>q){let K=(j.lineBlockAt(G).bottom-j.lineBlockAt(q).top)/this.view.scaleY;A.push(C.replace({widget:new h7(K),block:!0,inclusive:!0,isBlockGap:!0}).range(q,G))}if(!B)break;q=B.to+1}return C.set(A)}updateDeco(){let A=1,j=this.view.state.facet(x6).map((B)=>{return(this.dynamicDecorationMap[A++]=typeof B=="function")?B(this.view):B}),q=!1,$=this.view.state.facet(v8).map((B,G)=>{let K=typeof B=="function";if(K)q=!0;return K?B(this.view):B});if($.length)this.dynamicDecorationMap[A++]=q,j.push(h.join($));this.decorations=[this.editContextFormatting,...j,this.computeBlockGapDeco(),this.view.viewState.lineGapDeco];while(A<this.decorations.length)this.dynamicDecorationMap[A++]=!1;return this.decorations}scrollIntoView(A){if(A.isSnapshot){let Z=this.view.viewState.lineBlockAt(A.range.head);this.view.scrollDOM.scrollTop=Z.top-A.yMargin,this.view.scrollDOM.scrollLeft=A.xMargin;return}for(let Z of this.view.state.facet(S8))try{if(Z(this.view,A.range,A))return!0}catch(X){YA(this.view.state,X,"scroll handler")}let{range:j}=A,q=this.coordsAt(j.head,j.empty?j.assoc:j.head>j.anchor?-1:1),$;if(!q)return;if(!j.empty&&($=this.coordsAt(j.anchor,j.anchor>j.head?-1:1)))q={left:Math.min(q.left,$.left),top:Math.min(q.top,$.top),right:Math.max(q.right,$.right),bottom:Math.max(q.bottom,$.bottom)};let B=b0(this.view),G={left:q.left-B.left,top:q.top-B.top,right:q.right+B.right,bottom:q.bottom+B.bottom},{offsetWidth:K,offsetHeight:J}=this.view.scrollDOM;T4(this.view.scrollDOM,G,j.head<j.anchor?-1:1,A.x,A.y,Math.max(Math.min(A.xMargin,K),-K),Math.max(Math.min(A.yMargin,J),-J),this.view.textDirection==d.LTR)}}function a4(A){return A.node.nodeType==1&&A.node.firstChild&&(A.offset==0||A.node.childNodes[A.offset-1].contentEditable=="false")&&(A.offset==A.node.childNodes.length||A.node.childNodes[A.offset].contentEditable=="false")}function g8(A,j){let q=A.observer.selectionRange;if(!q.focusNode)return null;let $=Y8(q.focusNode,q.focusOffset),B=Q8(q.focusNode,q.focusOffset),G=$||B;if(B&&$&&B.node!=$.node){let J=i.get(B.node);if(!J||J instanceof cA&&J.text!=B.node.nodeValue)G=B;else if(A.docView.lastCompositionAfterCursor){let Z=i.get($.node);if(!(!Z||Z instanceof cA&&Z.text!=$.node.nodeValue))G=B}}if(A.docView.lastCompositionAfterCursor=G!=$,!G)return null;let K=j-G.offset;return{from:K,to:K+G.node.nodeValue.length,node:G.node}}function r4(A,j,q){let $=g8(A,q);if(!$)return null;let{node:B,from:G,to:K}=$,J=B.nodeValue;if(/[\n\r]/.test(J))return null;if(A.state.doc.sliceString($.from,$.to)!=J)return null;let Z=j.invertedDesc,X=new xA(Z.mapPos(G),Z.mapPos(K),G,K),U=[];for(let Y=B.parentNode;;Y=Y.parentNode){let Q=i.get(Y);if(Q instanceof zj)U.push({node:Y,deco:Q.mark});else if(Q instanceof $A||Y.nodeName=="DIV"&&Y.parentNode==A.contentDOM)return{range:X,text:B,marks:U,line:Y};else if(Y!=A.contentDOM)U.push({node:Y,deco:new w6({inclusive:!0,attributes:v4(Y),tagName:Y.tagName.toLowerCase()})});else return null}}function o4(A,j){if(A.nodeType!=1)return 0;return(j&&A.childNodes[j-1].contentEditable=="false"?1:0)|(j<A.childNodes.length&&A.childNodes[j].contentEditable=="false"?2:0)}var t4=class A{constructor(){this.changes=[]}compareRange(j,q){V7(j,q,this.changes)}comparePoint(j,q){V7(j,q,this.changes)}boundChange(j){V7(j,j,this.changes)}};function e4(A,j,q){let $=new t4;return h.compare(A,j,q,$),$.changes}function A9(A,j){for(let q=A;q&&q!=j;q=q.assignedSlot||q.parentNode)if(q.nodeType==1&&q.contentEditable=="false")return!0;return!1}function j9(A,j){let q=!1;if(j)A.iterChangedRanges(($,B)=>{if($<j.to&&B>j.from)q=!0});return q}function q9(A,j,q=1){let $=A.charCategorizer(j),B=A.doc.lineAt(j),G=j-B.from;if(B.length==0)return E.cursor(j);if(G==0)q=1;else if(G==B.length)q=-1;let K=G,J=G;if(q<0)K=qA(B.text,G,!1);else J=qA(B.text,G);let Z=$(B.text.slice(K,J));while(K>0){let X=qA(B.text,K,!1);if($(B.text.slice(X,K))!=Z)break;K=X}while(J<B.length){let X=qA(B.text,J);if($(B.text.slice(J,X))!=Z)break;J=X}return E.range(K+B.from,J+B.from)}function $9(A,j){return j.left>A?j.left-A:Math.max(0,A-j.right)}function B9(A,j){return j.top>A?j.top-A:Math.max(0,A-j.bottom)}function nq(A,j){return A.top<j.bottom-1&&A.bottom>j.top+1}function kB(A,j){return j<A.top?{top:j,left:A.left,right:A.right,bottom:A.bottom}:A}function LB(A,j){return j>A.bottom?{top:A.top,left:A.left,right:A.right,bottom:j}:A}function Y0(A,j,q){let $,B,G,K,J=!1,Z,X,U,Y;for(let F=A.firstChild;F;F=F.nextSibling){let z=b6(F);for(let I=0;I<z.length;I++){let W=z[I];if(B&&nq(B,W))W=kB(LB(W,B.bottom),B.top);let N=$9(j,W),_=B9(q,W);if(N==0&&_==0)return F.nodeType==3?PB(F,j,q):Y0(F,j,q);if(!$||K>_||K==_&&G>N)$=F,B=W,G=N,K=_,J=!N?!0:j<W.left?I>0:I<z.length-1;if(N==0){if(q>W.bottom&&(!U||U.bottom<W.bottom))Z=F,U=W;else if(q<W.top&&(!Y||Y.top>W.top))X=F,Y=W}else if(U&&nq(U,W))U=LB(U,W.bottom);else if(Y&&nq(Y,W))Y=kB(Y,W.top)}}if(U&&U.bottom>=q)$=Z,B=U;else if(Y&&Y.top<=q)$=X,B=Y;if(!$)return{node:A,offset:0};let Q=Math.max(B.left,Math.min(B.right,j));if($.nodeType==3)return PB($,Q,q);if(J&&$.contentEditable!="false")return Y0($,Q,q);let O=Array.prototype.indexOf.call(A.childNodes,$)+(j>=(B.left+B.right)/2?1:0);return{node:A,offset:O}}function PB(A,j,q){let $=A.nodeValue.length,B=-1,G=1e9,K=0;for(let J=0;J<$;J++){let Z=bj(A,J,J+1).getClientRects();for(let X=0;X<Z.length;X++){let U=Z[X];if(U.top==U.bottom)continue;if(!K)K=j-U.left;let Y=(U.top>q?U.top-q:q-U.bottom)-1;if(U.left-1<=j&&U.right+1>=j&&Y<G){let Q=j>=(U.left+U.right)/2,O=Q;if(L.chrome||L.gecko){if(bj(A,J).getBoundingClientRect().left==U.right)O=!Q}if(Y<=0)return{node:A,offset:J+(O?1:0)};B=J+(O?1:0),G=Y}}}return{node:A,offset:B>-1?B:K>0?A.nodeValue.length:0}}function f8(A,j,q,$=-1){var B,G;let K=A.contentDOM.getBoundingClientRect(),J=K.top+A.viewState.paddingTop,Z,{docHeight:X}=A.viewState,{x:U,y:Y}=j,Q=Y-J;if(Q<0)return 0;if(Q>X)return A.state.doc.length;for(let H=A.viewState.heightOracle.textHeight/2,D=!1;;){if(Z=A.elementAtHeight(Q),Z.type==EA.Text)break;for(;;){if(Q=$>0?Z.bottom+H:Z.top-H,Q>=0&&Q<=X)break;if(D)return q?null:0;D=!0,$=-$}}Y=J+Q;let O=Z.from;if(O<A.viewport.from)return A.viewport.from==0?0:q?null:TB(A,K,Z,U,Y);if(O>A.viewport.to)return A.viewport.to==A.state.doc.length?A.state.doc.length:q?null:TB(A,K,Z,U,Y);let F=A.dom.ownerDocument,z=A.root.elementFromPoint?A.root:F,I=z.elementFromPoint(U,Y);if(I&&!A.contentDOM.contains(I))I=null;if(!I){if(U=Math.max(K.left+1,Math.min(K.right-1,U)),I=z.elementFromPoint(U,Y),I&&!A.contentDOM.contains(I))I=null}let W,N=-1;if(I&&((B=A.docView.nearest(I))===null||B===void 0?void 0:B.isEditable)!=!1){if(F.caretPositionFromPoint){let H=F.caretPositionFromPoint(U,Y);if(H)({offsetNode:W,offset:N}=H)}else if(F.caretRangeFromPoint){let H=F.caretRangeFromPoint(U,Y);if(H){if({startContainer:W,startOffset:N}=H,!A.contentDOM.contains(W)||L.safari&&G9(W,N,U)||L.chrome&&K9(W,N,U))W=void 0}}if(W)N=Math.min($j(W),N)}if(!W||!A.docView.dom.contains(W)){let H=$A.find(A.docView,O);if(!H)return Q>Z.top+Z.height/2?Z.to:Z.from;({node:W,offset:N}=Y0(H.dom,U,Y))}let _=A.docView.nearest(W);if(!_)return null;if(_.isWidget&&((G=_.dom)===null||G===void 0?void 0:G.nodeType)==1){let H=_.dom.getBoundingClientRect();return j.y<H.top||j.y<=H.bottom&&j.x<=(H.left+H.right)/2?_.posAtStart:_.posAtEnd}else return _.localPosFromDOM(W,N)+_.posAtStart}function TB(A,j,q,$,B){let G=Math.round(($-j.left)*A.defaultCharacterWidth);if(A.lineWrapping&&q.height>A.defaultLineHeight*1.5){let J=A.viewState.heightOracle.textHeight,Z=Math.floor((B-q.top-(A.defaultLineHeight-J)*0.5)/J);G+=Z*A.viewState.heightOracle.lineLength}let K=A.state.sliceDoc(q.from,q.to);return q.from+F7(K,G,A.state.tabSize)}function G9(A,j,q){let $,B=A;if(A.nodeType!=3||j!=($=A.nodeValue.length))return!1;for(;;){let G=B.nextSibling;if(G){if(G.nodeName=="BR")break;return!1}else{let K=B.parentNode;if(!K||K.nodeName=="DIV")break;B=K}}return bj(A,$-1,$).getBoundingClientRect().right>q}function K9(A,j,q){if(j!=0)return!1;for(let B=A;;){let G=B.parentNode;if(!G||G.nodeType!=1||G.firstChild!=B)return!1;if(G.classList.contains("cm-line"))break;B=G}let $=A.nodeType==1?A.getBoundingClientRect():bj(A,0,Math.max(A.nodeValue.length,1)).getBoundingClientRect();return q-$.left>5}function Q0(A,j,q){let $=A.lineBlockAt(j);if(Array.isArray($.type)){let B;for(let G of $.type){if(G.from>j)break;if(G.to<j)continue;if(G.from<j&&G.to>j)return G;if(!B||G.type==EA.Text&&(B.type!=G.type||(q<0?G.from<j:G.to>j)))B=G}return B||$}return $}function J9(A,j,q,$){let B=Q0(A,j.head,j.assoc||-1),G=!$||B.type!=EA.Text||!(A.lineWrapping||B.widgetLineBreaks)?null:A.coordsAtPos(j.assoc<0&&j.head>B.from?j.head-1:j.head);if(G){let K=A.dom.getBoundingClientRect(),J=A.textDirectionAt(B.from),Z=A.posAtCoords({x:q==(J==d.LTR)?K.right-1:K.left+1,y:(G.top+G.bottom)/2});if(Z!=null)return E.cursor(Z,q?-1:1)}return E.cursor(q?B.to:B.from,q?-1:1)}function CB(A,j,q,$){let B=A.state.doc.lineAt(j.head),G=A.bidiSpans(B),K=A.textDirectionAt(B.from);for(let J=j,Z=null;;){let X=s4(B,G,K,J,q),U=V8;if(!X){if(B.number==(q?A.state.doc.lines:1))return J;U=`
`,B=A.state.doc.line(B.number+(q?1:-1)),G=A.bidiSpans(B),X=A.visualLineSide(B,!q)}if(!Z){if(!$)return X;Z=$(U)}else if(!Z(U))return J;J=X}}function Z9(A,j,q){let $=A.state.charCategorizer(j),B=$(q);return(G)=>{let K=$(G);if(B==l.Space)B=K;return B==K}}function X9(A,j,q,$){let B=j.head,G=q?1:-1;if(B==(q?A.state.doc.length:0))return E.cursor(B,j.assoc);let K=j.goalColumn,J,Z=A.contentDOM.getBoundingClientRect(),X=A.coordsAtPos(B,j.assoc||-1),U=A.documentTop;if(X){if(K==null)K=X.left-Z.left;J=G<0?X.top:X.bottom}else{let O=A.viewState.lineBlockAt(B);if(K==null)K=Math.min(Z.right-Z.left,A.defaultCharacterWidth*(B-O.from));J=(G<0?O.top:O.bottom)+U}let Y=Z.left+K,Q=$!==null&&$!==void 0?$:A.viewState.heightOracle.textHeight>>1;for(let O=0;;O+=10){let F=J+(Q+O)*G,z=f8(A,{x:Y,y:F},!1,G);if(F<Z.top||F>Z.bottom||(G<0?z<B:z>B)){let I=A.docView.coordsForChar(z),W=!I||F<I.top?-1:1;return E.cursor(z,W,void 0,K)}}}function L7(A,j,q){for(;;){let $=0;for(let B of A)B.between(j-1,j+1,(G,K,J)=>{if(j>G&&j<K){let Z=$||q||(j-G<K-j?-1:1);j=Z<0?G:K,$=Z}});if(!$)return j}}function aq(A,j,q){let $=L7(A.state.facet(y0).map((B)=>B(A)),q.from,j.head>q.from?-1:1);return $==q.from?q:E.cursor($,$<q.from?1:-1)}var M6="￿";class p8{constructor(A,j){this.points=A,this.text="",this.lineSeparator=j.facet(v.lineSeparator)}append(A){this.text+=A}lineBreak(){this.text+=M6}readRange(A,j){if(!A)return this;let q=A.parentNode;for(let $=A;;){this.findPointBefore(q,$);let B=this.text.length;this.readNode($);let G=$.nextSibling;if(G==j)break;let K=i.get($),J=i.get(G);if(K&&J?K.breakAfter:(K?K.breakAfter:S7($))||S7(G)&&($.nodeName!="BR"||$.cmIgnore)&&this.text.length>B)this.lineBreak();$=G}return this.findPointBefore(q,j),this}readTextNode(A){let j=A.nodeValue;for(let q of this.points)if(q.node==A)q.pos=this.text.length+Math.min(q.offset,j.length);for(let q=0,$=this.lineSeparator?null:/\r\n?|\n/g;;){let B=-1,G=1,K;if(this.lineSeparator)B=j.indexOf(this.lineSeparator,q),G=this.lineSeparator.length;else if(K=$.exec(j))B=K.index,G=K[0].length;if(this.append(j.slice(q,B<0?j.length:B)),B<0)break;if(this.lineBreak(),G>1){for(let J of this.points)if(J.node==A&&J.pos>this.text.length)J.pos-=G-1}q=B+G}}readNode(A){if(A.cmIgnore)return;let j=i.get(A),q=j&&j.overrideDOMText;if(q!=null){this.findPointInside(A,q.length);for(let $=q.iter();!$.next().done;)if($.lineBreak)this.lineBreak();else this.append($.value)}else if(A.nodeType==3)this.readTextNode(A);else if(A.nodeName=="BR"){if(A.nextSibling)this.lineBreak()}else if(A.nodeType==1)this.readRange(A.firstChild,null)}findPointBefore(A,j){for(let q of this.points)if(q.node==A&&A.childNodes[q.offset]==j)q.pos=this.text.length}findPointInside(A,j){for(let q of this.points)if(A.nodeType==3?q.node==A:A.contains(q.node))q.pos=this.text.length+(U9(A,q.node,q.offset)?j:0)}}function U9(A,j,q){for(;;){if(!j||q<$j(j))return!1;if(j==A)return!0;q=yj(j)+1,j=j.parentNode}}class O0{constructor(A,j){this.node=A,this.offset=j,this.pos=-1}}class l8{constructor(A,j,q,$){this.typeOver=$,this.bounds=null,this.text="",this.domChanged=j>-1;let{impreciseHead:B,impreciseAnchor:G}=A.docView;if(A.state.readOnly&&j>-1)this.newSel=null;else if(j>-1&&(this.bounds=A.docView.domBoundsAround(j,q,0))){let K=B||G?[]:O9(A),J=new p8(K,A.state);J.readRange(this.bounds.startDOM,this.bounds.endDOM),this.text=J.text,this.newSel=F9(K,this.bounds.from)}else{let K=A.observer.selectionRange,J=B&&B.node==K.focusNode&&B.offset==K.focusOffset||!A0(A.contentDOM,K.focusNode)?A.state.selection.main.head:A.docView.posFromDOM(K.focusNode,K.focusOffset),Z=G&&G.node==K.anchorNode&&G.offset==K.anchorOffset||!A0(A.contentDOM,K.anchorNode)?A.state.selection.main.anchor:A.docView.posFromDOM(K.anchorNode,K.anchorOffset),X=A.viewport;if((L.ios||L.chrome)&&A.state.selection.main.empty&&J!=Z&&(X.from>0||X.to<A.state.doc.length)){let U=Math.min(J,Z),Y=Math.max(J,Z),Q=X.from-U,O=X.to-Y;if((Q==0||Q==1||U==0)&&(O==0||O==-1||Y==A.state.doc.length))J=0,Z=A.state.doc.length}this.newSel=E.single(Z,J)}}}function d8(A,j){let q,{newSel:$}=j,B=A.state.selection.main,G=A.inputState.lastKeyTime>Date.now()-100?A.inputState.lastKeyCode:-1;if(j.bounds){let{from:K,to:J}=j.bounds,Z=B.from,X=null;if(G===8||L.android&&j.text.length<J-K)Z=B.to,X="end";let U=Q9(A.state.doc.sliceString(K,J,M6),j.text,Z-K,X);if(U){if(L.chrome&&G==13&&U.toB==U.from+2&&j.text.slice(U.from,U.toB)==M6+M6)U.toB--;q={from:K+U.from,to:K+U.toA,insert:m.of(j.text.slice(U.from,U.toB).split(M6))}}}else if($&&(!A.hasFocus&&A.state.facet(Qj)||$.main.eq(B)))$=null;if(!q&&!$)return!1;if(!q&&j.typeOver&&!B.empty&&$&&$.main.empty)q={from:B.from,to:B.to,insert:A.state.doc.slice(B.from,B.to)};else if((L.mac||L.android)&&q&&q.from==q.to&&q.from==B.head-1&&/^\. ?$/.test(q.insert.toString())&&A.contentDOM.getAttribute("autocorrect")=="off"){if($&&q.insert.length==2)$=E.single($.main.anchor-1,$.main.head-1);q={from:q.from,to:q.to,insert:m.of([q.insert.toString().replace("."," ")])}}else if(q&&q.from>=B.from&&q.to<=B.to&&(q.from!=B.from||q.to!=B.to)&&B.to-B.from-(q.to-q.from)<=4)q={from:B.from,to:B.to,insert:A.state.doc.slice(B.from,q.from).append(q.insert).append(A.state.doc.slice(q.to,B.to))};else if(L.chrome&&q&&q.from==q.to&&q.from==B.head&&q.insert.toString()==`
 `&&A.lineWrapping){if($)$=E.single($.main.anchor-1,$.main.head-1);q={from:B.from,to:B.to,insert:m.of([" "])}}if(q)return x0(A,q,$,G);else if($&&!$.main.eq(B)){let K=!1,J="select";if(A.inputState.lastSelectionTime>Date.now()-50){if(A.inputState.lastSelectionOrigin=="select")K=!0;J=A.inputState.lastSelectionOrigin}return A.dispatch({selection:$,scrollIntoView:K,userEvent:J}),!0}else return!1}function x0(A,j,q,$=-1){if(L.ios&&A.inputState.flushIOSKey(j))return!0;let B=A.state.selection.main;if(L.android&&(j.to==B.to&&(j.from==B.from||j.from==B.from-1&&A.state.sliceDoc(j.from,B.from)==" ")&&j.insert.length==1&&j.insert.lines==2&&ej(A.contentDOM,"Enter",13)||(j.from==B.from-1&&j.to==B.to&&j.insert.length==0||$==8&&j.insert.length<j.to-j.from&&j.to>B.head)&&ej(A.contentDOM,"Backspace",8)||j.from==B.from&&j.to==B.to+1&&j.insert.length==0&&ej(A.contentDOM,"Delete",46)))return!0;let G=j.insert.toString();if(A.inputState.composing>=0)A.inputState.composing++;let K,J=()=>K||(K=Y9(A,j,q));if(!A.state.facet(C8).some((Z)=>Z(A,j.from,j.to,G,J)))A.dispatch(J());return!0}function Y9(A,j,q){let $,B=A.state,G=B.selection.main;if(j.from>=G.from&&j.to<=G.to&&j.to-j.from>=(G.to-G.from)/3&&(!q||q.main.empty&&q.main.from==j.from+j.insert.length)&&A.inputState.composing<0){let J=G.from<j.from?B.sliceDoc(G.from,j.from):"",Z=G.to>j.to?B.sliceDoc(j.to,G.to):"";$=B.replaceSelection(A.state.toText(J+j.insert.sliceString(0,void 0,A.state.lineBreak)+Z))}else{let J=B.changes(j),Z=q&&q.main.to<=J.newLength?q.main:void 0;if(B.selection.ranges.length>1&&A.inputState.composing>=0&&j.to<=G.to&&j.to>=G.to-10){let X=A.state.sliceDoc(j.from,j.to),U,Y=q&&g8(A,q.main.head);if(Y){let F=j.insert.length-(j.to-j.from);U={from:Y.from,to:Y.to-F}}else U=A.state.doc.lineAt(G.head);let Q=G.to-j.to,O=G.to-G.from;$=B.changeByRange((F)=>{if(F.from==G.from&&F.to==G.to)return{changes:J,range:Z||F.map(J)};let z=F.to-Q,I=z-X.length;if(F.to-F.from!=O||A.state.sliceDoc(I,z)!=X||F.to>=U.from&&F.from<=U.to)return{range:F};let W=B.changes({from:I,to:z,insert:j.insert}),N=F.to-G.to;return{changes:W,range:!Z?F.map(W):E.range(Math.max(0,Z.anchor+N),Math.max(0,Z.head+N))}})}else $={changes:J,selection:Z&&B.selection.replaceRange(Z)}}let K="input.type";if(A.composing||A.inputState.compositionPendingChange&&A.inputState.compositionEndedAt>Date.now()-50){if(A.inputState.compositionPendingChange=!1,K+=".compose",A.inputState.compositionFirstChange)K+=".start",A.inputState.compositionFirstChange=!1}return B.update($,{userEvent:K,scrollIntoView:!0})}function Q9(A,j,q,$){let B=Math.min(A.length,j.length),G=0;while(G<B&&A.charCodeAt(G)==j.charCodeAt(G))G++;if(G==B&&A.length==j.length)return null;let K=A.length,J=j.length;while(K>0&&J>0&&A.charCodeAt(K-1)==j.charCodeAt(J-1))K--,J--;if($=="end"){let Z=Math.max(0,G-Math.min(K,J));q-=K+Z-G}if(K<G&&A.length<j.length){let Z=q<=G&&q>=K?G-q:0;G-=Z,J=G+(J-K),K=G}else if(J<G){let Z=q<=G&&q>=J?G-q:0;G-=Z,K=G+(K-J),J=G}return{from:G,toA:K,toB:J}}function O9(A){let j=[];if(A.root.activeElement!=A.contentDOM)return j;let{anchorNode:q,anchorOffset:$,focusNode:B,focusOffset:G}=A.observer.selectionRange;if(q){if(j.push(new O0(q,$)),B!=q||G!=$)j.push(new O0(B,G))}return j}function F9(A,j){if(A.length==0)return null;let q=A[0].pos,$=A.length==2?A[1].pos:q;return q>-1&&$>-1?E.single(q+j,$+j):null}class c8{setSelectionOrigin(A){this.lastSelectionOrigin=A,this.lastSelectionTime=Date.now()}constructor(A){if(this.view=A,this.lastKeyCode=0,this.lastKeyTime=0,this.lastTouchTime=0,this.lastFocusTime=0,this.lastScrollTop=0,this.lastScrollLeft=0,this.pendingIOSKey=void 0,this.tabFocusMode=-1,this.lastSelectionOrigin=null,this.lastSelectionTime=0,this.lastContextMenu=0,this.scrollHandlers=[],this.handlers=Object.create(null),this.composing=-1,this.compositionFirstChange=null,this.compositionEndedAt=0,this.compositionPendingKey=!1,this.compositionPendingChange=!1,this.mouseSelection=null,this.draggedContent=null,this.handleEvent=this.handleEvent.bind(this),this.notifiedFocused=A.hasFocus,L.safari)A.contentDOM.addEventListener("input",()=>null);if(L.gecko)T9(A.contentDOM.ownerDocument)}handleEvent(A){if(!N9(this.view,A)||this.ignoreDuringComposition(A))return;if(A.type=="keydown"&&this.keydown(A))return;if(this.view.updateState!=0)Promise.resolve().then(()=>this.runHandlers(A.type,A));else this.runHandlers(A.type,A)}runHandlers(A,j){let q=this.handlers[A];if(q){for(let $ of q.observers)$(this.view,j);for(let $ of q.handlers){if(j.defaultPrevented)break;if($(this.view,j)){j.preventDefault();break}}}}ensureHandlers(A){let j=z9(A),q=this.handlers,$=this.view.contentDOM;for(let B in j)if(B!="scroll"){let G=!j[B].handlers.length,K=q[B];if(K&&G!=!K.handlers.length)$.removeEventListener(B,this.handleEvent),K=null;if(!K)$.addEventListener(B,this.handleEvent,{passive:G})}for(let B in q)if(B!="scroll"&&!j[B])$.removeEventListener(B,this.handleEvent);this.handlers=j}keydown(A){if(this.lastKeyCode=A.keyCode,this.lastKeyTime=Date.now(),A.keyCode==9&&this.tabFocusMode>-1&&(!this.tabFocusMode||Date.now()<=this.tabFocusMode))return!0;if(this.tabFocusMode>0&&A.keyCode!=27&&i8.indexOf(A.keyCode)<0)this.tabFocusMode=-1;if(L.android&&L.chrome&&!A.synthetic&&(A.keyCode==13||A.keyCode==8))return this.view.observer.delayAndroidKey(A.key,A.keyCode),!0;let j;if(L.ios&&!A.synthetic&&!A.altKey&&!A.metaKey&&((j=s8.find((q)=>q.keyCode==A.keyCode))&&!A.ctrlKey||I9.indexOf(A.key)>-1&&A.ctrlKey&&!A.shiftKey))return this.pendingIOSKey=j||A,setTimeout(()=>this.flushIOSKey(),250),!0;if(A.keyCode!=229)this.view.observer.forceFlush();return!1}flushIOSKey(A){let j=this.pendingIOSKey;if(!j)return!1;if(j.key=="Enter"&&A&&A.from<A.to&&/^\S+$/.test(A.insert.toString()))return!1;return this.pendingIOSKey=void 0,ej(this.view.contentDOM,j.key,j.keyCode,j instanceof KeyboardEvent?j:void 0)}ignoreDuringComposition(A){if(!/^key/.test(A.type))return!1;if(this.composing>0)return!0;if(L.safari&&!L.ios&&this.compositionPendingKey&&Date.now()-this.compositionEndedAt<100)return this.compositionPendingKey=!1,!0;return!1}startMouseSelection(A){if(this.mouseSelection)this.mouseSelection.destroy();this.mouseSelection=A}update(A){if(this.view.observer.update(A),this.mouseSelection)this.mouseSelection.update(A);if(this.draggedContent&&A.docChanged)this.draggedContent=this.draggedContent.map(A.changes);if(A.transactions.length)this.lastKeyCode=this.lastSelectionTime=0}destroy(){if(this.mouseSelection)this.mouseSelection.destroy()}}function yB(A,j){return(q,$)=>{try{return j.call(A,$,q)}catch(B){YA(q.state,B)}}}function z9(A){let j=Object.create(null);function q($){return j[$]||(j[$]={observers:[],handlers:[]})}for(let $ of A){let B=$.spec,G=B&&B.plugin.domEventHandlers,K=B&&B.plugin.domEventObservers;if(G)for(let J in G){let Z=G[J];if(Z)q(J).handlers.push(yB($.value,Z))}if(K)for(let J in K){let Z=K[J];if(Z)q(J).observers.push(yB($.value,Z))}}for(let $ in sA)q($).handlers.push(sA[$]);for(let $ in SA)q($).observers.push(SA[$]);return j}var s8=[{key:"Backspace",keyCode:8,inputType:"deleteContentBackward"},{key:"Enter",keyCode:13,inputType:"insertParagraph"},{key:"Enter",keyCode:13,inputType:"insertLineBreak"},{key:"Delete",keyCode:46,inputType:"deleteContentForward"}],I9="dthko",i8=[16,17,18,20,91,92,224,225],W7=6;function E7(A){return Math.max(0,A)*0.7+8}function W9(A,j){return Math.max(Math.abs(A.clientX-j.clientX),Math.abs(A.clientY-j.clientY))}class n8{constructor(A,j,q,$){this.view=A,this.startEvent=j,this.style=q,this.mustSelect=$,this.scrollSpeed={x:0,y:0},this.scrolling=-1,this.lastEvent=j,this.scrollParents=C4(A.contentDOM),this.atoms=A.state.facet(y0).map((G)=>G(A));let B=A.contentDOM.ownerDocument;B.addEventListener("mousemove",this.move=this.move.bind(this)),B.addEventListener("mouseup",this.up=this.up.bind(this)),this.extend=j.shiftKey,this.multiple=A.state.facet(v.allowMultipleSelections)&&E9(A,j),this.dragging=_9(A,j)&&o8(j)==1?null:!1}start(A){if(this.dragging===!1)this.select(A)}move(A){if(A.buttons==0)return this.destroy();if(this.dragging||this.dragging==null&&W9(this.startEvent,A)<10)return;this.select(this.lastEvent=A);let j=0,q=0,$=0,B=0,G=this.view.win.innerWidth,K=this.view.win.innerHeight;if(this.scrollParents.x)({left:$,right:G}=this.scrollParents.x.getBoundingClientRect());if(this.scrollParents.y)({top:B,bottom:K}=this.scrollParents.y.getBoundingClientRect());let J=b0(this.view);if(A.clientX-J.left<=$+W7)j=-E7($-A.clientX);else if(A.clientX+J.right>=G-W7)j=E7(A.clientX-G);if(A.clientY-J.top<=B+W7)q=-E7(B-A.clientY);else if(A.clientY+J.bottom>=K-W7)q=E7(A.clientY-K);this.setScrollSpeed(j,q)}up(A){if(this.dragging==null)this.select(this.lastEvent);if(!this.dragging)A.preventDefault();this.destroy()}destroy(){this.setScrollSpeed(0,0);let A=this.view.contentDOM.ownerDocument;A.removeEventListener("mousemove",this.move),A.removeEventListener("mouseup",this.up),this.view.inputState.mouseSelection=this.view.inputState.draggedContent=null}setScrollSpeed(A,j){if(this.scrollSpeed={x:A,y:j},A||j){if(this.scrolling<0)this.scrolling=setInterval(()=>this.scroll(),50)}else if(this.scrolling>-1)clearInterval(this.scrolling),this.scrolling=-1}scroll(){let{x:A,y:j}=this.scrollSpeed;if(A&&this.scrollParents.x)this.scrollParents.x.scrollLeft+=A,A=0;if(j&&this.scrollParents.y)this.scrollParents.y.scrollTop+=j,j=0;if(A||j)this.view.win.scrollBy(A,j);if(this.dragging===!1)this.select(this.lastEvent)}skipAtoms(A){let j=null;for(let q=0;q<A.ranges.length;q++){let $=A.ranges[q],B=null;if($.empty){let G=L7(this.atoms,$.from,0);if(G!=$.from)B=E.cursor(G,-1)}else{let G=L7(this.atoms,$.from,-1),K=L7(this.atoms,$.to,1);if(G!=$.from||K!=$.to)B=E.range($.from==$.anchor?G:K,$.from==$.head?G:K)}if(B){if(!j)j=A.ranges.slice();j[q]=B}}return j?E.create(j,A.mainIndex):A}select(A){let{view:j}=this,q=this.skipAtoms(this.style.get(A,this.extend,this.multiple));if(this.mustSelect||!q.eq(j.state.selection,this.dragging===!1))this.view.dispatch({selection:q,userEvent:"select.pointer"});this.mustSelect=!1}update(A){if(A.transactions.some((j)=>j.isUserEvent("input.type")))this.destroy();else if(this.style.update(A))setTimeout(()=>this.select(this.lastEvent),20)}}function E9(A,j){let q=A.state.facet(k8);return q.length?q[0](j):L.mac?j.metaKey:j.ctrlKey}function H9(A,j){let q=A.state.facet(L8);return q.length?q[0](j):L.mac?!j.altKey:!j.ctrlKey}function _9(A,j){let{main:q}=A.state.selection;if(q.empty)return!1;let $=y6(A.root);if(!$||$.rangeCount==0)return!0;let B=$.getRangeAt(0).getClientRects();for(let G=0;G<B.length;G++){let K=B[G];if(K.left<=j.clientX&&K.right>=j.clientX&&K.top<=j.clientY&&K.bottom>=j.clientY)return!0}return!1}function N9(A,j){if(!j.bubbles)return!0;if(j.defaultPrevented)return!1;for(let q=j.target,$;q!=A.contentDOM;q=q.parentNode)if(!q||q.nodeType==11||($=i.get(q))&&$.ignoreEvent(j))return!1;return!0}var sA=Object.create(null),SA=Object.create(null),a8=L.ie&&L.ie_version<15||L.ios&&L.webkit_version<604;function D9(A){let j=A.dom.parentNode;if(!j)return;let q=j.appendChild(document.createElement("textarea"));q.style.cssText="position: fixed; left: -10000px; top: 10px",q.focus(),setTimeout(()=>{A.focus(),q.remove(),r8(A,q.value)},50)}function l7(A,j,q){for(let $ of A.facet(j))q=$(q,A);return q}function r8(A,j){j=l7(A.state,P0,j);let{state:q}=A,$,B=1,G=q.toText(j),K=G.lines==q.selection.ranges.length;if(F0!=null&&q.selection.ranges.every((Z)=>Z.empty)&&F0==G.toString()){let Z=-1;$=q.changeByRange((X)=>{let U=q.doc.lineAt(X.from);if(U.from==Z)return{range:X};Z=U.from;let Y=q.toText((K?G.line(B++).text:j)+q.lineBreak);return{changes:{from:U.from,insert:Y},range:E.cursor(X.from+Y.length)}})}else if(K)$=q.changeByRange((Z)=>{let X=G.line(B++);return{changes:{from:Z.from,to:Z.to,insert:X.text},range:E.cursor(Z.from+X.length)}});else $=q.replaceSelection(G);A.dispatch($,{userEvent:"input.paste",scrollIntoView:!0})}SA.scroll=(A)=>{A.inputState.lastScrollTop=A.scrollDOM.scrollTop,A.inputState.lastScrollLeft=A.scrollDOM.scrollLeft};sA.keydown=(A,j)=>{if(A.inputState.setSelectionOrigin("select"),j.keyCode==27&&A.inputState.tabFocusMode!=0)A.inputState.tabFocusMode=Date.now()+2000;return!1};SA.touchstart=(A,j)=>{A.inputState.lastTouchTime=Date.now(),A.inputState.setSelectionOrigin("select.pointer")};SA.touchmove=(A)=>{A.inputState.setSelectionOrigin("select.pointer")};sA.mousedown=(A,j)=>{if(A.observer.flush(),A.inputState.lastTouchTime>Date.now()-2000)return!1;let q=null;for(let $ of A.state.facet(P8))if(q=$(A,j),q)break;if(!q&&j.button==0)q=V9(A,j);if(q){let $=!A.hasFocus;if(A.inputState.startMouseSelection(new n8(A,j,q,$)),$)A.observer.ignore(()=>{Z8(A.contentDOM);let G=A.root.activeElement;if(G&&!G.contains(A.contentDOM))G.blur()});let B=A.inputState.mouseSelection;if(B)return B.start(j),B.dragging===!1}return!1};function bB(A,j,q,$){if($==1)return E.cursor(j,q);else if($==2)return q9(A.state,j,q);else{let B=$A.find(A.docView,j),G=A.state.doc.lineAt(B?B.posAtEnd:j),K=B?B.posAtStart:G.from,J=B?B.posAtEnd:G.to;if(J<A.state.doc.length&&J==G.to)J++;return E.range(K,J)}}var xB=(A,j,q)=>j>=q.top&&j<=q.bottom&&A>=q.left&&A<=q.right;function M9(A,j,q,$){let B=$A.find(A.docView,j);if(!B)return 1;let G=j-B.posAtStart;if(G==0)return 1;if(G==B.length)return-1;let K=B.coordsAt(G,-1);if(K&&xB(q,$,K))return-1;let J=B.coordsAt(G,1);if(J&&xB(q,$,J))return 1;return K&&K.bottom>=$?-1:1}function SB(A,j){let q=A.posAtCoords({x:j.clientX,y:j.clientY},!1);return{pos:q,bias:M9(A,q,j.clientX,j.clientY)}}var R9=L.ie&&L.ie_version<=11,wB=null,hB=0,vB=0;function o8(A){if(!R9)return A.detail;let j=wB,q=vB;return wB=A,vB=Date.now(),hB=!j||q>Date.now()-400&&Math.abs(j.clientX-A.clientX)<2&&Math.abs(j.clientY-A.clientY)<2?(hB+1)%3:1}function V9(A,j){let q=SB(A,j),$=o8(j),B=A.state.selection;return{update(G){if(G.docChanged)q.pos=G.changes.mapPos(q.pos),B=B.map(G.changes)},get(G,K,J){let Z=SB(A,G),X,U=bB(A,Z.pos,Z.bias,$);if(q.pos!=Z.pos&&!K){let Y=bB(A,q.pos,q.bias,$),Q=Math.min(Y.from,U.from),O=Math.max(Y.to,U.to);U=Q<U.from?E.range(Q,O):E.range(O,Q)}if(K)return B.replaceRange(B.main.extend(U.from,U.to));else if(J&&$==1&&B.ranges.length>1&&(X=k9(B,Z.pos)))return X;else if(J)return B.addRange(U);else return E.create([U])}}}function k9(A,j){for(let q=0;q<A.ranges.length;q++){let{from:$,to:B}=A.ranges[q];if($<=j&&B>=j)return E.create(A.ranges.slice(0,q).concat(A.ranges.slice(q+1)),A.mainIndex==q?0:A.mainIndex-(A.mainIndex>q?1:0))}return null}sA.dragstart=(A,j)=>{let{selection:{main:q}}=A.state;if(j.target.draggable){let B=A.docView.nearest(j.target);if(B&&B.isWidget){let G=B.posAtStart,K=G+B.length;if(G>=q.to||K<=q.from)q=E.range(G,K)}}let{inputState:$}=A;if($.mouseSelection)$.mouseSelection.dragging=!0;if($.draggedContent=q,j.dataTransfer)j.dataTransfer.setData("Text",l7(A.state,T0,A.state.sliceDoc(q.from,q.to))),j.dataTransfer.effectAllowed="copyMove";return!1};sA.dragend=(A)=>{return A.inputState.draggedContent=null,!1};function mB(A,j,q,$){if(q=l7(A.state,P0,q),!q)return;let B=A.posAtCoords({x:j.clientX,y:j.clientY},!1),{draggedContent:G}=A.inputState,K=$&&G&&H9(A,j)?{from:G.from,to:G.to}:null,J={from:B,insert:q},Z=A.state.changes(K?[K,J]:J);A.focus(),A.dispatch({changes:Z,selection:{anchor:Z.mapPos(B,-1),head:Z.mapPos(B,1)},userEvent:K?"move.drop":"input.drop"}),A.inputState.draggedContent=null}sA.drop=(A,j)=>{if(!j.dataTransfer)return!1;if(A.state.readOnly)return!0;let q=j.dataTransfer.files;if(q&&q.length){let $=Array(q.length),B=0,G=()=>{if(++B==q.length)mB(A,j,$.filter((K)=>K!=null).join(A.state.lineBreak),!1)};for(let K=0;K<q.length;K++){let J=new FileReader;J.onerror=G,J.onload=()=>{if(!/[\x00-\x08\x0e-\x1f]{2}/.test(J.result))$[K]=J.result;G()},J.readAsText(q[K])}return!0}else{let $=j.dataTransfer.getData("Text");if($)return mB(A,j,$,!0),!0}return!1};sA.paste=(A,j)=>{if(A.state.readOnly)return!0;A.observer.flush();let q=a8?null:j.clipboardData;if(q)return r8(A,q.getData("text/plain")||q.getData("text/uri-list")),!0;else return D9(A),!1};function L9(A,j){let q=A.dom.parentNode;if(!q)return;let $=q.appendChild(document.createElement("textarea"));$.style.cssText="position: fixed; left: -10000px; top: 10px",$.value=j,$.focus(),$.selectionEnd=j.length,$.selectionStart=0,setTimeout(()=>{$.remove(),A.focus()},50)}function P9(A){let j=[],q=[],$=!1;for(let B of A.selection.ranges)if(!B.empty)j.push(A.sliceDoc(B.from,B.to)),q.push(B);if(!j.length){let B=-1;for(let{from:G}of A.selection.ranges){let K=A.doc.lineAt(G);if(K.number>B)j.push(K.text),q.push({from:K.from,to:Math.min(A.doc.length,K.to+1)});B=K.number}$=!0}return{text:l7(A,T0,j.join(A.lineBreak)),ranges:q,linewise:$}}var F0=null;sA.copy=sA.cut=(A,j)=>{let{text:q,ranges:$,linewise:B}=P9(A.state);if(!q&&!B)return!1;if(F0=B?q:null,j.type=="cut"&&!A.state.readOnly)A.dispatch({changes:$,scrollIntoView:!0,userEvent:"delete.cut"});let G=a8?null:j.clipboardData;if(G)return G.clearData(),G.setData("text/plain",q),!0;else return L9(A,q),!1};var t8=kA.define();function e8(A,j){let q=[];for(let $ of A.facet(y8)){let B=$(A,j);if(B)q.push(B)}return q.length?A.update({effects:q,annotations:t8.of(!0)}):null}function AG(A){setTimeout(()=>{let j=A.hasFocus;if(j!=A.inputState.notifiedFocused){let q=e8(A.state,j);if(q)A.dispatch(q);else A.update([])}},10)}SA.focus=(A)=>{if(A.inputState.lastFocusTime=Date.now(),!A.scrollDOM.scrollTop&&(A.inputState.lastScrollTop||A.inputState.lastScrollLeft))A.scrollDOM.scrollTop=A.inputState.lastScrollTop,A.scrollDOM.scrollLeft=A.inputState.lastScrollLeft;AG(A)};SA.blur=(A)=>{A.observer.clearSelectionRange(),AG(A)};SA.compositionstart=SA.compositionupdate=(A)=>{if(A.observer.editContext)return;if(A.inputState.compositionFirstChange==null)A.inputState.compositionFirstChange=!0;if(A.inputState.composing<0)A.inputState.composing=0};SA.compositionend=(A)=>{if(A.observer.editContext)return;if(A.inputState.composing=-1,A.inputState.compositionEndedAt=Date.now(),A.inputState.compositionPendingKey=!0,A.inputState.compositionPendingChange=A.observer.pendingRecords().length>0,A.inputState.compositionFirstChange=null,L.chrome&&L.android)A.observer.flushSoon();else if(A.inputState.compositionPendingChange)Promise.resolve().then(()=>A.observer.flush());else setTimeout(()=>{if(A.inputState.composing<0&&A.docView.hasComposition)A.update([])},50)};SA.contextmenu=(A)=>{A.inputState.lastContextMenu=Date.now()};sA.beforeinput=(A,j)=>{var q,$;if(j.inputType=="insertReplacementText"&&A.observer.editContext){let G=(q=j.dataTransfer)===null||q===void 0?void 0:q.getData("text/plain"),K=j.getTargetRanges();if(G&&K.length){let J=K[0],Z=A.posAtDOM(J.startContainer,J.startOffset),X=A.posAtDOM(J.endContainer,J.endOffset);return x0(A,{from:Z,to:X,insert:A.state.toText(G)},null),!0}}let B;if(L.chrome&&L.android&&(B=s8.find((G)=>G.inputType==j.inputType))){if(A.observer.delayAndroidKey(B.key,B.keyCode),B.key=="Backspace"||B.key=="Delete"){let G=(($=window.visualViewport)===null||$===void 0?void 0:$.height)||0;setTimeout(()=>{var K;if((((K=window.visualViewport)===null||K===void 0?void 0:K.height)||0)>G+10&&A.hasFocus)A.contentDOM.blur(),A.focus()},100)}}if(L.ios&&j.inputType=="deleteContentForward")A.observer.flushSoon();if(L.safari&&j.inputType=="insertText"&&A.inputState.composing>=0)setTimeout(()=>SA.compositionend(A,j),20);return!1};var uB=new Set;function T9(A){if(!uB.has(A))uB.add(A),A.addEventListener("copy",()=>{}),A.addEventListener("cut",()=>{})}var gB=["pre-wrap","normal","pre-line","break-spaces"],q6=!1;function fB(){q6=!1}class jG{constructor(A){this.lineWrapping=A,this.doc=m.empty,this.heightSamples={},this.lineHeight=14,this.charWidth=7,this.textHeight=14,this.lineLength=30}heightForGap(A,j){let q=this.doc.lineAt(j).number-this.doc.lineAt(A).number+1;if(this.lineWrapping)q+=Math.max(0,Math.ceil((j-A-q*this.lineLength*0.5)/this.lineLength));return this.lineHeight*q}heightForLine(A){if(!this.lineWrapping)return this.lineHeight;return(1+Math.max(0,Math.ceil((A-this.lineLength)/Math.max(1,this.lineLength-5))))*this.lineHeight}setDoc(A){return this.doc=A,this}mustRefreshForWrapping(A){return gB.indexOf(A)>-1!=this.lineWrapping}mustRefreshForHeights(A){let j=!1;for(let q=0;q<A.length;q++){let $=A[q];if($<0)q++;else if(!this.heightSamples[Math.floor($*10)])j=!0,this.heightSamples[Math.floor($*10)]=!0}return j}refresh(A,j,q,$,B,G){let K=gB.indexOf(A)>-1,J=Math.round(j)!=Math.round(this.lineHeight)||this.lineWrapping!=K;if(this.lineWrapping=K,this.lineHeight=j,this.charWidth=q,this.textHeight=$,this.lineLength=B,J){this.heightSamples={};for(let Z=0;Z<G.length;Z++){let X=G[Z];if(X<0)Z++;else this.heightSamples[Math.floor(X*10)]=!0}}return J}}class qG{constructor(A,j){this.from=A,this.heights=j,this.index=0}get more(){return this.index<this.heights.length}}class qj{constructor(A,j,q,$,B){this.from=A,this.length=j,this.top=q,this.height=$,this._content=B}get type(){return typeof this._content=="number"?EA.Text:Array.isArray(this._content)?this._content:this._content.type}get to(){return this.from+this.length}get bottom(){return this.top+this.height}get widget(){return this._content instanceof Hj?this._content.widget:null}get widgetLineBreaks(){return typeof this._content=="number"?this._content:0}join(A){let j=(Array.isArray(this._content)?this._content:[this]).concat(Array.isArray(A._content)?A._content:[A]);return new qj(this.from,this.length+A.length,this.top,this.height+A.height,j)}}var a=function(A){return A[A.ByPos=0]="ByPos",A[A.ByHeight=1]="ByHeight",A[A.ByPosNoHeight=2]="ByPosNoHeight",A}(a||(a={})),P7=0.001;class HA{constructor(A,j,q=2){this.length=A,this.height=j,this.flags=q}get outdated(){return(this.flags&2)>0}set outdated(A){this.flags=(A?2:0)|this.flags&-3}setHeight(A){if(this.height!=A){if(Math.abs(this.height-A)>P7)q6=!0;this.height=A}}replace(A,j,q){return HA.of(q)}decomposeLeft(A,j){j.push(this)}decomposeRight(A,j){j.push(this)}applyChanges(A,j,q,$){let B=this,G=q.doc;for(let K=$.length-1;K>=0;K--){let{fromA:J,toA:Z,fromB:X,toB:U}=$[K],Y=B.lineAt(J,a.ByPosNoHeight,q.setDoc(j),0,0),Q=Y.to>=Z?Y:B.lineAt(Z,a.ByPosNoHeight,q,0,0);U+=Q.to-Z,Z=Q.to;while(K>0&&Y.from<=$[K-1].toA)if(J=$[K-1].fromA,X=$[K-1].fromB,K--,J<Y.from)Y=B.lineAt(J,a.ByPosNoHeight,q,0,0);X+=Y.from-J,J=Y.from;let O=w0.build(q.setDoc(G),A,X,U);B=m7(B,B.replace(J,Z,O))}return B.updateHeight(q,0)}static empty(){return new LA(0,0)}static of(A){if(A.length==1)return A[0];let j=0,q=A.length,$=0,B=0;for(;;)if(j==q)if($>B*2){let K=A[j-1];if(K.break)A.splice(--j,1,K.left,null,K.right);else A.splice(--j,1,K.left,K.right);q+=1+K.break,$-=K.size}else if(B>$*2){let K=A[q];if(K.break)A.splice(q,1,K.left,null,K.right);else A.splice(q,1,K.left,K.right);q+=2+K.break,B-=K.size}else break;else if($<B){let K=A[j++];if(K)$+=K.size}else{let K=A[--q];if(K)B+=K.size}let G=0;if(A[j-1]==null)G=1,j--;else if(A[j]==null)G=1,q++;return new $G(HA.of(A.slice(0,j)),G,HA.of(A.slice(q)))}}function m7(A,j){if(A==j)return A;if(A.constructor!=j.constructor)q6=!0;return j}HA.prototype.size=1;class S0 extends HA{constructor(A,j,q){super(A,j);this.deco=q}blockAt(A,j,q,$){return new qj($,this.length,q,this.height,this.deco||0)}lineAt(A,j,q,$,B){return this.blockAt(0,q,$,B)}forEachLine(A,j,q,$,B,G){if(A<=B+this.length&&j>=B)G(this.blockAt(0,q,$,B))}updateHeight(A,j=0,q=!1,$){if($&&$.from<=j&&$.more)this.setHeight($.heights[$.index++]);return this.outdated=!1,this}toString(){return`block(${this.length})`}}class LA extends S0{constructor(A,j){super(A,j,null);this.collapsed=0,this.widgetHeight=0,this.breaks=0}blockAt(A,j,q,$){return new qj($,this.length,q,this.height,this.breaks)}replace(A,j,q){let $=q[0];if(q.length==1&&($ instanceof LA||$ instanceof UA&&$.flags&4)&&Math.abs(this.length-$.length)<10){if($ instanceof UA)$=new LA($.length,this.height);else $.height=this.height;if(!this.outdated)$.outdated=!1;return $}else return HA.of(q)}updateHeight(A,j=0,q=!1,$){if($&&$.from<=j&&$.more)this.setHeight($.heights[$.index++]);else if(q||this.outdated)this.setHeight(Math.max(this.widgetHeight,A.heightForLine(this.length-this.collapsed))+this.breaks*A.lineHeight);return this.outdated=!1,this}toString(){return`line(${this.length}${this.collapsed?-this.collapsed:""}${this.widgetHeight?":"+this.widgetHeight:""})`}}class UA extends HA{constructor(A){super(A,0)}heightMetrics(A,j){let q=A.doc.lineAt(j).number,$=A.doc.lineAt(j+this.length).number,B=$-q+1,G,K=0;if(A.lineWrapping){let J=Math.min(this.height,A.lineHeight*B);if(G=J/B,this.length>B+1)K=(this.height-J)/(this.length-B-1)}else G=this.height/B;return{firstLine:q,lastLine:$,perLine:G,perChar:K}}blockAt(A,j,q,$){let{firstLine:B,lastLine:G,perLine:K,perChar:J}=this.heightMetrics(j,$);if(j.lineWrapping){let Z=$+(A<j.lineHeight?0:Math.round(Math.max(0,Math.min(1,(A-q)/this.height))*this.length)),X=j.doc.lineAt(Z),U=K+X.length*J,Y=Math.max(q,A-U/2);return new qj(X.from,X.length,Y,U,0)}else{let Z=Math.max(0,Math.min(G-B,Math.floor((A-q)/K))),{from:X,length:U}=j.doc.line(B+Z);return new qj(X,U,q+K*Z,K,0)}}lineAt(A,j,q,$,B){if(j==a.ByHeight)return this.blockAt(A,q,$,B);if(j==a.ByPosNoHeight){let{from:Q,to:O}=q.doc.lineAt(A);return new qj(Q,O-Q,0,0,0)}let{firstLine:G,perLine:K,perChar:J}=this.heightMetrics(q,B),Z=q.doc.lineAt(A),X=K+Z.length*J,U=Z.number-G,Y=$+K*U+J*(Z.from-B-U);return new qj(Z.from,Z.length,Math.max($,Math.min(Y,$+this.height-X)),X,0)}forEachLine(A,j,q,$,B,G){A=Math.max(A,B),j=Math.min(j,B+this.length);let{firstLine:K,perLine:J,perChar:Z}=this.heightMetrics(q,B);for(let X=A,U=$;X<=j;){let Y=q.doc.lineAt(X);if(X==A){let O=Y.number-K;U+=J*O+Z*(A-B-O)}let Q=J+Z*Y.length;G(new qj(Y.from,Y.length,U,Q,0)),U+=Q,X=Y.to+1}}replace(A,j,q){let $=this.length-j;if($>0){let B=q[q.length-1];if(B instanceof UA)q[q.length-1]=new UA(B.length+$);else q.push(null,new UA($-1))}if(A>0){let B=q[0];if(B instanceof UA)q[0]=new UA(A+B.length);else q.unshift(new UA(A-1),null)}return HA.of(q)}decomposeLeft(A,j){j.push(new UA(A-1),null)}decomposeRight(A,j){j.push(null,new UA(this.length-A-1))}updateHeight(A,j=0,q=!1,$){let B=j+this.length;if($&&$.from<=j+this.length&&$.more){let G=[],K=Math.max(j,$.from),J=-1;if($.from>j)G.push(new UA($.from-j-1).updateHeight(A,j));while(K<=B&&$.more){let X=A.doc.lineAt(K).length;if(G.length)G.push(null);let U=$.heights[$.index++];if(J==-1)J=U;else if(Math.abs(U-J)>=P7)J=-2;let Y=new LA(X,U);Y.outdated=!1,G.push(Y),K+=X+1}if(K<=B)G.push(null,new UA(B-K).updateHeight(A,K));let Z=HA.of(G);if(J<0||Math.abs(Z.height-this.height)>=P7||Math.abs(J-this.heightMetrics(A,j).perLine)>=P7)q6=!0;return m7(this,Z)}else if(q||this.outdated)this.setHeight(A.heightForGap(j,j+this.length)),this.outdated=!1;return this}toString(){return`gap(${this.length})`}}class $G extends HA{constructor(A,j,q){super(A.length+j+q.length,A.height+q.height,j|(A.outdated||q.outdated?2:0));this.left=A,this.right=q,this.size=A.size+q.size}get break(){return this.flags&1}blockAt(A,j,q,$){let B=q+this.left.height;return A<B?this.left.blockAt(A,j,q,$):this.right.blockAt(A,j,B,$+this.left.length+this.break)}lineAt(A,j,q,$,B){let G=$+this.left.height,K=B+this.left.length+this.break,J=j==a.ByHeight?A<G:A<K,Z=J?this.left.lineAt(A,j,q,$,B):this.right.lineAt(A,j,q,G,K);if(this.break||(J?Z.to<K:Z.from>K))return Z;let X=j==a.ByPosNoHeight?a.ByPosNoHeight:a.ByPos;if(J)return Z.join(this.right.lineAt(K,X,q,G,K));else return this.left.lineAt(K,X,q,$,B).join(Z)}forEachLine(A,j,q,$,B,G){let K=$+this.left.height,J=B+this.left.length+this.break;if(this.break){if(A<J)this.left.forEachLine(A,j,q,$,B,G);if(j>=J)this.right.forEachLine(A,j,q,K,J,G)}else{let Z=this.lineAt(J,a.ByPos,q,$,B);if(A<Z.from)this.left.forEachLine(A,Z.from-1,q,$,B,G);if(Z.to>=A&&Z.from<=j)G(Z);if(j>Z.to)this.right.forEachLine(Z.to+1,j,q,K,J,G)}}replace(A,j,q){let $=this.left.length+this.break;if(j<$)return this.balanced(this.left.replace(A,j,q),this.right);if(A>this.left.length)return this.balanced(this.left,this.right.replace(A-$,j-$,q));let B=[];if(A>0)this.decomposeLeft(A,B);let G=B.length;for(let K of q)B.push(K);if(A>0)pB(B,G-1);if(j<this.length){let K=B.length;this.decomposeRight(j,B),pB(B,K)}return HA.of(B)}decomposeLeft(A,j){let q=this.left.length;if(A<=q)return this.left.decomposeLeft(A,j);if(j.push(this.left),this.break){if(q++,A>=q)j.push(null)}if(A>q)this.right.decomposeLeft(A-q,j)}decomposeRight(A,j){let q=this.left.length,$=q+this.break;if(A>=$)return this.right.decomposeRight(A-$,j);if(A<q)this.left.decomposeRight(A,j);if(this.break&&A<$)j.push(null);j.push(this.right)}balanced(A,j){if(A.size>2*j.size||j.size>2*A.size)return HA.of(this.break?[A,null,j]:[A,j]);return this.left=m7(this.left,A),this.right=m7(this.right,j),this.setHeight(A.height+j.height),this.outdated=A.outdated||j.outdated,this.size=A.size+j.size,this.length=A.length+this.break+j.length,this}updateHeight(A,j=0,q=!1,$){let{left:B,right:G}=this,K=j+B.length+this.break,J=null;if($&&$.from<=j+B.length&&$.more)J=B=B.updateHeight(A,j,q,$);else B.updateHeight(A,j,q);if($&&$.from<=K+G.length&&$.more)J=G=G.updateHeight(A,K,q,$);else G.updateHeight(A,K,q);if(J)return this.balanced(B,G);return this.height=this.left.height+this.right.height,this.outdated=!1,this}toString(){return this.left+(this.break?" ":"-")+this.right}}function pB(A,j){let q,$;if(A[j]==null&&(q=A[j-1])instanceof UA&&($=A[j+1])instanceof UA)A.splice(j-1,3,new UA(q.length+1+$.length))}var C9=5;class w0{constructor(A,j){this.pos=A,this.oracle=j,this.nodes=[],this.lineStart=-1,this.lineEnd=-1,this.covering=null,this.writtenTo=A}get isCovered(){return this.covering&&this.nodes[this.nodes.length-1]==this.covering}span(A,j){if(this.lineStart>-1){let q=Math.min(j,this.lineEnd),$=this.nodes[this.nodes.length-1];if($ instanceof LA)$.length+=q-this.pos;else if(q>this.pos||!this.isCovered)this.nodes.push(new LA(q-this.pos,-1));if(this.writtenTo=q,j>q)this.nodes.push(null),this.writtenTo++,this.lineStart=-1}this.pos=j}point(A,j,q){if(A<j||q.heightRelevant){let $=q.widget?q.widget.estimatedHeight:0,B=q.widget?q.widget.lineBreaks:0;if($<0)$=this.oracle.lineHeight;let G=j-A;if(q.block)this.addBlock(new S0(G,$,q));else if(G||B||$>=C9)this.addLineDeco($,B,G)}else if(j>A)this.span(A,j);if(this.lineEnd>-1&&this.lineEnd<this.pos)this.lineEnd=this.oracle.doc.lineAt(this.pos).to}enterLine(){if(this.lineStart>-1)return;let{from:A,to:j}=this.oracle.doc.lineAt(this.pos);if(this.lineStart=A,this.lineEnd=j,this.writtenTo<A){if(this.writtenTo<A-1||this.nodes[this.nodes.length-1]==null)this.nodes.push(this.blankContent(this.writtenTo,A-1));this.nodes.push(null)}if(this.pos>A)this.nodes.push(new LA(this.pos-A,-1));this.writtenTo=this.pos}blankContent(A,j){let q=new UA(j-A);if(this.oracle.doc.lineAt(A).to==j)q.flags|=4;return q}ensureLine(){this.enterLine();let A=this.nodes.length?this.nodes[this.nodes.length-1]:null;if(A instanceof LA)return A;let j=new LA(0,-1);return this.nodes.push(j),j}addBlock(A){this.enterLine();let j=A.deco;if(j&&j.startSide>0&&!this.isCovered)this.ensureLine();if(this.nodes.push(A),this.writtenTo=this.pos=this.pos+A.length,j&&j.endSide>0)this.covering=A}addLineDeco(A,j,q){let $=this.ensureLine();$.length+=q,$.collapsed+=q,$.widgetHeight=Math.max($.widgetHeight,A),$.breaks+=j,this.writtenTo=this.pos=this.pos+q}finish(A){let j=this.nodes.length==0?null:this.nodes[this.nodes.length-1];if(this.lineStart>-1&&!(j instanceof LA)&&!this.isCovered)this.nodes.push(new LA(0,-1));else if(this.writtenTo<this.pos||j==null)this.nodes.push(this.blankContent(this.writtenTo,this.pos));let q=A;for(let $ of this.nodes){if($ instanceof LA)$.updateHeight(this.oracle,q);q+=$?$.length:1}return this.nodes}static build(A,j,q,$){let B=new w0(q,A);return h.spans(j,q,$,B,0),B.finish(q)}}function y9(A,j,q){let $=new BG;return h.compare(A,j,q,$,0),$.changes}class BG{constructor(){this.changes=[]}compareRange(){}comparePoint(A,j,q,$){if(A<j||q&&q.heightRelevant||$&&$.heightRelevant)V7(A,j,this.changes,5)}}function b9(A,j){let q=A.getBoundingClientRect(),$=A.ownerDocument,B=$.defaultView||window,G=Math.max(0,q.left),K=Math.min(B.innerWidth,q.right),J=Math.max(0,q.top),Z=Math.min(B.innerHeight,q.bottom);for(let X=A.parentNode;X&&X!=$.body;)if(X.nodeType==1){let U=X,Y=window.getComputedStyle(U);if((U.scrollHeight>U.clientHeight||U.scrollWidth>U.clientWidth)&&Y.overflow!="visible"){let Q=U.getBoundingClientRect();G=Math.max(G,Q.left),K=Math.min(K,Q.right),J=Math.max(J,Q.top),Z=Math.min(X==A.parentNode?B.innerHeight:Z,Q.bottom)}X=Y.position=="absolute"||Y.position=="fixed"?U.offsetParent:U.parentNode}else if(X.nodeType==11)X=X.host;else break;return{left:G-q.left,right:Math.max(G,K)-q.left,top:J-(q.top+j),bottom:Math.max(J,Z)-(q.top+j)}}function x9(A){let j=A.getBoundingClientRect(),q=A.ownerDocument.defaultView||window;return j.left<q.innerWidth&&j.right>0&&j.top<q.innerHeight&&j.bottom>0}function S9(A,j){let q=A.getBoundingClientRect();return{left:0,right:q.right-q.left,top:j,bottom:q.bottom-(q.top+j)}}class T7{constructor(A,j,q,$){this.from=A,this.to=j,this.size=q,this.displaySize=$}static same(A,j){if(A.length!=j.length)return!1;for(let q=0;q<A.length;q++){let $=A[q],B=j[q];if($.from!=B.from||$.to!=B.to||$.size!=B.size)return!1}return!0}draw(A,j){return C.replace({widget:new GG(this.displaySize*(j?A.scaleY:A.scaleX),j)}).range(this.from,this.to)}}class GG extends hA{constructor(A,j){super();this.size=A,this.vertical=j}eq(A){return A.size==this.size&&A.vertical==this.vertical}toDOM(){let A=document.createElement("div");if(this.vertical)A.style.height=this.size+"px";else A.style.width=this.size+"px",A.style.height="2px",A.style.display="inline-block";return A}get estimatedHeight(){return this.vertical?this.size:-1}}class z0{constructor(A){this.state=A,this.pixelViewport={left:0,right:window.innerWidth,top:0,bottom:0},this.inView=!0,this.paddingTop=0,this.paddingBottom=0,this.contentDOMWidth=0,this.contentDOMHeight=0,this.editorHeight=0,this.editorWidth=0,this.scrollTop=0,this.scrolledToBottom=!1,this.scaleX=1,this.scaleY=1,this.scrollAnchorPos=0,this.scrollAnchorHeight=-1,this.scaler=lB,this.scrollTarget=null,this.printing=!1,this.mustMeasureContent=!0,this.defaultTextDirection=d.LTR,this.visibleRanges=[],this.mustEnforceCursorAssoc=!1;let j=A.facet(C0).some((q)=>typeof q!="function"&&q.class=="cm-lineWrapping");this.heightOracle=new jG(j),this.stateDeco=A.facet(x6).filter((q)=>typeof q!="function"),this.heightMap=HA.empty().applyChanges(this.stateDeco,m.empty,this.heightOracle.setDoc(A.doc),[new xA(0,0,0,A.doc.length)]);for(let q=0;q<2;q++)if(this.viewport=this.getViewport(0,null),!this.updateForViewport())break;this.updateViewportLines(),this.lineGaps=this.ensureLineGaps([]),this.lineGapDeco=C.set(this.lineGaps.map((q)=>q.draw(this,!1))),this.computeVisibleRanges()}updateForViewport(){let A=[this.viewport],{main:j}=this.state.selection;for(let q=0;q<=1;q++){let $=q?j.head:j.anchor;if(!A.some(({from:B,to:G})=>$>=B&&$<=G)){let{from:B,to:G}=this.lineBlockAt($);A.push(new R6(B,G))}}return this.viewports=A.sort((q,$)=>q.from-$.from),this.updateScaler()}updateScaler(){let A=this.scaler;return this.scaler=this.heightMap.height<=7000000?lB:new h0(this.heightOracle,this.heightMap,this.viewports),A.eq(this.scaler)?0:2}updateViewportLines(){this.viewportLines=[],this.heightMap.forEachLine(this.viewport.from,this.viewport.to,this.heightOracle.setDoc(this.state.doc),0,0,(A)=>{this.viewportLines.push(V6(A,this.scaler))})}update(A,j=null){this.state=A.state;let q=this.stateDeco;this.stateDeco=this.state.facet(x6).filter((X)=>typeof X!="function");let $=A.changedRanges,B=xA.extendWithRanges($,y9(q,this.stateDeco,A?A.changes:jA.empty(this.state.doc.length))),G=this.heightMap.height,K=this.scrolledToBottom?null:this.scrollAnchorAt(this.scrollTop);if(fB(),this.heightMap=this.heightMap.applyChanges(this.stateDeco,A.startState.doc,this.heightOracle.setDoc(this.state.doc),B),this.heightMap.height!=G||q6)A.flags|=2;if(K)this.scrollAnchorPos=A.changes.mapPos(K.from,-1),this.scrollAnchorHeight=K.top;else this.scrollAnchorPos=-1,this.scrollAnchorHeight=G;let J=B.length?this.mapViewport(this.viewport,A.changes):this.viewport;if(j&&(j.range.head<J.from||j.range.head>J.to)||!this.viewportIsAppropriate(J))J=this.getViewport(0,j);let Z=J.from!=this.viewport.from||J.to!=this.viewport.to;if(this.viewport=J,A.flags|=this.updateForViewport(),Z||!A.changes.empty||A.flags&2)this.updateViewportLines();if(this.lineGaps.length||this.viewport.to-this.viewport.from>4000)this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps,A.changes)));if(A.flags|=this.computeVisibleRanges(A.changes),j)this.scrollTarget=j;if(!this.mustEnforceCursorAssoc&&A.selectionSet&&A.view.lineWrapping&&A.state.selection.main.empty&&A.state.selection.main.assoc&&!A.state.facet(x8))this.mustEnforceCursorAssoc=!0}measure(A){let j=A.contentDOM,q=window.getComputedStyle(j),$=this.heightOracle,B=q.whiteSpace;this.defaultTextDirection=q.direction=="rtl"?d.RTL:d.LTR;let G=this.heightOracle.mustRefreshForWrapping(B),K=j.getBoundingClientRect(),J=G||this.mustMeasureContent||this.contentDOMHeight!=K.height;this.contentDOMHeight=K.height,this.mustMeasureContent=!1;let Z=0,X=0;if(K.width&&K.height){let{scaleX:_,scaleY:H}=K8(j,K);if(_>0.005&&Math.abs(this.scaleX-_)>0.005||H>0.005&&Math.abs(this.scaleY-H)>0.005)this.scaleX=_,this.scaleY=H,Z|=16,G=J=!0}let U=(parseInt(q.paddingTop)||0)*this.scaleY,Y=(parseInt(q.paddingBottom)||0)*this.scaleY;if(this.paddingTop!=U||this.paddingBottom!=Y)this.paddingTop=U,this.paddingBottom=Y,Z|=18;if(this.editorWidth!=A.scrollDOM.clientWidth){if($.lineWrapping)J=!0;this.editorWidth=A.scrollDOM.clientWidth,Z|=16}let Q=A.scrollDOM.scrollTop*this.scaleY;if(this.scrollTop!=Q)this.scrollAnchorHeight=-1,this.scrollTop=Q;this.scrolledToBottom=U8(A.scrollDOM);let O=(this.printing?S9:b9)(j,this.paddingTop),F=O.top-this.pixelViewport.top,z=O.bottom-this.pixelViewport.bottom;this.pixelViewport=O;let I=this.pixelViewport.bottom>this.pixelViewport.top&&this.pixelViewport.right>this.pixelViewport.left;if(I!=this.inView){if(this.inView=I,I)J=!0}if(!this.inView&&!this.scrollTarget&&!x9(A.dom))return 0;let W=K.width;if(this.contentDOMWidth!=W||this.editorHeight!=A.scrollDOM.clientHeight)this.contentDOMWidth=K.width,this.editorHeight=A.scrollDOM.clientHeight,Z|=16;if(J){let _=A.docView.measureVisibleLineHeights(this.viewport);if($.mustRefreshForHeights(_))G=!0;if(G||$.lineWrapping&&Math.abs(W-this.contentDOMWidth)>$.charWidth){let{lineHeight:H,charWidth:D,textHeight:T}=A.docView.measureTextSize();if(G=H>0&&$.refresh(B,H,D,T,Math.max(5,W/D),_),G)A.docView.minWidth=0,Z|=16}if(F>0&&z>0)X=Math.max(F,z);else if(F<0&&z<0)X=Math.min(F,z);fB();for(let H of this.viewports){let D=H.from==this.viewport.from?_:A.docView.measureVisibleLineHeights(H);this.heightMap=(G?HA.empty().applyChanges(this.stateDeco,m.empty,this.heightOracle,[new xA(0,0,0,A.state.doc.length)]):this.heightMap).updateHeight($,0,G,new qG(H.from,D))}if(q6)Z|=2}let N=!this.viewportIsAppropriate(this.viewport,X)||this.scrollTarget&&(this.scrollTarget.range.head<this.viewport.from||this.scrollTarget.range.head>this.viewport.to);if(N){if(Z&2)Z|=this.updateScaler();this.viewport=this.getViewport(X,this.scrollTarget),Z|=this.updateForViewport()}if(Z&2||N)this.updateViewportLines();if(this.lineGaps.length||this.viewport.to-this.viewport.from>4000)this.updateLineGaps(this.ensureLineGaps(G?[]:this.lineGaps,A));if(Z|=this.computeVisibleRanges(),this.mustEnforceCursorAssoc)this.mustEnforceCursorAssoc=!1,A.docView.enforceCursorAssoc();return Z}get visibleTop(){return this.scaler.fromDOM(this.pixelViewport.top)}get visibleBottom(){return this.scaler.fromDOM(this.pixelViewport.bottom)}getViewport(A,j){let q=0.5-Math.max(-0.5,Math.min(0.5,A/1000/2)),$=this.heightMap,B=this.heightOracle,{visibleTop:G,visibleBottom:K}=this,J=new R6($.lineAt(G-q*1000,a.ByHeight,B,0,0).from,$.lineAt(K+(1-q)*1000,a.ByHeight,B,0,0).to);if(j){let{head:Z}=j.range;if(Z<J.from||Z>J.to){let X=Math.min(this.editorHeight,this.pixelViewport.bottom-this.pixelViewport.top),U=$.lineAt(Z,a.ByPos,B,0,0),Y;if(j.y=="center")Y=(U.top+U.bottom)/2-X/2;else if(j.y=="start"||j.y=="nearest"&&Z<J.from)Y=U.top;else Y=U.bottom-X;J=new R6($.lineAt(Y-500,a.ByHeight,B,0,0).from,$.lineAt(Y+X+500,a.ByHeight,B,0,0).to)}}return J}mapViewport(A,j){let q=j.mapPos(A.from,-1),$=j.mapPos(A.to,1);return new R6(this.heightMap.lineAt(q,a.ByPos,this.heightOracle,0,0).from,this.heightMap.lineAt($,a.ByPos,this.heightOracle,0,0).to)}viewportIsAppropriate({from:A,to:j},q=0){if(!this.inView)return!0;let{top:$}=this.heightMap.lineAt(A,a.ByPos,this.heightOracle,0,0),{bottom:B}=this.heightMap.lineAt(j,a.ByPos,this.heightOracle,0,0),{visibleTop:G,visibleBottom:K}=this;return(A==0||$<=G-Math.max(10,Math.min(-q,250)))&&(j==this.state.doc.length||B>=K+Math.max(10,Math.min(q,250)))&&($>G-2000&&B<K+2000)}mapLineGaps(A,j){if(!A.length||j.empty)return A;let q=[];for(let $ of A)if(!j.touchesRange($.from,$.to))q.push(new T7(j.mapPos($.from),j.mapPos($.to),$.size,$.displaySize));return q}ensureLineGaps(A,j){let q=this.heightOracle.lineWrapping,$=q?1e4:2000,B=$>>1,G=$<<1;if(this.defaultTextDirection!=d.LTR&&!q)return[];let K=[],J=(X,U,Y,Q)=>{if(U-X<B)return;let O=this.state.selection.main,F=[O.from];if(!O.empty)F.push(O.to);for(let I of F)if(I>X&&I<U){J(X,I-10,Y,Q),J(I+10,U,Y,Q);return}let z=h9(A,(I)=>I.from>=Y.from&&I.to<=Y.to&&Math.abs(I.from-X)<B&&Math.abs(I.to-U)<B&&!F.some((W)=>I.from<W&&I.to>W));if(!z){if(U<Y.to&&j&&q&&j.visibleRanges.some((N)=>N.from<=U&&N.to>=U)){let N=j.moveToLineBoundary(E.cursor(U),!1,!0).head;if(N>X)U=N}let I=this.gapSize(Y,X,U,Q),W=q||I<2000000?I:2000000;z=new T7(X,U,I,W)}K.push(z)},Z=(X)=>{if(X.length<G||X.type!=EA.Text)return;let U=w9(X.from,X.to,this.stateDeco);if(U.total<G)return;let Y=this.scrollTarget?this.scrollTarget.range.head:null,Q,O;if(q){let F=$/this.heightOracle.lineLength*this.heightOracle.lineHeight,z,I;if(Y!=null){let W=_7(U,Y),N=((this.visibleBottom-this.visibleTop)/2+F)/X.height;z=W-N,I=W+N}else z=(this.visibleTop-X.top-F)/X.height,I=(this.visibleBottom-X.top+F)/X.height;Q=H7(U,z),O=H7(U,I)}else{let F=U.total*this.heightOracle.charWidth,z=$*this.heightOracle.charWidth,I=0;if(F>2000000){for(let D of A)if(D.from>=X.from&&D.from<X.to&&D.size!=D.displaySize&&D.from*this.heightOracle.charWidth+I<this.pixelViewport.left)I=D.size-D.displaySize}let W=this.pixelViewport.left+I,N=this.pixelViewport.right+I,_,H;if(Y!=null){let D=_7(U,Y),T=((N-W)/2+z)/F;_=D-T,H=D+T}else _=(W-z)/F,H=(N+z)/F;Q=H7(U,_),O=H7(U,H)}if(Q>X.from)J(X.from,Q,X,U);if(O<X.to)J(O,X.to,X,U)};for(let X of this.viewportLines)if(Array.isArray(X.type))X.type.forEach(Z);else Z(X);return K}gapSize(A,j,q,$){let B=_7($,q)-_7($,j);if(this.heightOracle.lineWrapping)return A.height*B;else return $.total*this.heightOracle.charWidth*B}updateLineGaps(A){if(!T7.same(A,this.lineGaps))this.lineGaps=A,this.lineGapDeco=C.set(A.map((j)=>j.draw(this,this.heightOracle.lineWrapping)))}computeVisibleRanges(A){let j=this.stateDeco;if(this.lineGaps.length)j=j.concat(this.lineGapDeco);let q=[];h.spans(j,this.viewport.from,this.viewport.to,{span(B,G){q.push({from:B,to:G})},point(){}},20);let $=0;if(q.length!=this.visibleRanges.length)$=12;else for(let B=0;B<q.length&&!($&8);B++){let G=this.visibleRanges[B],K=q[B];if(G.from!=K.from||G.to!=K.to){if($|=4,!(A&&A.mapPos(G.from,-1)==K.from&&A.mapPos(G.to,1)==K.to))$|=8}}return this.visibleRanges=q,$}lineBlockAt(A){return A>=this.viewport.from&&A<=this.viewport.to&&this.viewportLines.find((j)=>j.from<=A&&j.to>=A)||V6(this.heightMap.lineAt(A,a.ByPos,this.heightOracle,0,0),this.scaler)}lineBlockAtHeight(A){return A>=this.viewportLines[0].top&&A<=this.viewportLines[this.viewportLines.length-1].bottom&&this.viewportLines.find((j)=>j.top<=A&&j.bottom>=A)||V6(this.heightMap.lineAt(this.scaler.fromDOM(A),a.ByHeight,this.heightOracle,0,0),this.scaler)}scrollAnchorAt(A){let j=this.lineBlockAtHeight(A+8);return j.from>=this.viewport.from||this.viewportLines[0].top-A>200?j:this.viewportLines[0]}elementAtHeight(A){return V6(this.heightMap.blockAt(this.scaler.fromDOM(A),this.heightOracle,0,0),this.scaler)}get docHeight(){return this.scaler.toDOM(this.heightMap.height)}get contentHeight(){return this.docHeight+this.paddingTop+this.paddingBottom}}class R6{constructor(A,j){this.from=A,this.to=j}}function w9(A,j,q){let $=[],B=A,G=0;if(h.spans(q,A,j,{span(){},point(K,J){if(K>B)$.push({from:B,to:K}),G+=K-B;B=J}},20),B<j)$.push({from:B,to:j}),G+=j-B;return{total:G,ranges:$}}function H7({total:A,ranges:j},q){if(q<=0)return j[0].from;if(q>=1)return j[j.length-1].to;let $=Math.floor(A*q);for(let B=0;;B++){let{from:G,to:K}=j[B],J=K-G;if($<=J)return G+$;$-=J}}function _7(A,j){let q=0;for(let{from:$,to:B}of A.ranges){if(j<=B){q+=j-$;break}q+=B-$}return q/A.total}function h9(A,j){for(let q of A)if(j(q))return q;return}var lB={toDOM(A){return A},fromDOM(A){return A},scale:1,eq(A){return A==this}};class h0{constructor(A,j,q){let $=0,B=0,G=0;this.viewports=q.map(({from:K,to:J})=>{let Z=j.lineAt(K,a.ByPos,A,0,0).top,X=j.lineAt(J,a.ByPos,A,0,0).bottom;return $+=X-Z,{from:K,to:J,top:Z,bottom:X,domTop:0,domBottom:0}}),this.scale=(7000000-$)/(j.height-$);for(let K of this.viewports)K.domTop=G+(K.top-B)*this.scale,G=K.domBottom=K.domTop+(K.bottom-K.top),B=K.bottom}toDOM(A){for(let j=0,q=0,$=0;;j++){let B=j<this.viewports.length?this.viewports[j]:null;if(!B||A<B.top)return $+(A-q)*this.scale;if(A<=B.bottom)return B.domTop+(A-B.top);q=B.bottom,$=B.domBottom}}fromDOM(A){for(let j=0,q=0,$=0;;j++){let B=j<this.viewports.length?this.viewports[j]:null;if(!B||A<B.domTop)return q+(A-$)/this.scale;if(A<=B.domBottom)return B.top+(A-B.domTop);q=B.bottom,$=B.domBottom}}eq(A){if(!(A instanceof h0))return!1;return this.scale==A.scale&&this.viewports.length==A.viewports.length&&this.viewports.every((j,q)=>j.from==A.viewports[q].from&&j.to==A.viewports[q].to)}}function V6(A,j){if(j.scale==1)return A;let q=j.toDOM(A.top),$=j.toDOM(A.bottom);return new qj(A.from,A.length,q,$-q,Array.isArray(A._content)?A._content.map((B)=>V6(B,j)):A._content)}var N7=k.define({combine:(A)=>A.join(" ")}),I0=k.define({combine:(A)=>A.indexOf(!0)>-1}),W0=dA.newName(),KG=dA.newName(),JG=dA.newName(),ZG={"&light":"."+KG,"&dark":"."+JG};function E0(A,j,q){return new dA(j,{finish($){return/&/.test($)?$.replace(/&\w*/,(B)=>{if(B=="&")return A;if(!q||!q[B])throw new RangeError(`Unsupported selector: ${B}`);return q[B]}):A+" "+$}})}var v9=E0("."+W0,{"&":{position:"relative !important",boxSizing:"border-box","&.cm-focused":{outline:"1px dotted #212121"},display:"flex !important",flexDirection:"column"},".cm-scroller":{display:"flex !important",alignItems:"flex-start !important",fontFamily:"monospace",lineHeight:1.4,height:"100%",overflowX:"auto",position:"relative",zIndex:0,overflowAnchor:"none"},".cm-content":{margin:0,flexGrow:2,flexShrink:0,display:"block",whiteSpace:"pre",wordWrap:"normal",boxSizing:"border-box",minHeight:"100%",padding:"4px 0",outline:"none","&[contenteditable=true]":{WebkitUserModify:"read-write-plaintext-only"}},".cm-lineWrapping":{whiteSpace_fallback:"pre-wrap",whiteSpace:"break-spaces",wordBreak:"break-word",overflowWrap:"anywhere",flexShrink:1},"&light .cm-content":{caretColor:"black"},"&dark .cm-content":{caretColor:"white"},".cm-line":{display:"block",padding:"0 2px 0 6px"},".cm-layer":{position:"absolute",left:0,top:0,contain:"size style","& > *":{position:"absolute"}},"&light .cm-selectionBackground":{background:"#d9d9d9"},"&dark .cm-selectionBackground":{background:"#222"},"&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground":{background:"#d7d4f0"},"&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground":{background:"#233"},".cm-cursorLayer":{pointerEvents:"none"},"&.cm-focused > .cm-scroller > .cm-cursorLayer":{animation:"steps(1) cm-blink 1.2s infinite"},"@keyframes cm-blink":{"0%":{},"50%":{opacity:0},"100%":{}},"@keyframes cm-blink2":{"0%":{},"50%":{opacity:0},"100%":{}},".cm-cursor, .cm-dropCursor":{borderLeft:"1.2px solid black",marginLeft:"-0.6px",pointerEvents:"none"},".cm-cursor":{display:"none"},"&dark .cm-cursor":{borderLeftColor:"#ddd"},".cm-dropCursor":{position:"absolute"},"&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor":{display:"block"},".cm-iso":{unicodeBidi:"isolate"},".cm-announced":{position:"fixed",top:"-10000px"},"@media print":{".cm-announced":{display:"none"}},"&light .cm-activeLine":{backgroundColor:"#cceeff44"},"&dark .cm-activeLine":{backgroundColor:"#99eeff33"},"&light .cm-specialChar":{color:"red"},"&dark .cm-specialChar":{color:"#f78"},".cm-gutters":{flexShrink:0,display:"flex",height:"100%",boxSizing:"border-box",zIndex:200},".cm-gutters-before":{insetInlineStart:0},".cm-gutters-after":{insetInlineEnd:0},"&light .cm-gutters":{backgroundColor:"#f5f5f5",color:"#6c6c6c",border:"0px solid #ddd","&.cm-gutters-before":{borderRightWidth:"1px"},"&.cm-gutters-after":{borderLeftWidth:"1px"}},"&dark .cm-gutters":{backgroundColor:"#333338",color:"#ccc"},".cm-gutter":{display:"flex !important",flexDirection:"column",flexShrink:0,boxSizing:"border-box",minHeight:"100%",overflow:"hidden"},".cm-gutterElement":{boxSizing:"border-box"},".cm-lineNumbers .cm-gutterElement":{padding:"0 3px 0 5px",minWidth:"20px",textAlign:"right",whiteSpace:"nowrap"},"&light .cm-activeLineGutter":{backgroundColor:"#e2f2ff"},"&dark .cm-activeLineGutter":{backgroundColor:"#222227"},".cm-panels":{boxSizing:"border-box",position:"sticky",left:0,right:0,zIndex:300},"&light .cm-panels":{backgroundColor:"#f5f5f5",color:"black"},"&light .cm-panels-top":{borderBottom:"1px solid #ddd"},"&light .cm-panels-bottom":{borderTop:"1px solid #ddd"},"&dark .cm-panels":{backgroundColor:"#333338",color:"white"},".cm-dialog":{padding:"2px 19px 4px 6px",position:"relative","& label":{fontSize:"80%"}},".cm-dialog-close":{position:"absolute",top:"3px",right:"4px",backgroundColor:"inherit",border:"none",font:"inherit",fontSize:"14px",padding:"0"},".cm-tab":{display:"inline-block",overflow:"hidden",verticalAlign:"bottom"},".cm-widgetBuffer":{verticalAlign:"text-top",height:"1em",width:0,display:"inline"},".cm-placeholder":{color:"#888",display:"inline-block",verticalAlign:"top",userSelect:"none"},".cm-highlightSpace":{backgroundImage:"radial-gradient(circle at 50% 55%, #aaa 20%, transparent 5%)",backgroundPosition:"center"},".cm-highlightTab":{backgroundImage:`url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,backgroundSize:"auto 100%",backgroundPosition:"right 90%",backgroundRepeat:"no-repeat"},".cm-trailingSpace":{backgroundColor:"#ff332255"},".cm-button":{verticalAlign:"middle",color:"inherit",fontSize:"70%",padding:".2em 1em",borderRadius:"1px"},"&light .cm-button":{backgroundImage:"linear-gradient(#eff1f5, #d9d9df)",border:"1px solid #888","&:active":{backgroundImage:"linear-gradient(#b4b4b4, #d0d3d6)"}},"&dark .cm-button":{backgroundImage:"linear-gradient(#393939, #111)",border:"1px solid #888","&:active":{backgroundImage:"linear-gradient(#111, #333)"}},".cm-textfield":{verticalAlign:"middle",color:"inherit",fontSize:"70%",border:"1px solid silver",padding:".2em .5em"},"&light .cm-textfield":{backgroundColor:"white"},"&dark .cm-textfield":{border:"1px solid #555",backgroundColor:"inherit"}},ZG),m9={childList:!0,characterData:!0,subtree:!0,attributes:!0,characterDataOldValue:!0},rq=L.ie&&L.ie_version<=11;class XG{constructor(A){if(this.view=A,this.active=!1,this.editContext=null,this.selectionRange=new J8,this.selectionChanged=!1,this.delayedFlush=-1,this.resizeTimeout=-1,this.queue=[],this.delayedAndroidKey=null,this.flushingAndroidKey=-1,this.lastChange=0,this.scrollTargets=[],this.intersection=null,this.resizeScroll=null,this.intersecting=!1,this.gapIntersection=null,this.gaps=[],this.printQuery=null,this.parentCheck=-1,this.dom=A.contentDOM,this.observer=new MutationObserver((j)=>{for(let q of j)this.queue.push(q);if((L.ie&&L.ie_version<=11||L.ios&&A.composing)&&j.some((q)=>q.type=="childList"&&q.removedNodes.length||q.type=="characterData"&&q.oldValue.length>q.target.nodeValue.length))this.flushSoon();else this.flush()}),window.EditContext&&L.android&&A.constructor.EDIT_CONTEXT!==!1&&!(L.chrome&&L.chrome_version<126)){if(this.editContext=new UG(A),A.state.facet(Qj))A.contentDOM.editContext=this.editContext.editContext}if(rq)this.onCharData=(j)=>{this.queue.push({target:j.target,type:"characterData",oldValue:j.prevValue}),this.flushSoon()};if(this.onSelectionChange=this.onSelectionChange.bind(this),this.onResize=this.onResize.bind(this),this.onPrint=this.onPrint.bind(this),this.onScroll=this.onScroll.bind(this),window.matchMedia)this.printQuery=window.matchMedia("print");if(typeof ResizeObserver=="function")this.resizeScroll=new ResizeObserver(()=>{var j;if(((j=this.view.docView)===null||j===void 0?void 0:j.lastUpdate)<Date.now()-75)this.onResize()}),this.resizeScroll.observe(A.scrollDOM);if(this.addWindowListeners(this.win=A.win),this.start(),typeof IntersectionObserver=="function")this.intersection=new IntersectionObserver((j)=>{if(this.parentCheck<0)this.parentCheck=setTimeout(this.listenForScroll.bind(this),1000);if(j.length>0&&j[j.length-1].intersectionRatio>0!=this.intersecting){if(this.intersecting=!this.intersecting,this.intersecting!=this.view.inView)this.onScrollChanged(document.createEvent("Event"))}},{threshold:[0,0.001]}),this.intersection.observe(this.dom),this.gapIntersection=new IntersectionObserver((j)=>{if(j.length>0&&j[j.length-1].intersectionRatio>0)this.onScrollChanged(document.createEvent("Event"))},{});this.listenForScroll(),this.readSelectionRange()}onScrollChanged(A){if(this.view.inputState.runHandlers("scroll",A),this.intersecting)this.view.measure()}onScroll(A){if(this.intersecting)this.flush(!1);if(this.editContext)this.view.requestMeasure(this.editContext.measureReq);this.onScrollChanged(A)}onResize(){if(this.resizeTimeout<0)this.resizeTimeout=setTimeout(()=>{this.resizeTimeout=-1,this.view.requestMeasure()},50)}onPrint(A){if((A.type=="change"||!A.type)&&!A.matches)return;this.view.viewState.printing=!0,this.view.measure(),setTimeout(()=>{this.view.viewState.printing=!1,this.view.requestMeasure()},500)}updateGaps(A){if(this.gapIntersection&&(A.length!=this.gaps.length||this.gaps.some((j,q)=>j!=A[q]))){this.gapIntersection.disconnect();for(let j of A)this.gapIntersection.observe(j);this.gaps=A}}onSelectionChange(A){let j=this.selectionChanged;if(!this.readSelectionRange()||this.delayedAndroidKey)return;let{view:q}=this,$=this.selectionRange;if(q.state.facet(Qj)?q.root.activeElement!=this.dom:!R7(this.dom,$))return;let B=$.anchorNode&&q.docView.nearest($.anchorNode);if(B&&B.ignoreEvent(A)){if(!j)this.selectionChanged=!1;return}if((L.ie&&L.ie_version<=11||L.android&&L.chrome)&&!q.state.selection.main.empty&&$.focusNode&&P6($.focusNode,$.focusOffset,$.anchorNode,$.anchorOffset))this.flushSoon();else this.flush(!1)}readSelectionRange(){let{view:A}=this,j=y6(A.root);if(!j)return!1;let q=L.safari&&A.root.nodeType==11&&A.root.activeElement==this.dom&&u9(this.view,j)||j;if(!q||this.selectionRange.eq(q))return!1;let $=R7(this.dom,q);if($&&!this.selectionChanged&&A.inputState.lastFocusTime>Date.now()-200&&A.inputState.lastTouchTime<Date.now()-300&&b4(this.dom,q))return this.view.inputState.lastFocusTime=0,A.docView.updateSelection(),!1;if(this.selectionRange.setRange(q),$)this.selectionChanged=!0;return!0}setSelectionRange(A,j){this.selectionRange.set(A.node,A.offset,j.node,j.offset),this.selectionChanged=!1}clearSelectionRange(){this.selectionRange.set(null,0,null,0)}listenForScroll(){this.parentCheck=-1;let A=0,j=null;for(let q=this.dom;q;)if(q.nodeType==1){if(!j&&A<this.scrollTargets.length&&this.scrollTargets[A]==q)A++;else if(!j)j=this.scrollTargets.slice(0,A);if(j)j.push(q);q=q.assignedSlot||q.parentNode}else if(q.nodeType==11)q=q.host;else break;if(A<this.scrollTargets.length&&!j)j=this.scrollTargets.slice(0,A);if(j){for(let q of this.scrollTargets)q.removeEventListener("scroll",this.onScroll);for(let q of this.scrollTargets=j)q.addEventListener("scroll",this.onScroll)}}ignore(A){if(!this.active)return A();try{return this.stop(),A()}finally{this.start(),this.clear()}}start(){if(this.active)return;if(this.observer.observe(this.dom,m9),rq)this.dom.addEventListener("DOMCharacterDataModified",this.onCharData);this.active=!0}stop(){if(!this.active)return;if(this.active=!1,this.observer.disconnect(),rq)this.dom.removeEventListener("DOMCharacterDataModified",this.onCharData)}clear(){this.processRecords(),this.queue.length=0,this.selectionChanged=!1}delayAndroidKey(A,j){var q;if(!this.delayedAndroidKey){let $=()=>{let B=this.delayedAndroidKey;if(B){if(this.clearDelayedAndroidKey(),this.view.inputState.lastKeyCode=B.keyCode,this.view.inputState.lastKeyTime=Date.now(),!this.flush()&&B.force)ej(this.dom,B.key,B.keyCode)}};this.flushingAndroidKey=this.view.win.requestAnimationFrame($)}if(!this.delayedAndroidKey||A=="Enter")this.delayedAndroidKey={key:A,keyCode:j,force:this.lastChange<Date.now()-50||!!((q=this.delayedAndroidKey)===null||q===void 0?void 0:q.force)}}clearDelayedAndroidKey(){this.win.cancelAnimationFrame(this.flushingAndroidKey),this.delayedAndroidKey=null,this.flushingAndroidKey=-1}flushSoon(){if(this.delayedFlush<0)this.delayedFlush=this.view.win.requestAnimationFrame(()=>{this.delayedFlush=-1,this.flush()})}forceFlush(){if(this.delayedFlush>=0)this.view.win.cancelAnimationFrame(this.delayedFlush),this.delayedFlush=-1;this.flush()}pendingRecords(){for(let A of this.observer.takeRecords())this.queue.push(A);return this.queue}processRecords(){let A=this.pendingRecords();if(A.length)this.queue=[];let j=-1,q=-1,$=!1;for(let B of A){let G=this.readMutation(B);if(!G)continue;if(G.typeOver)$=!0;if(j==-1)({from:j,to:q}=G);else j=Math.min(G.from,j),q=Math.max(G.to,q)}return{from:j,to:q,typeOver:$}}readChange(){let{from:A,to:j,typeOver:q}=this.processRecords(),$=this.selectionChanged&&R7(this.dom,this.selectionRange);if(A<0&&!$)return null;if(A>-1)this.lastChange=Date.now();this.view.inputState.lastFocusTime=0,this.selectionChanged=!1;let B=new l8(this.view,A,j,q);return this.view.docView.domChanged={newSel:B.newSel?B.newSel.main:null},B}flush(A=!0){if(this.delayedFlush>=0||this.delayedAndroidKey)return!1;if(A)this.readSelectionRange();let j=this.readChange();if(!j)return this.view.requestMeasure(),!1;let q=this.view.state,$=d8(this.view,j);if(this.view.state==q&&(j.domChanged||j.newSel&&!j.newSel.main.eq(this.view.state.selection.main)))this.view.update([]);return $}readMutation(A){let j=this.view.docView.nearest(A.target);if(!j||j.ignoreMutation(A))return null;if(j.markDirty(A.type=="attributes"),A.type=="attributes")j.flags|=4;if(A.type=="childList"){let q=dB(j,A.previousSibling||A.target.previousSibling,-1),$=dB(j,A.nextSibling||A.target.nextSibling,1);return{from:q?j.posAfter(q):j.posAtStart,to:$?j.posBefore($):j.posAtEnd,typeOver:!1}}else if(A.type=="characterData")return{from:j.posAtStart,to:j.posAtEnd,typeOver:A.target.nodeValue==A.oldValue};else return null}setWindow(A){if(A!=this.win)this.removeWindowListeners(this.win),this.win=A,this.addWindowListeners(this.win)}addWindowListeners(A){if(A.addEventListener("resize",this.onResize),this.printQuery)if(this.printQuery.addEventListener)this.printQuery.addEventListener("change",this.onPrint);else this.printQuery.addListener(this.onPrint);else A.addEventListener("beforeprint",this.onPrint);A.addEventListener("scroll",this.onScroll),A.document.addEventListener("selectionchange",this.onSelectionChange)}removeWindowListeners(A){if(A.removeEventListener("scroll",this.onScroll),A.removeEventListener("resize",this.onResize),this.printQuery)if(this.printQuery.removeEventListener)this.printQuery.removeEventListener("change",this.onPrint);else this.printQuery.removeListener(this.onPrint);else A.removeEventListener("beforeprint",this.onPrint);A.document.removeEventListener("selectionchange",this.onSelectionChange)}update(A){if(this.editContext){if(this.editContext.update(A),A.startState.facet(Qj)!=A.state.facet(Qj))A.view.contentDOM.editContext=A.state.facet(Qj)?this.editContext.editContext:null}}destroy(){var A,j,q;this.stop(),(A=this.intersection)===null||A===void 0||A.disconnect(),(j=this.gapIntersection)===null||j===void 0||j.disconnect(),(q=this.resizeScroll)===null||q===void 0||q.disconnect();for(let $ of this.scrollTargets)$.removeEventListener("scroll",this.onScroll);if(this.removeWindowListeners(this.win),clearTimeout(this.parentCheck),clearTimeout(this.resizeTimeout),this.win.cancelAnimationFrame(this.delayedFlush),this.win.cancelAnimationFrame(this.flushingAndroidKey),this.editContext)this.view.contentDOM.editContext=null,this.editContext.destroy()}}function dB(A,j,q){while(j){let $=i.get(j);if($&&$.parent==A)return $;let B=j.parentNode;j=B!=A.dom?B:q>0?j.nextSibling:j.previousSibling}return null}function cB(A,j){let{startContainer:q,startOffset:$,endContainer:B,endOffset:G}=j,K=A.docView.domAtPos(A.state.selection.main.anchor);if(P6(K.node,K.offset,B,G))[q,$,B,G]=[B,G,q,$];return{anchorNode:q,anchorOffset:$,focusNode:B,focusOffset:G}}function u9(A,j){if(j.getComposedRanges){let B=j.getComposedRanges(A.root)[0];if(B)return cB(A,B)}let q=null;function $(B){B.preventDefault(),B.stopImmediatePropagation(),q=B.getTargetRanges()[0]}return A.contentDOM.addEventListener("beforeinput",$,!0),A.dom.ownerDocument.execCommand("indent"),A.contentDOM.removeEventListener("beforeinput",$,!0),q?cB(A,q):null}class UG{constructor(A){this.from=0,this.to=0,this.pendingContextChange=null,this.handlers=Object.create(null),this.composing=null,this.resetRange(A.state);let j=this.editContext=new window.EditContext({text:A.state.doc.sliceString(this.from,this.to),selectionStart:this.toContextPos(Math.max(this.from,Math.min(this.to,A.state.selection.main.anchor))),selectionEnd:this.toContextPos(A.state.selection.main.head)});this.handlers.textupdate=(q)=>{let $=A.state.selection.main,{anchor:B,head:G}=$,K=this.toEditorPos(q.updateRangeStart),J=this.toEditorPos(q.updateRangeEnd);if(A.inputState.composing>=0&&!this.composing)this.composing={contextBase:q.updateRangeStart,editorBase:K,drifted:!1};let Z={from:K,to:J,insert:m.of(q.text.split(`
`))};if(Z.from==this.from&&B<this.from)Z.from=B;else if(Z.to==this.to&&B>this.to)Z.to=B;if(Z.from==Z.to&&!Z.insert.length){let X=E.single(this.toEditorPos(q.selectionStart),this.toEditorPos(q.selectionEnd));if(!X.main.eq($))A.dispatch({selection:X,userEvent:"select"});return}if((L.mac||L.android)&&Z.from==G-1&&/^\. ?$/.test(q.text)&&A.contentDOM.getAttribute("autocorrect")=="off")Z={from:K,to:J,insert:m.of([q.text.replace("."," ")])};if(this.pendingContextChange=Z,!A.state.readOnly){let X=this.to-this.from+(Z.to-Z.from+Z.insert.length);x0(A,Z,E.single(this.toEditorPos(q.selectionStart,X),this.toEditorPos(q.selectionEnd,X)))}if(this.pendingContextChange)this.revertPending(A.state),this.setSelection(A.state)},this.handlers.characterboundsupdate=(q)=>{let $=[],B=null;for(let G=this.toEditorPos(q.rangeStart),K=this.toEditorPos(q.rangeEnd);G<K;G++){let J=A.coordsForChar(G);B=J&&new DOMRect(J.left,J.top,J.right-J.left,J.bottom-J.top)||B||new DOMRect,$.push(B)}j.updateCharacterBounds(q.rangeStart,$)},this.handlers.textformatupdate=(q)=>{let $=[];for(let B of q.getTextFormats()){let{underlineStyle:G,underlineThickness:K}=B;if(G!="None"&&K!="None"){let J=this.toEditorPos(B.rangeStart),Z=this.toEditorPos(B.rangeEnd);if(J<Z){let X=`text-decoration: underline ${G=="Dashed"?"dashed ":G=="Squiggle"?"wavy ":""}${K=="Thin"?1:2}px`;$.push(C.mark({attributes:{style:X}}).range(J,Z))}}}A.dispatch({effects:w8.of(C.set($))})},this.handlers.compositionstart=()=>{if(A.inputState.composing<0)A.inputState.composing=0,A.inputState.compositionFirstChange=!0},this.handlers.compositionend=()=>{if(A.inputState.composing=-1,A.inputState.compositionFirstChange=null,this.composing){let{drifted:q}=this.composing;if(this.composing=null,q)this.reset(A.state)}};for(let q in this.handlers)j.addEventListener(q,this.handlers[q]);this.measureReq={read:(q)=>{this.editContext.updateControlBounds(q.contentDOM.getBoundingClientRect());let $=y6(q.root);if($&&$.rangeCount)this.editContext.updateSelectionBounds($.getRangeAt(0).getBoundingClientRect())}}}applyEdits(A){let j=0,q=!1,$=this.pendingContextChange;if(A.changes.iterChanges((B,G,K,J,Z)=>{if(q)return;let X=Z.length-(G-B);if($&&G>=$.to)if($.from==B&&$.to==G&&$.insert.eq(Z)){$=this.pendingContextChange=null,j+=X,this.to+=X;return}else $=null,this.revertPending(A.state);if(B+=j,G+=j,G<=this.from)this.from+=X,this.to+=X;else if(B<this.to){if(B<this.from||G>this.to||this.to-this.from+Z.length>30000){q=!0;return}this.editContext.updateText(this.toContextPos(B),this.toContextPos(G),Z.toString()),this.to+=X}j+=X}),$&&!q)this.revertPending(A.state);return!q}update(A){let j=this.pendingContextChange,q=A.startState.selection.main;if(this.composing&&(this.composing.drifted||!A.changes.touchesRange(q.from,q.to)&&A.transactions.some(($)=>!$.isUserEvent("input.type")&&$.changes.touchesRange(this.from,this.to))))this.composing.drifted=!0,this.composing.editorBase=A.changes.mapPos(this.composing.editorBase);else if(!this.applyEdits(A)||!this.rangeIsValid(A.state))this.pendingContextChange=null,this.reset(A.state);else if(A.docChanged||A.selectionSet||j)this.setSelection(A.state);if(A.geometryChanged||A.docChanged||A.selectionSet)A.view.requestMeasure(this.measureReq)}resetRange(A){let{head:j}=A.selection.main;this.from=Math.max(0,j-1e4),this.to=Math.min(A.doc.length,j+1e4)}reset(A){this.resetRange(A),this.editContext.updateText(0,this.editContext.text.length,A.doc.sliceString(this.from,this.to)),this.setSelection(A)}revertPending(A){let j=this.pendingContextChange;this.pendingContextChange=null,this.editContext.updateText(this.toContextPos(j.from),this.toContextPos(j.from+j.insert.length),A.doc.sliceString(j.from,j.to))}setSelection(A){let{main:j}=A.selection,q=this.toContextPos(Math.max(this.from,Math.min(this.to,j.anchor))),$=this.toContextPos(j.head);if(this.editContext.selectionStart!=q||this.editContext.selectionEnd!=$)this.editContext.updateSelection(q,$)}rangeIsValid(A){let{head:j}=A.selection.main;return!(this.from>0&&j-this.from<500||this.to<A.doc.length&&this.to-j<500||this.to-this.from>30000)}toEditorPos(A,j=this.to-this.from){A=Math.min(A,j);let q=this.composing;return q&&q.drifted?q.editorBase+(A-q.contextBase):A+this.from}toContextPos(A){let j=this.composing;return j&&j.drifted?j.contextBase+(A-j.editorBase):A-this.from}destroy(){for(let A in this.handlers)this.editContext.removeEventListener(A,this.handlers[A])}}class R{get state(){return this.viewState.state}get viewport(){return this.viewState.viewport}get visibleRanges(){return this.viewState.visibleRanges}get inView(){return this.viewState.inView}get composing(){return!!this.inputState&&this.inputState.composing>0}get compositionStarted(){return!!this.inputState&&this.inputState.composing>=0}get root(){return this._root}get win(){return this.dom.ownerDocument.defaultView||window}constructor(A={}){var j;if(this.plugins=[],this.pluginMap=new Map,this.editorAttrs={},this.contentAttrs={},this.bidiCache=[],this.destroyed=!1,this.updateState=2,this.measureScheduled=-1,this.measureRequests=[],this.contentDOM=document.createElement("div"),this.scrollDOM=document.createElement("div"),this.scrollDOM.tabIndex=-1,this.scrollDOM.className="cm-scroller",this.scrollDOM.appendChild(this.contentDOM),this.announceDOM=document.createElement("div"),this.announceDOM.className="cm-announced",this.announceDOM.setAttribute("aria-live","polite"),this.dom=document.createElement("div"),this.dom.appendChild(this.announceDOM),this.dom.appendChild(this.scrollDOM),A.parent)A.parent.appendChild(this.dom);let{dispatch:q}=A;if(this.dispatchTransactions=A.dispatchTransactions||q&&(($)=>$.forEach((B)=>q(B,this)))||(($)=>this.update($)),this.dispatch=this.dispatch.bind(this),this._root=A.root||y4(A.parent)||document,this.viewState=new z0(A.state||v.create(A)),A.scrollTo&&A.scrollTo.is(I7))this.viewState.scrollTarget=A.scrollTo.value.clip(this.viewState.state);this.plugins=this.state.facet(oj).map(($)=>new k7($));for(let $ of this.plugins)$.update(this);if(this.observer=new XG(this),this.inputState=new c8(this),this.inputState.ensureHandlers(this.plugins),this.docView=new U0(this),this.mountStyles(),this.updateAttrs(),this.updateState=0,this.requestMeasure(),(j=document.fonts)===null||j===void 0?void 0:j.ready)document.fonts.ready.then(()=>this.requestMeasure())}dispatch(...A){let j=A.length==1&&A[0]instanceof e?A:A.length==1&&Array.isArray(A[0])?A[0]:[this.state.update(...A)];this.dispatchTransactions(j,this)}update(A){if(this.updateState!=0)throw new Error("Calls to EditorView.update are not allowed while an update is in progress");let j=!1,q=!1,$,B=this.state;for(let Y of A){if(Y.startState!=B)throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");B=Y.state}if(this.destroyed){this.viewState.state=B;return}let G=this.hasFocus,K=0,J=null;if(A.some((Y)=>Y.annotation(t8)))this.inputState.notifiedFocused=G,K=1;else if(G!=this.inputState.notifiedFocused){if(this.inputState.notifiedFocused=G,J=e8(B,G),!J)K=1}let Z=this.observer.delayedAndroidKey,X=null;if(Z){if(this.observer.clearDelayedAndroidKey(),X=this.observer.readChange(),X&&!this.state.doc.eq(B.doc)||!this.state.selection.eq(B.selection))X=null}else this.observer.clear();if(B.facet(v.phrases)!=this.state.facet(v.phrases))return this.setState(B);$=v7.create(this,B,A),$.flags|=K;let U=this.viewState.scrollTarget;try{this.updateState=2;for(let Y of A){if(U)U=U.map(Y.changes);if(Y.scrollIntoView){let{main:Q}=Y.state.selection;U=new A6(Q.empty?Q:E.cursor(Q.head,Q.head>Q.anchor?-1:1))}for(let Q of Y.effects)if(Q.is(I7))U=Q.value.clip(this.state)}if(this.viewState.update($,U),this.bidiCache=u7.update(this.bidiCache,$.changes),!$.empty)this.updatePlugins($),this.inputState.update($);if(j=this.docView.update($),this.state.facet(D6)!=this.styleModules)this.mountStyles();q=this.updateAttrs(),this.showAnnouncements(A),this.docView.updateSelection(j,A.some((Y)=>Y.isUserEvent("select.pointer")))}finally{this.updateState=0}if($.startState.facet(N7)!=$.state.facet(N7))this.viewState.mustMeasureContent=!0;if(j||q||U||this.viewState.mustEnforceCursorAssoc||this.viewState.mustMeasureContent)this.requestMeasure();if(j)this.docViewUpdate();if(!$.empty)for(let Y of this.state.facet(X0))try{Y($)}catch(Q){YA(this.state,Q,"update listener")}if(J||X)Promise.resolve().then(()=>{if(J&&this.state==J.startState)this.dispatch(J);if(X){if(!d8(this,X)&&Z.force)ej(this.contentDOM,Z.key,Z.keyCode)}})}setState(A){if(this.updateState!=0)throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");if(this.destroyed){this.viewState.state=A;return}this.updateState=2;let j=this.hasFocus;try{for(let q of this.plugins)q.destroy(this);this.viewState=new z0(A),this.plugins=A.facet(oj).map((q)=>new k7(q)),this.pluginMap.clear();for(let q of this.plugins)q.update(this);this.docView.destroy(),this.docView=new U0(this),this.inputState.ensureHandlers(this.plugins),this.mountStyles(),this.updateAttrs(),this.bidiCache=[]}finally{this.updateState=0}if(j)this.focus();this.requestMeasure()}updatePlugins(A){let j=A.startState.facet(oj),q=A.state.facet(oj);if(j!=q){let $=[];for(let B of q){let G=j.indexOf(B);if(G<0)$.push(new k7(B));else{let K=this.plugins[G];K.mustUpdate=A,$.push(K)}}for(let B of this.plugins)if(B.mustUpdate!=A)B.destroy(this);this.plugins=$,this.pluginMap.clear()}else for(let $ of this.plugins)$.mustUpdate=A;for(let $=0;$<this.plugins.length;$++)this.plugins[$].update(this);if(j!=q)this.inputState.ensureHandlers(this.plugins)}docViewUpdate(){for(let A of this.plugins){let j=A.value;if(j&&j.docViewUpdate)try{j.docViewUpdate(this)}catch(q){YA(this.state,q,"doc view update listener")}}}measure(A=!0){if(this.destroyed)return;if(this.measureScheduled>-1)this.win.cancelAnimationFrame(this.measureScheduled);if(this.observer.delayedAndroidKey){this.measureScheduled=-1,this.requestMeasure();return}if(this.measureScheduled=0,A)this.observer.forceFlush();let j=null,q=this.scrollDOM,$=q.scrollTop*this.scaleY,{scrollAnchorPos:B,scrollAnchorHeight:G}=this.viewState;if(Math.abs($-this.viewState.scrollTop)>1)G=-1;this.viewState.scrollAnchorHeight=-1;try{for(let K=0;;K++){if(G<0)if(U8(q))B=-1,G=this.viewState.heightMap.height;else{let Q=this.viewState.scrollAnchorAt($);B=Q.from,G=Q.top}this.updateState=1;let J=this.viewState.measure(this);if(!J&&!this.measureRequests.length&&this.viewState.scrollTarget==null)break;if(K>5){console.warn(this.measureRequests.length?"Measure loop restarted more than 5 times":"Viewport failed to stabilize");break}let Z=[];if(!(J&4))[this.measureRequests,Z]=[Z,this.measureRequests];let X=Z.map((Q)=>{try{return Q.read(this)}catch(O){return YA(this.state,O),sB}}),U=v7.create(this,this.state,[]),Y=!1;if(U.flags|=J,!j)j=U;else j.flags|=J;if(this.updateState=2,!U.empty){if(this.updatePlugins(U),this.inputState.update(U),this.updateAttrs(),Y=this.docView.update(U),Y)this.docViewUpdate()}for(let Q=0;Q<Z.length;Q++)if(X[Q]!=sB)try{let O=Z[Q];if(O.write)O.write(X[Q],this)}catch(O){YA(this.state,O)}if(Y)this.docView.updateSelection(!0);if(!U.viewportChanged&&this.measureRequests.length==0){if(this.viewState.editorHeight)if(this.viewState.scrollTarget){this.docView.scrollIntoView(this.viewState.scrollTarget),this.viewState.scrollTarget=null,G=-1;continue}else{let O=(B<0?this.viewState.heightMap.height:this.viewState.lineBlockAt(B).top)-G;if(O>1||O<-1){$=$+O,q.scrollTop=$/this.scaleY,G=-1;continue}}break}}}finally{this.updateState=0,this.measureScheduled=-1}if(j&&!j.empty)for(let K of this.state.facet(X0))K(j)}get themeClasses(){return W0+" "+(this.state.facet(I0)?JG:KG)+" "+this.state.facet(N7)}updateAttrs(){let A=iB(this,h8,{class:"cm-editor"+(this.hasFocus?" cm-focused ":" ")+this.themeClasses}),j={spellcheck:"false",autocorrect:"off",autocapitalize:"off",writingsuggestions:"false",translate:"no",contenteditable:!this.state.facet(Qj)?"false":"true",class:"cm-content",style:`${L.tabSize}: ${this.state.tabSize}`,role:"textbox","aria-multiline":"true"};if(this.state.readOnly)j["aria-readonly"]="true";iB(this,C0,j);let q=this.observer.ignore(()=>{let $=G0(this.contentDOM,this.contentAttrs,j),B=G0(this.dom,this.editorAttrs,A);return $||B});return this.editorAttrs=A,this.contentAttrs=j,q}showAnnouncements(A){let j=!0;for(let q of A)for(let $ of q.effects)if($.is(R.announce)){if(j)this.announceDOM.textContent="";j=!1;let B=this.announceDOM.appendChild(document.createElement("div"));B.textContent=$.value}}mountStyles(){this.styleModules=this.state.facet(D6);let A=this.state.facet(R.cspNonce);dA.mount(this.root,this.styleModules.concat(v9).reverse(),A?{nonce:A}:void 0)}readMeasured(){if(this.updateState==2)throw new Error("Reading the editor layout isn't allowed during an update");if(this.updateState==0&&this.measureScheduled>-1)this.measure(!1)}requestMeasure(A){if(this.measureScheduled<0)this.measureScheduled=this.win.requestAnimationFrame(()=>this.measure());if(A){if(this.measureRequests.indexOf(A)>-1)return;if(A.key!=null){for(let j=0;j<this.measureRequests.length;j++)if(this.measureRequests[j].key===A.key){this.measureRequests[j]=A;return}}this.measureRequests.push(A)}}plugin(A){let j=this.pluginMap.get(A);if(j===void 0||j&&j.plugin!=A)this.pluginMap.set(A,j=this.plugins.find((q)=>q.plugin==A)||null);return j&&j.update(this).value}get documentTop(){return this.contentDOM.getBoundingClientRect().top+this.viewState.paddingTop}get documentPadding(){return{top:this.viewState.paddingTop,bottom:this.viewState.paddingBottom}}get scaleX(){return this.viewState.scaleX}get scaleY(){return this.viewState.scaleY}elementAtHeight(A){return this.readMeasured(),this.viewState.elementAtHeight(A)}lineBlockAtHeight(A){return this.readMeasured(),this.viewState.lineBlockAtHeight(A)}get viewportLineBlocks(){return this.viewState.viewportLines}lineBlockAt(A){return this.viewState.lineBlockAt(A)}get contentHeight(){return this.viewState.contentHeight}moveByChar(A,j,q){return aq(this,A,CB(this,A,j,q))}moveByGroup(A,j){return aq(this,A,CB(this,A,j,(q)=>Z9(this,A.head,q)))}visualLineSide(A,j){let q=this.bidiSpans(A),$=this.textDirectionAt(A.from),B=q[j?q.length-1:0];return E.cursor(B.side(j,$)+A.from,B.forward(!j,$)?1:-1)}moveToLineBoundary(A,j,q=!0){return J9(this,A,j,q)}moveVertically(A,j,q){return aq(this,A,X9(this,A,j,q))}domAtPos(A){return this.docView.domAtPos(A)}posAtDOM(A,j=0){return this.docView.posFromDOM(A,j)}posAtCoords(A,j=!0){return this.readMeasured(),f8(this,A,j)}coordsAtPos(A,j=1){this.readMeasured();let q=this.docView.coordsAt(A,j);if(!q||q.left==q.right)return q;let $=this.state.doc.lineAt(A),B=this.bidiSpans($),G=B[Oj.find(B,A-$.from,-1,j)];return f7(q,G.dir==d.LTR==j>0)}coordsForChar(A){return this.readMeasured(),this.docView.coordsForChar(A)}get defaultCharacterWidth(){return this.viewState.heightOracle.charWidth}get defaultLineHeight(){return this.viewState.heightOracle.lineHeight}get textDirection(){return this.viewState.defaultTextDirection}textDirectionAt(A){if(!this.state.facet(b8)||A<this.viewport.from||A>this.viewport.to)return this.textDirection;return this.readMeasured(),this.docView.textDirectionAt(A)}get lineWrapping(){return this.viewState.heightOracle.lineWrapping}bidiSpans(A){if(A.length>g9)return R8(A.length);let j=this.textDirectionAt(A.from),q;for(let B of this.bidiCache)if(B.from==A.from&&B.dir==j&&(B.fresh||M8(B.isolates,q=VB(this,A))))return B.order;if(!q)q=VB(this,A);let $=c4(A.text,j,q);return this.bidiCache.push(new u7(A.from,A.to,j,q,!0,$)),$}get hasFocus(){var A;return(this.dom.ownerDocument.hasFocus()||L.safari&&((A=this.inputState)===null||A===void 0?void 0:A.lastContextMenu)>Date.now()-30000)&&this.root.activeElement==this.contentDOM}focus(){this.observer.ignore(()=>{Z8(this.contentDOM),this.docView.updateSelection()})}setRoot(A){if(this._root!=A)this._root=A,this.observer.setWindow((A.nodeType==9?A:A.ownerDocument).defaultView||window),this.mountStyles()}destroy(){if(this.root.activeElement==this.contentDOM)this.contentDOM.blur();for(let A of this.plugins)A.destroy(this);if(this.plugins=[],this.inputState.destroy(),this.docView.destroy(),this.dom.remove(),this.observer.destroy(),this.measureScheduled>-1)this.win.cancelAnimationFrame(this.measureScheduled);this.destroyed=!0}static scrollIntoView(A,j={}){return I7.of(new A6(typeof A=="number"?E.cursor(A):A,j.y,j.x,j.yMargin,j.xMargin))}scrollSnapshot(){let{scrollTop:A,scrollLeft:j}=this.scrollDOM,q=this.viewState.scrollAnchorAt(A);return I7.of(new A6(E.cursor(q.from),"start","start",q.top-A,j,!0))}setTabFocusMode(A){if(A==null)this.inputState.tabFocusMode=this.inputState.tabFocusMode<0?0:-1;else if(typeof A=="boolean")this.inputState.tabFocusMode=A?0:-1;else if(this.inputState.tabFocusMode!=0)this.inputState.tabFocusMode=Date.now()+A}static domEventHandlers(A){return r.define(()=>({}),{eventHandlers:A})}static domEventObservers(A){return r.define(()=>({}),{eventObservers:A})}static theme(A,j){let q=dA.newName(),$=[N7.of(q),D6.of(E0(`.${q}`,A))];if(j&&j.dark)$.push(I0.of(!0));return $}static baseTheme(A){return lA.lowest(D6.of(E0("."+W0,A,ZG)))}static findFromDOM(A){var j;let q=A.querySelector(".cm-content"),$=q&&i.get(q)||i.get(A);return((j=$===null||$===void 0?void 0:$.rootView)===null||j===void 0?void 0:j.view)||null}}R.styleModule=D6;R.inputHandler=C8;R.clipboardInputFilter=P0;R.clipboardOutputFilter=T0;R.scrollHandler=S8;R.focusChangeEffect=y8;R.perLineTextDirection=b8;R.exceptionSink=T8;R.updateListener=X0;R.editable=Qj;R.mouseSelectionStyle=P8;R.dragMovesSelection=L8;R.clickAddsSelectionRange=k8;R.decorations=x6;R.outerDecorations=v8;R.atomicRanges=y0;R.bidiIsolatedRanges=m8;R.scrollMargins=u8;R.darkTheme=I0;R.cspNonce=k.define({combine:(A)=>A.length?A[0]:""});R.contentAttributes=C0;R.editorAttributes=h8;R.lineWrapping=R.contentAttributes.of({class:"cm-lineWrapping"});R.announce=b.define();var g9=4096,sB={};class u7{constructor(A,j,q,$,B,G){this.from=A,this.to=j,this.dir=q,this.isolates=$,this.fresh=B,this.order=G}static update(A,j){if(j.empty&&!A.some((B)=>B.fresh))return A;let q=[],$=A.length?A[A.length-1].dir:d.LTR;for(let B=Math.max(0,A.length-10);B<A.length;B++){let G=A[B];if(G.dir==$&&!j.touchesRange(G.from,G.to))q.push(new u7(j.mapPos(G.from,1),j.mapPos(G.to,-1),G.dir,G.isolates,!1,G.order))}return q}}function iB(A,j,q){for(let $=A.state.facet(j),B=$.length-1;B>=0;B--){let G=$[B],K=typeof G=="function"?G(A):G;if(K)B0(K,q)}return q}var f9=L.mac?"mac":L.windows?"win":L.linux?"linux":"key";function p9(A,j){let q=A.split(/-(?!$)/),$=q[q.length-1];if($=="Space")$=" ";let B,G,K,J;for(let Z=0;Z<q.length-1;++Z){let X=q[Z];if(/^(cmd|meta|m)$/i.test(X))J=!0;else if(/^a(lt)?$/i.test(X))B=!0;else if(/^(c|ctrl|control)$/i.test(X))G=!0;else if(/^s(hift)?$/i.test(X))K=!0;else if(/^mod$/i.test(X))if(j=="mac")J=!0;else G=!0;else throw new Error("Unrecognized modifier name: "+X)}if(B)$="Alt-"+$;if(G)$="Ctrl-"+$;if(J)$="Meta-"+$;if(K)$="Shift-"+$;return $}function D7(A,j,q){if(j.altKey)A="Alt-"+A;if(j.ctrlKey)A="Ctrl-"+A;if(j.metaKey)A="Meta-"+A;if(q!==!1&&j.shiftKey)A="Shift-"+A;return A}var l9=lA.default(R.domEventHandlers({keydown(A,j){return OG(YG(j.state),A,j,"editor")}})),v6=k.define({enables:l9}),nB=new WeakMap;function YG(A){let j=A.facet(v6),q=nB.get(j);if(!q)nB.set(j,q=c9(j.reduce(($,B)=>$.concat(B),[])));return q}function QG(A,j,q){return OG(YG(A.state),j,A,q)}var Wj=null,d9=4000;function c9(A,j=f9){let q=Object.create(null),$=Object.create(null),B=(K,J)=>{let Z=$[K];if(Z==null)$[K]=J;else if(Z!=J)throw new Error("Key binding "+K+" is used both as a regular binding and as a multi-stroke prefix")},G=(K,J,Z,X,U)=>{var Y,Q;let O=q[K]||(q[K]=Object.create(null)),F=J.split(/ (?!$)/).map((W)=>p9(W,j));for(let W=1;W<F.length;W++){let N=F.slice(0,W).join(" ");if(B(N,!0),!O[N])O[N]={preventDefault:!0,stopPropagation:!1,run:[(_)=>{let H=Wj={view:_,prefix:N,scope:K};return setTimeout(()=>{if(Wj==H)Wj=null},d9),!0}]}}let z=F.join(" ");B(z,!1);let I=O[z]||(O[z]={preventDefault:!1,stopPropagation:!1,run:((Q=(Y=O._any)===null||Y===void 0?void 0:Y.run)===null||Q===void 0?void 0:Q.slice())||[]});if(Z)I.run.push(Z);if(X)I.preventDefault=!0;if(U)I.stopPropagation=!0};for(let K of A){let J=K.scope?K.scope.split(" "):["editor"];if(K.any)for(let X of J){let U=q[X]||(q[X]=Object.create(null));if(!U._any)U._any={preventDefault:!1,stopPropagation:!1,run:[]};let{any:Y}=K;for(let Q in U)U[Q].run.push((O)=>Y(O,H0))}let Z=K[j]||K.key;if(!Z)continue;for(let X of J)if(G(X,Z,K.run,K.preventDefault,K.stopPropagation),K.shift)G(X,"Shift-"+Z,K.shift,K.preventDefault,K.stopPropagation)}return q}var H0=null;function OG(A,j,q,$){H0=j;let B=IB(j),G=XA(B,0),K=VA(G)==B.length&&B!=" ",J="",Z=!1,X=!1,U=!1;if(Wj&&Wj.view==q&&Wj.scope==$){if(J=Wj.prefix+" ",i8.indexOf(j.keyCode)<0)X=!0,Wj=null}let Y=new Set,Q=(I)=>{if(I){for(let W of I.run)if(!Y.has(W)){if(Y.add(W),W(q)){if(I.stopPropagation)U=!0;return!0}}if(I.preventDefault){if(I.stopPropagation)U=!0;X=!0}}return!1},O=A[$],F,z;if(O){if(Q(O[J+D7(B,j,!K)]))Z=!0;else if(K&&(j.altKey||j.metaKey||j.ctrlKey)&&!(L.windows&&j.ctrlKey&&j.altKey)&&!(L.mac&&j.altKey&&!j.ctrlKey)&&(F=Yj[j.keyCode])&&F!=B){if(Q(O[J+D7(F,j,!0)]))Z=!0;else if(j.shiftKey&&(z=aj[j.keyCode])!=B&&z!=F&&Q(O[J+D7(z,j,!1)]))Z=!0}else if(K&&j.shiftKey&&Q(O[J+D7(B,j,!0)]))Z=!0;if(!Z&&Q(O._any))Z=!0}if(X)Z=!0;if(Z&&U)j.stopPropagation();return H0=null,Z}class m6{constructor(A,j,q,$,B){this.className=A,this.left=j,this.top=q,this.width=$,this.height=B}draw(){let A=document.createElement("div");return A.className=this.className,this.adjust(A),A}update(A,j){if(j.className!=this.className)return!1;return this.adjust(A),!0}adjust(A){if(A.style.left=this.left+"px",A.style.top=this.top+"px",this.width!=null)A.style.width=this.width+"px";A.style.height=this.height+"px"}eq(A){return this.left==A.left&&this.top==A.top&&this.width==A.width&&this.height==A.height&&this.className==A.className}static forRange(A,j,q){if(q.empty){let $=A.coordsAtPos(q.head,q.assoc||1);if(!$)return[];let B=FG(A);return[new m6(j,$.left-B.left,$.top-B.top,null,$.bottom-$.top)]}else return s9(A,j,q)}}function FG(A){let j=A.scrollDOM.getBoundingClientRect();return{left:(A.textDirection==d.LTR?j.left:j.right-A.scrollDOM.clientWidth*A.scaleX)-A.scrollDOM.scrollLeft*A.scaleX,top:j.top-A.scrollDOM.scrollTop*A.scaleY}}function aB(A,j,q,$){let B=A.coordsAtPos(j,q*2);if(!B)return $;let G=A.dom.getBoundingClientRect(),K=(B.top+B.bottom)/2,J=A.posAtCoords({x:G.left+1,y:K}),Z=A.posAtCoords({x:G.right-1,y:K});if(J==null||Z==null)return $;return{from:Math.max($.from,Math.min(J,Z)),to:Math.min($.to,Math.max(J,Z))}}function s9(A,j,q){if(q.to<=A.viewport.from||q.from>=A.viewport.to)return[];let $=Math.max(q.from,A.viewport.from),B=Math.min(q.to,A.viewport.to),G=A.textDirection==d.LTR,K=A.contentDOM,J=K.getBoundingClientRect(),Z=FG(A),X=K.querySelector(".cm-line"),U=X&&window.getComputedStyle(X),Y=J.left+(U?parseInt(U.paddingLeft)+Math.min(0,parseInt(U.textIndent)):0),Q=J.right-(U?parseInt(U.paddingRight):0),O=Q0(A,$,1),F=Q0(A,B,-1),z=O.type==EA.Text?O:null,I=F.type==EA.Text?F:null;if(z&&(A.lineWrapping||O.widgetLineBreaks))z=aB(A,$,1,z);if(I&&(A.lineWrapping||F.widgetLineBreaks))I=aB(A,B,-1,I);if(z&&I&&z.from==I.from&&z.to==I.to)return N(_(q.from,q.to,z));else{let D=z?_(q.from,null,z):H(O,!1),T=I?_(null,q.to,I):H(F,!0),P=[];if((z||O).to<(I||F).from-(z&&I?1:0)||O.widgetLineBreaks>1&&D.bottom+A.defaultLineHeight/2<T.top)P.push(W(Y,D.bottom,Q,T.top));else if(D.bottom<T.top&&A.elementAtHeight((D.bottom+T.top)/2).type==EA.Text)D.bottom=T.top=(D.bottom+T.top)/2;return N(D).concat(P).concat(N(T))}function W(D,T,P,x){return new m6(j,D-Z.left,T-Z.top,P-D,x-T)}function N({top:D,bottom:T,horizontal:P}){let x=[];for(let u=0;u<P.length;u+=2)x.push(W(P[u],D,P[u+1],T));return x}function _(D,T,P){let x=1e9,u=-1e9,c=[];function w(g,n,WA,MA,oA){let JA=A.coordsAtPos(g,g==P.to?-2:2),yA=A.coordsAtPos(WA,WA==P.from?2:-2);if(!JA||!yA)return;if(x=Math.min(JA.top,yA.top,x),u=Math.max(JA.bottom,yA.bottom,u),oA==d.LTR)c.push(G&&n?Y:JA.left,G&&MA?Q:yA.right);else c.push(!G&&MA?Y:yA.left,!G&&n?Q:JA.right)}let y=D!==null&&D!==void 0?D:P.from,p=T!==null&&T!==void 0?T:P.to;for(let g of A.visibleRanges)if(g.to>y&&g.from<p)for(let n=Math.max(g.from,y),WA=Math.min(g.to,p);;){let MA=A.state.doc.lineAt(n);for(let oA of A.bidiSpans(MA)){let JA=oA.from+MA.from,yA=oA.to+MA.from;if(JA>=WA)break;if(yA>n)w(Math.max(JA,n),D==null&&JA<=y,Math.min(yA,WA),T==null&&yA>=p,oA.dir)}if(n=MA.to+1,n>=WA)break}if(c.length==0)w(y,D==null,p,T==null,A.textDirection);return{top:x,bottom:u,horizontal:c}}function H(D,T){let P=J.top+(T?D.top:D.bottom);return{top:P,bottom:P,horizontal:[]}}}function i9(A,j){return A.constructor==j.constructor&&A.eq(j)}class zG{constructor(A,j){if(this.view=A,this.layer=j,this.drawn=[],this.scaleX=1,this.scaleY=1,this.measureReq={read:this.measure.bind(this),write:this.draw.bind(this)},this.dom=A.scrollDOM.appendChild(document.createElement("div")),this.dom.classList.add("cm-layer"),j.above)this.dom.classList.add("cm-layer-above");if(j.class)this.dom.classList.add(j.class);if(this.scale(),this.dom.setAttribute("aria-hidden","true"),this.setOrder(A.state),A.requestMeasure(this.measureReq),j.mount)j.mount(this.dom,A)}update(A){if(A.startState.facet(C7)!=A.state.facet(C7))this.setOrder(A.state);if(this.layer.update(A,this.dom)||A.geometryChanged)this.scale(),A.view.requestMeasure(this.measureReq)}docViewUpdate(A){if(this.layer.updateOnDocViewUpdate!==!1)A.requestMeasure(this.measureReq)}setOrder(A){let j=0,q=A.facet(C7);while(j<q.length&&q[j]!=this.layer)j++;this.dom.style.zIndex=String((this.layer.above?150:-1)-j)}measure(){return this.layer.markers(this.view)}scale(){let{scaleX:A,scaleY:j}=this.view;if(A!=this.scaleX||j!=this.scaleY)this.scaleX=A,this.scaleY=j,this.dom.style.transform=`scale(${1/A}, ${1/j})`}draw(A){if(A.length!=this.drawn.length||A.some((j,q)=>!i9(j,this.drawn[q]))){let j=this.dom.firstChild,q=0;for(let $ of A)if($.update&&j&&$.constructor&&this.drawn[q].constructor&&$.update(j,this.drawn[q]))j=j.nextSibling,q++;else this.dom.insertBefore($.draw(),j);while(j){let $=j.nextSibling;j.remove(),j=$}this.drawn=A}}destroy(){if(this.layer.destroy)this.layer.destroy(this.dom,this.view);this.dom.remove()}}var C7=k.define();function IG(A){return[r.define((j)=>new zG(j,A)),C7.of(A)]}var S6=k.define({combine(A){return FA(A,{cursorBlinkRate:1200,drawRangeCursor:!0},{cursorBlinkRate:(j,q)=>Math.min(j,q),drawRangeCursor:(j,q)=>j||q})}});function WG(A={}){return[S6.of(A),n9,a9,r9,x8.of(!0)]}function EG(A){return A.startState.facet(S6)!=A.state.facet(S6)}var n9=IG({above:!0,markers(A){let{state:j}=A,q=j.facet(S6),$=[];for(let B of j.selection.ranges){let G=B==j.selection.main;if(B.empty||q.drawRangeCursor){let K=G?"cm-cursor cm-cursor-primary":"cm-cursor cm-cursor-secondary",J=B.empty?B:E.cursor(B.head,B.head>B.anchor?-1:1);for(let Z of m6.forRange(A,K,J))$.push(Z)}}return $},update(A,j){if(A.transactions.some(($)=>$.selection))j.style.animationName=j.style.animationName=="cm-blink"?"cm-blink2":"cm-blink";let q=EG(A);if(q)rB(A.state,j);return A.docChanged||A.selectionSet||q},mount(A,j){rB(j.state,A)},class:"cm-cursorLayer"});function rB(A,j){j.style.animationDuration=A.facet(S6).cursorBlinkRate+"ms"}var a9=IG({above:!1,markers(A){return A.state.selection.ranges.map((j)=>j.empty?[]:m6.forRange(A,"cm-selectionBackground",j)).reduce((j,q)=>j.concat(q))},update(A,j){return A.docChanged||A.selectionSet||A.viewportChanged||EG(A)},class:"cm-selectionLayer"}),r9=lA.highest(R.theme({".cm-line":{"& ::selection, &::selection":{backgroundColor:"transparent !important"},caretColor:"transparent !important"},".cm-content":{caretColor:"transparent !important","& :focus":{caretColor:"initial !important","&::selection, & ::selection":{backgroundColor:"Highlight !important"}}}})),HG=b.define({map(A,j){return A==null?null:j.mapPos(A)}}),k6=o.define({create(){return null},update(A,j){if(A!=null)A=j.changes.mapPos(A);return j.effects.reduce((q,$)=>$.is(HG)?$.value:q,A)}}),o9=r.fromClass(class{constructor(A){this.view=A,this.cursor=null,this.measureReq={read:this.readPos.bind(this),write:this.drawCursor.bind(this)}}update(A){var j;let q=A.state.field(k6);if(q==null){if(this.cursor!=null)(j=this.cursor)===null||j===void 0||j.remove(),this.cursor=null}else{if(!this.cursor)this.cursor=this.view.scrollDOM.appendChild(document.createElement("div")),this.cursor.className="cm-dropCursor";if(A.startState.field(k6)!=q||A.docChanged||A.geometryChanged)this.view.requestMeasure(this.measureReq)}}readPos(){let{view:A}=this,j=A.state.field(k6),q=j!=null&&A.coordsAtPos(j);if(!q)return null;let $=A.scrollDOM.getBoundingClientRect();return{left:q.left-$.left+A.scrollDOM.scrollLeft*A.scaleX,top:q.top-$.top+A.scrollDOM.scrollTop*A.scaleY,height:q.bottom-q.top}}drawCursor(A){if(this.cursor){let{scaleX:j,scaleY:q}=this.view;if(A)this.cursor.style.left=A.left/j+"px",this.cursor.style.top=A.top/q+"px",this.cursor.style.height=A.height/q+"px";else this.cursor.style.left="-100000px"}}destroy(){if(this.cursor)this.cursor.remove()}setDropPos(A){if(this.view.state.field(k6)!=A)this.view.dispatch({effects:HG.of(A)})}},{eventObservers:{dragover(A){this.setDropPos(this.view.posAtCoords({x:A.clientX,y:A.clientY}))},dragleave(A){if(A.target==this.view.contentDOM||!this.view.contentDOM.contains(A.relatedTarget))this.setDropPos(null)},dragend(){this.setDropPos(null)},drop(){this.setDropPos(null)}}});function _G(){return[k6,o9]}function oB(A,j,q,$,B){j.lastIndex=0;for(let G=A.iterRange(q,$),K=q,J;!G.next().done;K+=G.value.length)if(!G.lineBreak)while(J=j.exec(G.value))B(K+J.index,J)}function t9(A,j){let q=A.visibleRanges;if(q.length==1&&q[0].from==A.viewport.from&&q[0].to==A.viewport.to)return q;let $=[];for(let{from:B,to:G}of q)if(B=Math.max(A.state.doc.lineAt(B).from,B-j),G=Math.min(A.state.doc.lineAt(G).to,G+j),$.length&&$[$.length-1].to>=B)$[$.length-1].to=G;else $.push({from:B,to:G});return $}class NG{constructor(A){let{regexp:j,decoration:q,decorate:$,boundary:B,maxLength:G=1000}=A;if(!j.global)throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");if(this.regexp=j,$)this.addMatch=(K,J,Z,X)=>$(X,Z,Z+K[0].length,K,J);else if(typeof q=="function")this.addMatch=(K,J,Z,X)=>{let U=q(K,J,Z);if(U)X(Z,Z+K[0].length,U)};else if(q)this.addMatch=(K,J,Z,X)=>X(Z,Z+K[0].length,q);else throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");this.boundary=B,this.maxLength=G}createDeco(A){let j=new RA,q=j.add.bind(j);for(let{from:$,to:B}of t9(A,this.maxLength))oB(A.state.doc,this.regexp,$,B,(G,K)=>this.addMatch(K,A,G,q));return j.finish()}updateDeco(A,j){let q=1e9,$=-1;if(A.docChanged)A.changes.iterChanges((B,G,K,J)=>{if(J>=A.view.viewport.from&&K<=A.view.viewport.to)q=Math.min(K,q),$=Math.max(J,$)});if(A.viewportMoved||$-q>1000)return this.createDeco(A.view);if($>-1)return this.updateRange(A.view,j.map(A.changes),q,$);return j}updateRange(A,j,q,$){for(let B of A.visibleRanges){let G=Math.max(B.from,q),K=Math.min(B.to,$);if(K>=G){let J=A.state.doc.lineAt(G),Z=J.to<K?A.state.doc.lineAt(K):J,X=Math.max(B.from,J.from),U=Math.min(B.to,Z.to);if(this.boundary){for(;G>J.from;G--)if(this.boundary.test(J.text[G-1-J.from])){X=G;break}for(;K<Z.to;K++)if(this.boundary.test(Z.text[K-Z.from])){U=K;break}}let Y=[],Q,O=(F,z,I)=>Y.push(I.range(F,z));if(J==Z){this.regexp.lastIndex=X-J.from;while((Q=this.regexp.exec(J.text))&&Q.index<U-J.from)this.addMatch(Q,A,Q.index+J.from,O)}else oB(A.state.doc,this.regexp,X,U,(F,z)=>this.addMatch(z,A,F,O));j=j.update({filterFrom:X,filterTo:U,filter:(F,z)=>F<X||z>U,add:Y})}}return j}}var _0=/x/.unicode!=null?"gu":"g",e9=new RegExp(`[\x00-\b
-\x1F-­؜​‎‏\u2028\u2029‭‮⁦⁧⁩\uFEFF￹-￼]`,_0),A1={0:"null",7:"bell",8:"backspace",10:"newline",11:"vertical tab",13:"carriage return",27:"escape",8203:"zero width space",8204:"zero width non-joiner",8205:"zero width joiner",8206:"left-to-right mark",8207:"right-to-left mark",8232:"line separator",8237:"left-to-right override",8238:"right-to-left override",8294:"left-to-right isolate",8295:"right-to-left isolate",8297:"pop directional isolate",8233:"paragraph separator",65279:"zero width no-break space",65532:"object replacement"},oq=null;function j1(){var A;if(oq==null&&typeof document!="undefined"&&document.body){let j=document.body.style;oq=((A=j.tabSize)!==null&&A!==void 0?A:j.MozTabSize)!=null}return oq||!1}var y7=k.define({combine(A){let j=FA(A,{render:null,specialChars:e9,addSpecialChars:null});if(j.replaceTabs=!j1())j.specialChars=new RegExp("\t|"+j.specialChars.source,_0);if(j.addSpecialChars)j.specialChars=new RegExp(j.specialChars.source+"|"+j.addSpecialChars.source,_0);return j}});function DG(A={}){return[y7.of(A),q1()]}var tB=null;function q1(){return tB||(tB=r.fromClass(class{constructor(A){this.view=A,this.decorations=C.none,this.decorationCache=Object.create(null),this.decorator=this.makeDecorator(A.state.facet(y7)),this.decorations=this.decorator.createDeco(A)}makeDecorator(A){return new NG({regexp:A.specialChars,decoration:(j,q,$)=>{let{doc:B}=q.state,G=XA(j[0],0);if(G==9){let K=B.lineAt($),J=q.state.tabSize,Z=Uj(K.text,J,$-K.from);return C.replace({widget:new RG((J-Z%J)*this.view.defaultCharacterWidth/this.view.scaleX)})}return this.decorationCache[G]||(this.decorationCache[G]=C.replace({widget:new MG(A,G)}))},boundary:A.replaceTabs?void 0:/[^]/})}update(A){let j=A.state.facet(y7);if(A.startState.facet(y7)!=j)this.decorator=this.makeDecorator(j),this.decorations=this.decorator.createDeco(A.view);else this.decorations=this.decorator.updateDeco(A,this.decorations)}},{decorations:(A)=>A.decorations}))}var $1="•";function B1(A){if(A>=32)return $1;if(A==10)return"␤";return String.fromCharCode(9216+A)}class MG extends hA{constructor(A,j){super();this.options=A,this.code=j}eq(A){return A.code==this.code}toDOM(A){let j=B1(this.code),q=A.state.phrase("Control character")+" "+(A1[this.code]||"0x"+this.code.toString(16)),$=this.options.render&&this.options.render(this.code,q,j);if($)return $;let B=document.createElement("span");return B.textContent=j,B.title=q,B.setAttribute("aria-label",q),B.className="cm-specialChar",B}ignoreEvent(){return!1}}class RG extends hA{constructor(A){super();this.width=A}eq(A){return A.width==this.width}toDOM(){let A=document.createElement("span");return A.textContent="\t",A.className="cm-tab",A.style.width=this.width+"px",A}ignoreEvent(){return!1}}function VG(){return K1}var G1=C.line({class:"cm-activeLine"}),K1=r.fromClass(class{constructor(A){this.decorations=this.getDeco(A)}update(A){if(A.docChanged||A.selectionSet)this.decorations=this.getDeco(A.view)}getDeco(A){let j=-1,q=[];for(let $ of A.state.selection.ranges){let B=A.lineBlockAt($.head);if(B.from>j)q.push(G1.range(B.from)),j=B.from}return C.set(q)}},{decorations:(A)=>A.decorations});var N0=2000;function J1(A,j,q){let $=Math.min(j.line,q.line),B=Math.max(j.line,q.line),G=[];if(j.off>N0||q.off>N0||j.col<0||q.col<0){let K=Math.min(j.off,q.off),J=Math.max(j.off,q.off);for(let Z=$;Z<=B;Z++){let X=A.doc.line(Z);if(X.length<=J)G.push(E.range(X.from+K,X.to+J))}}else{let K=Math.min(j.col,q.col),J=Math.max(j.col,q.col);for(let Z=$;Z<=B;Z++){let X=A.doc.line(Z),U=F7(X.text,K,A.tabSize,!0);if(U<0)G.push(E.cursor(X.to));else{let Y=F7(X.text,J,A.tabSize);G.push(E.range(X.from+U,X.from+Y))}}}return G}function Z1(A,j){let q=A.coordsAtPos(A.viewport.from);return q?Math.round(Math.abs((q.left-j)/A.defaultCharacterWidth)):-1}function eB(A,j){let q=A.posAtCoords({x:j.clientX,y:j.clientY},!1),$=A.state.doc.lineAt(q),B=q-$.from,G=B>N0?-1:B==$.length?Z1(A,j.clientX):Uj($.text,A.state.tabSize,q-$.from);return{line:$.number,col:G,off:B}}function X1(A,j){let q=eB(A,j),$=A.state.selection;if(!q)return null;return{update(B){if(B.docChanged){let G=B.changes.mapPos(B.startState.doc.line(q.line).from),K=B.state.doc.lineAt(G);q={line:K.number,col:q.col,off:Math.min(q.off,K.length)},$=$.map(B.changes)}},get(B,G,K){let J=eB(A,B);if(!J)return $;let Z=J1(A.state,q,J);if(!Z.length)return $;if(K)return E.create(Z.concat($.ranges));else return E.create(Z)}}}function kG(A){let j=(A===null||A===void 0?void 0:A.eventFilter)||((q)=>q.altKey&&q.button==0);return R.mouseSelectionStyle.of((q,$)=>j($)?X1(q,$):null)}var U1={Alt:[18,(A)=>!!A.altKey],Control:[17,(A)=>!!A.ctrlKey],Shift:[16,(A)=>!!A.shiftKey],Meta:[91,(A)=>!!A.metaKey]},Y1={style:"cursor: crosshair"};function LG(A={}){let[j,q]=U1[A.key||"Alt"],$=r.fromClass(class{constructor(B){this.view=B,this.isDown=!1}set(B){if(this.isDown!=B)this.isDown=B,this.view.update([])}},{eventObservers:{keydown(B){this.set(B.keyCode==j||q(B))},keyup(B){if(B.keyCode==j||!q(B))this.set(!1)},mousemove(B){this.set(q(B))}}});return[$,R.contentAttributes.of((B)=>{var G;return((G=B.plugin($))===null||G===void 0?void 0:G.isDown)?Y1:null})]}var N6="-10000px";class v0{constructor(A,j,q,$){this.facet=j,this.createTooltipView=q,this.removeTooltipView=$,this.input=A.state.facet(j),this.tooltips=this.input.filter((G)=>G);let B=null;this.tooltipViews=this.tooltips.map((G)=>B=q(G,B))}update(A,j){var q;let $=A.state.facet(this.facet),B=$.filter((J)=>J);if($===this.input){for(let J of this.tooltipViews)if(J.update)J.update(A);return!1}let G=[],K=j?[]:null;for(let J=0;J<B.length;J++){let Z=B[J],X=-1;if(!Z)continue;for(let U=0;U<this.tooltips.length;U++){let Y=this.tooltips[U];if(Y&&Y.create==Z.create)X=U}if(X<0){if(G[J]=this.createTooltipView(Z,J?G[J-1]:null),K)K[J]=!!Z.above}else{let U=G[J]=this.tooltipViews[X];if(K)K[J]=j[X];if(U.update)U.update(A)}}for(let J of this.tooltipViews)if(G.indexOf(J)<0)this.removeTooltipView(J),(q=J.destroy)===null||q===void 0||q.call(J);if(j)K.forEach((J,Z)=>j[Z]=J),j.length=K.length;return this.input=$,this.tooltips=B,this.tooltipViews=G,!0}}function Q1(A){let j=A.dom.ownerDocument.documentElement;return{top:0,left:0,bottom:j.clientHeight,right:j.clientWidth}}var tq=k.define({combine:(A)=>{var j,q,$;return{position:L.ios?"absolute":((j=A.find((B)=>B.position))===null||j===void 0?void 0:j.position)||"fixed",parent:((q=A.find((B)=>B.parent))===null||q===void 0?void 0:q.parent)||null,tooltipSpace:(($=A.find((B)=>B.tooltipSpace))===null||$===void 0?void 0:$.tooltipSpace)||Q1}}}),A8=new WeakMap,m0=r.fromClass(class{constructor(A){this.view=A,this.above=[],this.inView=!0,this.madeAbsolute=!1,this.lastTransaction=0,this.measureTimeout=-1;let j=A.state.facet(tq);this.position=j.position,this.parent=j.parent,this.classes=A.themeClasses,this.createContainer(),this.measureReq={read:this.readMeasure.bind(this),write:this.writeMeasure.bind(this),key:this},this.resizeObserver=typeof ResizeObserver=="function"?new ResizeObserver(()=>this.measureSoon()):null,this.manager=new v0(A,u6,(q,$)=>this.createTooltip(q,$),(q)=>{if(this.resizeObserver)this.resizeObserver.unobserve(q.dom);q.dom.remove()}),this.above=this.manager.tooltips.map((q)=>!!q.above),this.intersectionObserver=typeof IntersectionObserver=="function"?new IntersectionObserver((q)=>{if(Date.now()>this.lastTransaction-50&&q.length>0&&q[q.length-1].intersectionRatio<1)this.measureSoon()},{threshold:[1]}):null,this.observeIntersection(),A.win.addEventListener("resize",this.measureSoon=this.measureSoon.bind(this)),this.maybeMeasure()}createContainer(){if(this.parent)this.container=document.createElement("div"),this.container.style.position="relative",this.container.className=this.view.themeClasses,this.parent.appendChild(this.container);else this.container=this.view.dom}observeIntersection(){if(this.intersectionObserver){this.intersectionObserver.disconnect();for(let A of this.manager.tooltipViews)this.intersectionObserver.observe(A.dom)}}measureSoon(){if(this.measureTimeout<0)this.measureTimeout=setTimeout(()=>{this.measureTimeout=-1,this.maybeMeasure()},50)}update(A){if(A.transactions.length)this.lastTransaction=Date.now();let j=this.manager.update(A,this.above);if(j)this.observeIntersection();let q=j||A.geometryChanged,$=A.state.facet(tq);if($.position!=this.position&&!this.madeAbsolute){this.position=$.position;for(let B of this.manager.tooltipViews)B.dom.style.position=this.position;q=!0}if($.parent!=this.parent){if(this.parent)this.container.remove();this.parent=$.parent,this.createContainer();for(let B of this.manager.tooltipViews)this.container.appendChild(B.dom);q=!0}else if(this.parent&&this.view.themeClasses!=this.classes)this.classes=this.container.className=this.view.themeClasses;if(q)this.maybeMeasure()}createTooltip(A,j){let q=A.create(this.view),$=j?j.dom:null;if(q.dom.classList.add("cm-tooltip"),A.arrow&&!q.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")){let B=document.createElement("div");B.className="cm-tooltip-arrow",q.dom.appendChild(B)}if(q.dom.style.position=this.position,q.dom.style.top=N6,q.dom.style.left="0px",this.container.insertBefore(q.dom,$),q.mount)q.mount(this.view);if(this.resizeObserver)this.resizeObserver.observe(q.dom);return q}destroy(){var A,j,q;this.view.win.removeEventListener("resize",this.measureSoon);for(let $ of this.manager.tooltipViews)$.dom.remove(),(A=$.destroy)===null||A===void 0||A.call($);if(this.parent)this.container.remove();(j=this.resizeObserver)===null||j===void 0||j.disconnect(),(q=this.intersectionObserver)===null||q===void 0||q.disconnect(),clearTimeout(this.measureTimeout)}readMeasure(){let A=1,j=1,q=!1;if(this.position=="fixed"&&this.manager.tooltipViews.length){let{dom:G}=this.manager.tooltipViews[0];if(L.gecko)q=G.offsetParent!=this.container.ownerDocument.body;else if(G.style.top==N6&&G.style.left=="0px"){let K=G.getBoundingClientRect();q=Math.abs(K.top+1e4)>1||Math.abs(K.left)>1}}if(q||this.position=="absolute")if(this.parent){let G=this.parent.getBoundingClientRect();if(G.width&&G.height)A=G.width/this.parent.offsetWidth,j=G.height/this.parent.offsetHeight}else({scaleX:A,scaleY:j}=this.view.viewState);let $=this.view.scrollDOM.getBoundingClientRect(),B=b0(this.view);return{visible:{left:$.left+B.left,top:$.top+B.top,right:$.right-B.right,bottom:$.bottom-B.bottom},parent:this.parent?this.container.getBoundingClientRect():this.view.dom.getBoundingClientRect(),pos:this.manager.tooltips.map((G,K)=>{let J=this.manager.tooltipViews[K];return J.getCoords?J.getCoords(G.pos):this.view.coordsAtPos(G.pos)}),size:this.manager.tooltipViews.map(({dom:G})=>G.getBoundingClientRect()),space:this.view.state.facet(tq).tooltipSpace(this.view),scaleX:A,scaleY:j,makeAbsolute:q}}writeMeasure(A){var j;if(A.makeAbsolute){this.madeAbsolute=!0,this.position="absolute";for(let J of this.manager.tooltipViews)J.dom.style.position="absolute"}let{visible:q,space:$,scaleX:B,scaleY:G}=A,K=[];for(let J=0;J<this.manager.tooltips.length;J++){let Z=this.manager.tooltips[J],X=this.manager.tooltipViews[J],{dom:U}=X,Y=A.pos[J],Q=A.size[J];if(!Y||Z.clip!==!1&&(Y.bottom<=Math.max(q.top,$.top)||Y.top>=Math.min(q.bottom,$.bottom)||Y.right<Math.max(q.left,$.left)-0.1||Y.left>Math.min(q.right,$.right)+0.1)){U.style.top=N6;continue}let O=Z.arrow?X.dom.querySelector(".cm-tooltip-arrow"):null,F=O?7:0,z=Q.right-Q.left,I=(j=A8.get(X))!==null&&j!==void 0?j:Q.bottom-Q.top,W=X.offset||F1,N=this.view.textDirection==d.LTR,_=Q.width>$.right-$.left?N?$.left:$.right-Q.width:N?Math.max($.left,Math.min(Y.left-(O?14:0)+W.x,$.right-z)):Math.min(Math.max($.left,Y.left-z+(O?14:0)-W.x),$.right-z),H=this.above[J];if(!Z.strictSide&&(H?Y.top-I-F-W.y<$.top:Y.bottom+I+F+W.y>$.bottom)&&H==$.bottom-Y.bottom>Y.top-$.top)H=this.above[J]=!H;let D=(H?Y.top-$.top:$.bottom-Y.bottom)-F;if(D<I&&X.resize!==!1){if(D<this.view.defaultLineHeight){U.style.top=N6;continue}A8.set(X,I),U.style.height=(I=D)/G+"px"}else if(U.style.height)U.style.height="";let T=H?Y.top-I-F-W.y:Y.bottom+F+W.y,P=_+z;if(X.overlap!==!0){for(let x of K)if(x.left<P&&x.right>_&&x.top<T+I&&x.bottom>T)T=H?x.top-I-2-F:x.bottom+F+2}if(this.position=="absolute")U.style.top=(T-A.parent.top)/G+"px",j8(U,(_-A.parent.left)/B);else U.style.top=T/G+"px",j8(U,_/B);if(O){let x=Y.left+(N?W.x:-W.x)-(_+14-7);O.style.left=x/B+"px"}if(X.overlap!==!0)K.push({left:_,top:T,right:P,bottom:T+I});if(U.classList.toggle("cm-tooltip-above",H),U.classList.toggle("cm-tooltip-below",!H),X.positioned)X.positioned(A.space)}}maybeMeasure(){if(this.manager.tooltips.length){if(this.view.inView)this.view.requestMeasure(this.measureReq);if(this.inView!=this.view.inView){if(this.inView=this.view.inView,!this.inView)for(let A of this.manager.tooltipViews)A.dom.style.top=N6}}}},{eventObservers:{scroll(){this.maybeMeasure()}}});function j8(A,j){let q=parseInt(A.style.left,10);if(isNaN(q)||Math.abs(j-q)>1)A.style.left=j+"px"}var O1=R.baseTheme({".cm-tooltip":{zIndex:500,boxSizing:"border-box"},"&light .cm-tooltip":{border:"1px solid #bbb",backgroundColor:"#f5f5f5"},"&light .cm-tooltip-section:not(:first-child)":{borderTop:"1px solid #bbb"},"&dark .cm-tooltip":{backgroundColor:"#333338",color:"white"},".cm-tooltip-arrow":{height:"7px",width:"14px",position:"absolute",zIndex:-1,overflow:"hidden","&:before, &:after":{content:"''",position:"absolute",width:0,height:0,borderLeft:"7px solid transparent",borderRight:"7px solid transparent"},".cm-tooltip-above &":{bottom:"-7px","&:before":{borderTop:"7px solid #bbb"},"&:after":{borderTop:"7px solid #f5f5f5",bottom:"1px"}},".cm-tooltip-below &":{top:"-7px","&:before":{borderBottom:"7px solid #bbb"},"&:after":{borderBottom:"7px solid #f5f5f5",top:"1px"}}},"&dark .cm-tooltip .cm-tooltip-arrow":{"&:before":{borderTopColor:"#333338",borderBottomColor:"#333338"},"&:after":{borderTopColor:"transparent",borderBottomColor:"transparent"}}}),F1={x:0,y:0},u6=k.define({enables:[m0,O1]}),g7=k.define({combine:(A)=>A.reduce((j,q)=>j.concat(q),[])});class d7{static create(A){return new d7(A)}constructor(A){this.view=A,this.mounted=!1,this.dom=document.createElement("div"),this.dom.classList.add("cm-tooltip-hover"),this.manager=new v0(A,g7,(j,q)=>this.createHostedView(j,q),(j)=>j.dom.remove())}createHostedView(A,j){let q=A.create(this.view);if(q.dom.classList.add("cm-tooltip-section"),this.dom.insertBefore(q.dom,j?j.dom.nextSibling:this.dom.firstChild),this.mounted&&q.mount)q.mount(this.view);return q}mount(A){for(let j of this.manager.tooltipViews)if(j.mount)j.mount(A);this.mounted=!0}positioned(A){for(let j of this.manager.tooltipViews)if(j.positioned)j.positioned(A)}update(A){this.manager.update(A)}destroy(){var A;for(let j of this.manager.tooltipViews)(A=j.destroy)===null||A===void 0||A.call(j)}passProp(A){let j=void 0;for(let q of this.manager.tooltipViews){let $=q[A];if($!==void 0){if(j===void 0)j=$;else if(j!==$)return}}return j}get offset(){return this.passProp("offset")}get getCoords(){return this.passProp("getCoords")}get overlap(){return this.passProp("overlap")}get resize(){return this.passProp("resize")}}var z1=u6.compute([g7],(A)=>{let j=A.facet(g7);if(j.length===0)return null;return{pos:Math.min(...j.map((q)=>q.pos)),end:Math.max(...j.map((q)=>{var $;return($=q.end)!==null&&$!==void 0?$:q.pos})),create:d7.create,above:j[0].above,arrow:j.some((q)=>q.arrow)}});class PG{constructor(A,j,q,$,B){this.view=A,this.source=j,this.field=q,this.setHover=$,this.hoverTime=B,this.hoverTimeout=-1,this.restartTimeout=-1,this.pending=null,this.lastMove={x:0,y:0,target:A.dom,time:0},this.checkHover=this.checkHover.bind(this),A.dom.addEventListener("mouseleave",this.mouseleave=this.mouseleave.bind(this)),A.dom.addEventListener("mousemove",this.mousemove=this.mousemove.bind(this))}update(){if(this.pending)this.pending=null,clearTimeout(this.restartTimeout),this.restartTimeout=setTimeout(()=>this.startHover(),20)}get active(){return this.view.state.field(this.field)}checkHover(){if(this.hoverTimeout=-1,this.active.length)return;let A=Date.now()-this.lastMove.time;if(A<this.hoverTime)this.hoverTimeout=setTimeout(this.checkHover,this.hoverTime-A);else this.startHover()}startHover(){clearTimeout(this.restartTimeout);let{view:A,lastMove:j}=this,q=A.docView.nearest(j.target);if(!q)return;let $,B=1;if(q instanceof Ej)$=q.posAtStart;else{if($=A.posAtCoords(j),$==null)return;let K=A.coordsAtPos($);if(!K||j.y<K.top||j.y>K.bottom||j.x<K.left-A.defaultCharacterWidth||j.x>K.right+A.defaultCharacterWidth)return;let J=A.bidiSpans(A.state.doc.lineAt($)).find((X)=>X.from<=$&&X.to>=$),Z=J&&J.dir==d.RTL?-1:1;B=j.x<K.left?-Z:Z}let G=this.source(A,$,B);if(G===null||G===void 0?void 0:G.then){let K=this.pending={pos:$};G.then((J)=>{if(this.pending==K){if(this.pending=null,J&&!(Array.isArray(J)&&!J.length))A.dispatch({effects:this.setHover.of(Array.isArray(J)?J:[J])})}},(J)=>YA(A.state,J,"hover tooltip"))}else if(G&&!(Array.isArray(G)&&!G.length))A.dispatch({effects:this.setHover.of(Array.isArray(G)?G:[G])})}get tooltip(){let A=this.view.plugin(m0),j=A?A.manager.tooltips.findIndex((q)=>q.create==d7.create):-1;return j>-1?A.manager.tooltipViews[j]:null}mousemove(A){var j,q;if(this.lastMove={x:A.clientX,y:A.clientY,target:A.target,time:Date.now()},this.hoverTimeout<0)this.hoverTimeout=setTimeout(this.checkHover,this.hoverTime);let{active:$,tooltip:B}=this;if($.length&&B&&!I1(B.dom,A)||this.pending){let{pos:G}=$[0]||this.pending,K=(q=(j=$[0])===null||j===void 0?void 0:j.end)!==null&&q!==void 0?q:G;if(G==K?this.view.posAtCoords(this.lastMove)!=G:!W1(this.view,G,K,A.clientX,A.clientY))this.view.dispatch({effects:this.setHover.of([])}),this.pending=null}}mouseleave(A){clearTimeout(this.hoverTimeout),this.hoverTimeout=-1;let{active:j}=this;if(j.length){let{tooltip:q}=this;if(!(q&&q.dom.contains(A.relatedTarget)))this.view.dispatch({effects:this.setHover.of([])});else this.watchTooltipLeave(q.dom)}}watchTooltipLeave(A){let j=(q)=>{if(A.removeEventListener("mouseleave",j),this.active.length&&!this.view.dom.contains(q.relatedTarget))this.view.dispatch({effects:this.setHover.of([])})};A.addEventListener("mouseleave",j)}destroy(){clearTimeout(this.hoverTimeout),this.view.dom.removeEventListener("mouseleave",this.mouseleave),this.view.dom.removeEventListener("mousemove",this.mousemove)}}var M7=4;function I1(A,j){let{left:q,right:$,top:B,bottom:G}=A.getBoundingClientRect(),K;if(K=A.querySelector(".cm-tooltip-arrow")){let J=K.getBoundingClientRect();B=Math.min(J.top,B),G=Math.max(J.bottom,G)}return j.clientX>=q-M7&&j.clientX<=$+M7&&j.clientY>=B-M7&&j.clientY<=G+M7}function W1(A,j,q,$,B,G){let K=A.scrollDOM.getBoundingClientRect(),J=A.documentTop+A.documentPadding.top+A.contentHeight;if(K.left>$||K.right<$||K.top>B||Math.min(K.bottom,J)<B)return!1;let Z=A.posAtCoords({x:$,y:B},!1);return Z>=j&&Z<=q}function TG(A,j={}){let q=b.define(),$=o.define({create(){return[]},update(B,G){if(B.length){if(j.hideOnChange&&(G.docChanged||G.selection))B=[];else if(j.hideOn)B=B.filter((K)=>!j.hideOn(G,K));if(G.docChanged){let K=[];for(let J of B){let Z=G.changes.mapPos(J.pos,-1,ZA.TrackDel);if(Z!=null){let X=Object.assign(Object.create(null),J);if(X.pos=Z,X.end!=null)X.end=G.changes.mapPos(X.end);K.push(X)}}B=K}}for(let K of G.effects){if(K.is(q))B=K.value;if(K.is(E1))B=[]}return B},provide:(B)=>g7.from(B)});return{active:$,extension:[$,r.define((B)=>new PG(B,A,$,q,j.hoverTime||300)),z1]}}function u0(A,j){let q=A.plugin(m0);if(!q)return null;let $=q.manager.tooltips.indexOf(j);return $<0?null:q.manager.tooltipViews[$]}var E1=b.define();var q8=k.define({combine(A){let j,q;for(let $ of A)j=j||$.topContainer,q=q||$.bottomContainer;return{topContainer:j,bottomContainer:q}}});function hj(A,j){let q=A.plugin(CG),$=q?q.specs.indexOf(j):-1;return $>-1?q.panels[$]:null}var CG=r.fromClass(class{constructor(A){this.input=A.state.facet(wj),this.specs=this.input.filter((q)=>q),this.panels=this.specs.map((q)=>q(A));let j=A.state.facet(q8);this.top=new L6(A,!0,j.topContainer),this.bottom=new L6(A,!1,j.bottomContainer),this.top.sync(this.panels.filter((q)=>q.top)),this.bottom.sync(this.panels.filter((q)=>!q.top));for(let q of this.panels)if(q.dom.classList.add("cm-panel"),q.mount)q.mount()}update(A){let j=A.state.facet(q8);if(this.top.container!=j.topContainer)this.top.sync([]),this.top=new L6(A.view,!0,j.topContainer);if(this.bottom.container!=j.bottomContainer)this.bottom.sync([]),this.bottom=new L6(A.view,!1,j.bottomContainer);this.top.syncClasses(),this.bottom.syncClasses();let q=A.state.facet(wj);if(q!=this.input){let $=q.filter((Z)=>Z),B=[],G=[],K=[],J=[];for(let Z of $){let X=this.specs.indexOf(Z),U;if(X<0)U=Z(A.view),J.push(U);else if(U=this.panels[X],U.update)U.update(A);B.push(U),(U.top?G:K).push(U)}this.specs=$,this.panels=B,this.top.sync(G),this.bottom.sync(K);for(let Z of J)if(Z.dom.classList.add("cm-panel"),Z.mount)Z.mount()}else for(let $ of this.panels)if($.update)$.update(A)}destroy(){this.top.sync([]),this.bottom.sync([])}},{provide:(A)=>R.scrollMargins.of((j)=>{let q=j.plugin(A);return q&&{top:q.top.scrollMargin(),bottom:q.bottom.scrollMargin()}})});class L6{constructor(A,j,q){this.view=A,this.top=j,this.container=q,this.dom=void 0,this.classes="",this.panels=[],this.syncClasses()}sync(A){for(let j of this.panels)if(j.destroy&&A.indexOf(j)<0)j.destroy();this.panels=A,this.syncDOM()}syncDOM(){if(this.panels.length==0){if(this.dom)this.dom.remove(),this.dom=void 0;return}if(!this.dom){this.dom=document.createElement("div"),this.dom.className=this.top?"cm-panels cm-panels-top":"cm-panels cm-panels-bottom",this.dom.style[this.top?"top":"bottom"]="0";let j=this.container||this.view.dom;j.insertBefore(this.dom,this.top?j.firstChild:null)}let A=this.dom.firstChild;for(let j of this.panels)if(j.dom.parentNode==this.dom){while(A!=j.dom)A=$8(A);A=A.nextSibling}else this.dom.insertBefore(j.dom,A);while(A)A=$8(A)}scrollMargin(){return!this.dom||this.container?0:Math.max(0,this.top?this.dom.getBoundingClientRect().bottom-Math.max(0,this.view.scrollDOM.getBoundingClientRect().top):Math.min(innerHeight,this.view.scrollDOM.getBoundingClientRect().bottom)-this.dom.getBoundingClientRect().top)}syncClasses(){if(!this.container||this.classes==this.view.themeClasses)return;for(let A of this.classes.split(" "))if(A)this.container.classList.remove(A);for(let A of(this.classes=this.view.themeClasses).split(" "))if(A)this.container.classList.add(A)}}function $8(A){let j=A.nextSibling;return A.remove(),j}var wj=k.define({enables:CG});class wA extends Aj{compare(A){return this==A||this.constructor==A.constructor&&this.eq(A)}eq(A){return!1}destroy(A){}}wA.prototype.elementClass="";wA.prototype.toDOM=void 0;wA.prototype.mapMode=ZA.TrackBefore;wA.prototype.startSide=wA.prototype.endSide=-1;wA.prototype.point=!0;var b7=k.define(),H1=k.define(),_1={class:"",renderEmptyElements:!1,elementStyle:"",markers:()=>h.empty,lineMarker:()=>null,widgetMarker:()=>null,lineMarkerChange:null,initialSpacer:null,updateSpacer:null,domEventHandlers:{},side:"before"},C6=k.define();function g0(A){return[yG(),C6.of({..._1,...A})]}var D0=k.define({combine:(A)=>A.some((j)=>j)});function yG(A){let j=[N1];if(A&&A.fixed===!1)j.push(D0.of(!0));return j}var N1=r.fromClass(class{constructor(A){this.view=A,this.domAfter=null,this.prevViewport=A.viewport,this.dom=document.createElement("div"),this.dom.className="cm-gutters cm-gutters-before",this.dom.setAttribute("aria-hidden","true"),this.dom.style.minHeight=this.view.contentHeight/this.view.scaleY+"px",this.gutters=A.state.facet(C6).map((j)=>new R0(A,j)),this.fixed=!A.state.facet(D0);for(let j of this.gutters)if(j.config.side=="after")this.getDOMAfter().appendChild(j.dom);else this.dom.appendChild(j.dom);if(this.fixed)this.dom.style.position="sticky";this.syncGutters(!1),A.scrollDOM.insertBefore(this.dom,A.contentDOM)}getDOMAfter(){if(!this.domAfter)this.domAfter=document.createElement("div"),this.domAfter.className="cm-gutters cm-gutters-after",this.domAfter.setAttribute("aria-hidden","true"),this.domAfter.style.minHeight=this.view.contentHeight/this.view.scaleY+"px",this.domAfter.style.position=this.fixed?"sticky":"",this.view.scrollDOM.appendChild(this.domAfter);return this.domAfter}update(A){if(this.updateGutters(A)){let j=this.prevViewport,q=A.view.viewport,$=Math.min(j.to,q.to)-Math.max(j.from,q.from);this.syncGutters($<(q.to-q.from)*0.8)}if(A.geometryChanged){let j=this.view.contentHeight/this.view.scaleY+"px";if(this.dom.style.minHeight=j,this.domAfter)this.domAfter.style.minHeight=j}if(this.view.state.facet(D0)!=!this.fixed){if(this.fixed=!this.fixed,this.dom.style.position=this.fixed?"sticky":"",this.domAfter)this.domAfter.style.position=this.fixed?"sticky":""}this.prevViewport=A.view.viewport}syncGutters(A){let j=this.dom.nextSibling;if(A){if(this.dom.remove(),this.domAfter)this.domAfter.remove()}let q=h.iter(this.view.state.facet(b7),this.view.viewport.from),$=[],B=this.gutters.map((G)=>new bG(G,this.view.viewport,-this.view.documentPadding.top));for(let G of this.view.viewportLineBlocks){if($.length)$=[];if(Array.isArray(G.type)){let K=!0;for(let J of G.type)if(J.type==EA.Text&&K){M0(q,$,J.from);for(let Z of B)Z.line(this.view,J,$);K=!1}else if(J.widget)for(let Z of B)Z.widget(this.view,J)}else if(G.type==EA.Text){M0(q,$,G.from);for(let K of B)K.line(this.view,G,$)}else if(G.widget)for(let K of B)K.widget(this.view,G)}for(let G of B)G.finish();if(A){if(this.view.scrollDOM.insertBefore(this.dom,j),this.domAfter)this.view.scrollDOM.appendChild(this.domAfter)}}updateGutters(A){let j=A.startState.facet(C6),q=A.state.facet(C6),$=A.docChanged||A.heightChanged||A.viewportChanged||!h.eq(A.startState.facet(b7),A.state.facet(b7),A.view.viewport.from,A.view.viewport.to);if(j==q){for(let B of this.gutters)if(B.update(A))$=!0}else{$=!0;let B=[];for(let G of q){let K=j.indexOf(G);if(K<0)B.push(new R0(this.view,G));else this.gutters[K].update(A),B.push(this.gutters[K])}for(let G of this.gutters)if(G.dom.remove(),B.indexOf(G)<0)G.destroy();for(let G of B)if(G.config.side=="after")this.getDOMAfter().appendChild(G.dom);else this.dom.appendChild(G.dom);this.gutters=B}return $}destroy(){for(let A of this.gutters)A.destroy();if(this.dom.remove(),this.domAfter)this.domAfter.remove()}},{provide:(A)=>R.scrollMargins.of((j)=>{let q=j.plugin(A);if(!q||q.gutters.length==0||!q.fixed)return null;let $=q.dom.offsetWidth*j.scaleX,B=q.domAfter?q.domAfter.offsetWidth*j.scaleX:0;return j.textDirection==d.LTR?{left:$,right:B}:{right:$,left:B}})});function B8(A){return Array.isArray(A)?A:[A]}function M0(A,j,q){while(A.value&&A.from<=q){if(A.from==q)j.push(A.value);A.next()}}class bG{constructor(A,j,q){this.gutter=A,this.height=q,this.i=0,this.cursor=h.iter(A.markers,j.from)}addElement(A,j,q){let{gutter:$}=this,B=(j.top-this.height)/A.scaleY,G=j.height/A.scaleY;if(this.i==$.elements.length){let K=new f0(A,G,B,q);$.elements.push(K),$.dom.appendChild(K.dom)}else $.elements[this.i].update(A,G,B,q);this.height=j.bottom,this.i++}line(A,j,q){let $=[];if(M0(this.cursor,$,j.from),q.length)$=$.concat(q);let B=this.gutter.config.lineMarker(A,j,$);if(B)$.unshift(B);let G=this.gutter;if($.length==0&&!G.config.renderEmptyElements)return;this.addElement(A,j,$)}widget(A,j){let q=this.gutter.config.widgetMarker(A,j.widget,j),$=q?[q]:null;for(let B of A.state.facet(H1)){let G=B(A,j.widget,j);if(G)($||($=[])).push(G)}if($)this.addElement(A,j,$)}finish(){let A=this.gutter;while(A.elements.length>this.i){let j=A.elements.pop();A.dom.removeChild(j.dom),j.destroy()}}}class R0{constructor(A,j){this.view=A,this.config=j,this.elements=[],this.spacer=null,this.dom=document.createElement("div"),this.dom.className="cm-gutter"+(this.config.class?" "+this.config.class:"");for(let q in j.domEventHandlers)this.dom.addEventListener(q,($)=>{let B=$.target,G;if(B!=this.dom&&this.dom.contains(B)){while(B.parentNode!=this.dom)B=B.parentNode;let J=B.getBoundingClientRect();G=(J.top+J.bottom)/2}else G=$.clientY;let K=A.lineBlockAtHeight(G-A.documentTop);if(j.domEventHandlers[q](A,K,$))$.preventDefault()});if(this.markers=B8(j.markers(A)),j.initialSpacer)this.spacer=new f0(A,0,0,[j.initialSpacer(A)]),this.dom.appendChild(this.spacer.dom),this.spacer.dom.style.cssText+="visibility: hidden; pointer-events: none"}update(A){let j=this.markers;if(this.markers=B8(this.config.markers(A.view)),this.spacer&&this.config.updateSpacer){let $=this.config.updateSpacer(this.spacer.markers[0],A);if($!=this.spacer.markers[0])this.spacer.update(A.view,0,0,[$])}let q=A.view.viewport;return!h.eq(this.markers,j,q.from,q.to)||(this.config.lineMarkerChange?this.config.lineMarkerChange(A):!1)}destroy(){for(let A of this.elements)A.destroy()}}class f0{constructor(A,j,q,$){this.height=-1,this.above=0,this.markers=[],this.dom=document.createElement("div"),this.dom.className="cm-gutterElement",this.update(A,j,q,$)}update(A,j,q,$){if(this.height!=j)this.height=j,this.dom.style.height=j+"px";if(this.above!=q)this.dom.style.marginTop=(this.above=q)?q+"px":"";if(!D1(this.markers,$))this.setMarkers(A,$)}setMarkers(A,j){let q="cm-gutterElement",$=this.dom.firstChild;for(let B=0,G=0;;){let K=G,J=B<j.length?j[B++]:null,Z=!1;if(J){let X=J.elementClass;if(X)q+=" "+X;for(let U=G;U<this.markers.length;U++)if(this.markers[U].compare(J)){K=U,Z=!0;break}}else K=this.markers.length;while(G<K){let X=this.markers[G++];if(X.toDOM){X.destroy($);let U=$.nextSibling;$.remove(),$=U}}if(!J)break;if(J.toDOM)if(Z)$=$.nextSibling;else this.dom.insertBefore(J.toDOM(A),$);if(Z)G++}this.dom.className=q,this.markers=j}destroy(){this.setMarkers(null,[])}}function D1(A,j){if(A.length!=j.length)return!1;for(let q=0;q<A.length;q++)if(!A[q].compare(j[q]))return!1;return!0}var M1=k.define(),R1=k.define(),tj=k.define({combine(A){return FA(A,{formatNumber:String,domEventHandlers:{}},{domEventHandlers(j,q){let $=Object.assign({},j);for(let B in q){let G=$[B],K=q[B];$[B]=G?(J,Z,X)=>G(J,Z,X)||K(J,Z,X):K}return $}})}});class x7 extends wA{constructor(A){super();this.number=A}eq(A){return this.number==A.number}toDOM(){return document.createTextNode(this.number)}}function eq(A,j){return A.state.facet(tj).formatNumber(j,A.state)}var V1=C6.compute([tj],(A)=>({class:"cm-lineNumbers",renderEmptyElements:!1,markers(j){return j.state.facet(M1)},lineMarker(j,q,$){if($.some((B)=>B.toDOM))return null;return new x7(eq(j,j.state.doc.lineAt(q.from).number))},widgetMarker:(j,q,$)=>{for(let B of j.state.facet(R1)){let G=B(j,q,$);if(G)return G}return null},lineMarkerChange:(j)=>j.startState.facet(tj)!=j.state.facet(tj),initialSpacer(j){return new x7(eq(j,G8(j.state.doc.lines)))},updateSpacer(j,q){let $=eq(q.view,G8(q.view.state.doc.lines));return $==j.number?j:new x7($)},domEventHandlers:A.facet(tj).domEventHandlers,side:"before"}));function xG(A={}){return[tj.of(A),yG(),V1]}function G8(A){let j=9;while(j<A)j=j*10+9;return j}var k1=new class extends wA{constructor(){super(...arguments);this.elementClass="cm-activeLineGutter"}},L1=b7.compute(["selection"],(A)=>{let j=[],q=-1;for(let $ of A.selection.ranges){let B=A.doc.lineAt($.head).from;if(B>q)q=B,j.push(k1.range(B))}return h.of(j)});function SG(){return L1}var P1=0;class s7{constructor(A,j){this.from=A,this.to=j}}class S{constructor(A={}){this.id=P1++,this.perNode=!!A.perNode,this.deserialize=A.deserialize||(()=>{throw new Error("This node type doesn't define a deserialize function")})}add(A){if(this.perNode)throw new RangeError("Can't add per-node props to node types");if(typeof A!="function")A=PA.match(A);return(j)=>{let q=A(j);return q===void 0?null:[this,q]}}}S.closedBy=new S({deserialize:(A)=>A.split(" ")});S.openedBy=new S({deserialize:(A)=>A.split(" ")});S.group=new S({deserialize:(A)=>A.split(" ")});S.isolate=new S({deserialize:(A)=>{if(A&&A!="rtl"&&A!="ltr"&&A!="auto")throw new RangeError("Invalid value for isolate: "+A);return A||"auto"}});S.contextHash=new S({perNode:!0});S.lookAhead=new S({perNode:!0});S.mounted=new S({perNode:!0});class g6{constructor(A,j,q){this.tree=A,this.overlay=j,this.parser=q}static get(A){return A&&A.props&&A.props[S.mounted.id]}}var T1=Object.create(null);class PA{constructor(A,j,q,$=0){this.name=A,this.props=j,this.id=q,this.flags=$}static define(A){let j=A.props&&A.props.length?Object.create(null):T1,q=(A.top?1:0)|(A.skipped?2:0)|(A.error?4:0)|(A.name==null?8:0),$=new PA(A.name||"",j,A.id,q);if(A.props)for(let B of A.props){if(!Array.isArray(B))B=B($);if(B){if(B[0].perNode)throw new RangeError("Can't store a per-node prop on a node type");j[B[0].id]=B[1]}}return $}prop(A){return this.props[A.id]}get isTop(){return(this.flags&1)>0}get isSkipped(){return(this.flags&2)>0}get isError(){return(this.flags&4)>0}get isAnonymous(){return(this.flags&8)>0}is(A){if(typeof A=="string"){if(this.name==A)return!0;let j=this.prop(S.group);return j?j.indexOf(A)>-1:!1}return this.id==A}static match(A){let j=Object.create(null);for(let q in A)for(let $ of q.split(" "))j[$]=A[q];return(q)=>{for(let $=q.prop(S.group),B=-1;B<($?$.length:0);B++){let G=j[B<0?q.name:$[B]];if(G)return G}}}}PA.none=new PA("",Object.create(null),0,8);var c7=new WeakMap,wG=new WeakMap,BA;(function(A){A[A.ExcludeBuffers=1]="ExcludeBuffers",A[A.IncludeAnonymous=2]="IncludeAnonymous",A[A.IgnoreMounts=4]="IgnoreMounts",A[A.IgnoreOverlays=8]="IgnoreOverlays"})(BA||(BA={}));class QA{constructor(A,j,q,$,B){if(this.type=A,this.children=j,this.positions=q,this.length=$,this.props=null,B&&B.length){this.props=Object.create(null);for(let[G,K]of B)this.props[typeof G=="number"?G:G.id]=K}}toString(){let A=g6.get(this);if(A&&!A.overlay)return A.tree.toString();let j="";for(let q of this.children){let $=q.toString();if($){if(j)j+=",";j+=$}}return!this.type.name?j:(/\W/.test(this.type.name)&&!this.type.isError?JSON.stringify(this.type.name):this.type.name)+(j.length?"("+j+")":"")}cursor(A=0){return new n7(this.topNode,A)}cursorAt(A,j=0,q=0){let $=c7.get(this)||this.topNode,B=new n7($);return B.moveTo(A,j),c7.set(this,B._tree),B}get topNode(){return new vA(this,0,0,null)}resolve(A,j=0){let q=f6(c7.get(this)||this.topNode,A,j,!1);return c7.set(this,q),q}resolveInner(A,j=0){let q=f6(wG.get(this)||this.topNode,A,j,!0);return wG.set(this,q),q}resolveStack(A,j=0){return C1(this,A,j)}iterate(A){let{enter:j,leave:q,from:$=0,to:B=this.length}=A,G=A.mode||0,K=(G&BA.IncludeAnonymous)>0;for(let J=this.cursor(G|BA.IncludeAnonymous);;){let Z=!1;if(J.from<=B&&J.to>=$&&(!K&&J.type.isAnonymous||j(J)!==!1)){if(J.firstChild())continue;Z=!0}for(;;){if(Z&&q&&(K||!J.type.isAnonymous))q(J);if(J.nextSibling())break;if(!J.parent())return;Z=!0}}}prop(A){return!A.perNode?this.type.prop(A):this.props?this.props[A.id]:void 0}get propValues(){let A=[];if(this.props)for(let j in this.props)A.push([+j,this.props[j]]);return A}balance(A={}){return this.children.length<=8?this:s0(PA.none,this.children,this.positions,0,this.children.length,0,this.length,(j,q,$)=>new QA(this.type,j,q,$,this.propValues),A.makeTree||((j,q,$)=>new QA(PA.none,j,q,$)))}static build(A){return y1(A)}}QA.empty=new QA(PA.none,[],[],0);class l0{constructor(A,j){this.buffer=A,this.index=j}get id(){return this.buffer[this.index-4]}get start(){return this.buffer[this.index-3]}get end(){return this.buffer[this.index-2]}get size(){return this.buffer[this.index-1]}get pos(){return this.index}next(){this.index-=4}fork(){return new l0(this.buffer,this.index)}}class Nj{constructor(A,j,q){this.buffer=A,this.length=j,this.set=q}get type(){return PA.none}toString(){let A=[];for(let j=0;j<this.buffer.length;)A.push(this.childString(j)),j=this.buffer[j+3];return A.join(",")}childString(A){let j=this.buffer[A],q=this.buffer[A+3],$=this.set.types[j],B=$.name;if(/\W/.test(B)&&!$.isError)B=JSON.stringify(B);if(A+=4,q==A)return B;let G=[];while(A<q)G.push(this.childString(A)),A=this.buffer[A+3];return B+"("+G.join(",")+")"}findChild(A,j,q,$,B){let{buffer:G}=this,K=-1;for(let J=A;J!=j;J=G[J+3])if(mG(B,$,G[J+1],G[J+2])){if(K=J,q>0)break}return K}slice(A,j,q){let $=this.buffer,B=new Uint16Array(j-A),G=0;for(let K=A,J=0;K<j;){B[J++]=$[K++],B[J++]=$[K++]-q;let Z=B[J++]=$[K++]-q;B[J++]=$[K++]-A,G=Math.max(G,Z)}return new Nj(B,G,this.set)}}function mG(A,j,q,$){switch(A){case-2:return q<j;case-1:return $>=j&&q<j;case 0:return q<j&&$>j;case 1:return q<=j&&$>j;case 2:return $>j;case 4:return!0}}function f6(A,j,q,$){var B;while(A.from==A.to||(q<1?A.from>=j:A.from>j)||(q>-1?A.to<=j:A.to<j)){let K=!$&&A instanceof vA&&A.index<0?null:A.parent;if(!K)return A;A=K}let G=$?0:BA.IgnoreOverlays;if($){for(let K=A,J=K.parent;J;K=J,J=K.parent)if(K instanceof vA&&K.index<0&&((B=J.enter(j,q,G))===null||B===void 0?void 0:B.from)!=K.from)A=J}for(;;){let K=A.enter(j,q,G);if(!K)return A;A=K}}class d0{cursor(A=0){return new n7(this,A)}getChild(A,j=null,q=null){let $=hG(this,A,j,q);return $.length?$[0]:null}getChildren(A,j=null,q=null){return hG(this,A,j,q)}resolve(A,j=0){return f6(this,A,j,!1)}resolveInner(A,j=0){return f6(this,A,j,!0)}matchContext(A){return p0(this.parent,A)}enterUnfinishedNodesBefore(A){let j=this.childBefore(A),q=this;while(j){let $=j.lastChild;if(!$||$.to!=j.to)break;if($.type.isError&&$.from==$.to)q=j,j=$.prevSibling;else j=$}return q}get node(){return this}get next(){return this.parent}}class vA extends d0{constructor(A,j,q,$){super();this._tree=A,this.from=j,this.index=q,this._parent=$}get type(){return this._tree.type}get name(){return this._tree.type.name}get to(){return this.from+this._tree.length}nextChild(A,j,q,$,B=0){for(let G=this;;){for(let{children:K,positions:J}=G._tree,Z=j>0?K.length:-1;A!=Z;A+=j){let X=K[A],U=J[A]+G.from;if(!mG($,q,U,U+X.length))continue;if(X instanceof Nj){if(B&BA.ExcludeBuffers)continue;let Y=X.findChild(0,X.buffer.length,j,q-U,$);if(Y>-1)return new _j(new uG(G,X,A,U),null,Y)}else if(B&BA.IncludeAnonymous||(!X.type.isAnonymous||c0(X))){let Y;if(!(B&BA.IgnoreMounts)&&(Y=g6.get(X))&&!Y.overlay)return new vA(Y.tree,U,A,G);let Q=new vA(X,U,A,G);return B&BA.IncludeAnonymous||!Q.type.isAnonymous?Q:Q.nextChild(j<0?X.children.length-1:0,j,q,$)}}if(B&BA.IncludeAnonymous||!G.type.isAnonymous)return null;if(G.index>=0)A=G.index+j;else A=j<0?-1:G._parent._tree.children.length;if(G=G._parent,!G)return null}}get firstChild(){return this.nextChild(0,1,0,4)}get lastChild(){return this.nextChild(this._tree.children.length-1,-1,0,4)}childAfter(A){return this.nextChild(0,1,A,2)}childBefore(A){return this.nextChild(this._tree.children.length-1,-1,A,-2)}enter(A,j,q=0){let $;if(!(q&BA.IgnoreOverlays)&&($=g6.get(this._tree))&&$.overlay){let B=A-this.from;for(let{from:G,to:K}of $.overlay)if((j>0?G<=B:G<B)&&(j<0?K>=B:K>B))return new vA($.tree,$.overlay[0].from+this.from,-1,this)}return this.nextChild(0,1,A,j,q)}nextSignificantParent(){let A=this;while(A.type.isAnonymous&&A._parent)A=A._parent;return A}get parent(){return this._parent?this._parent.nextSignificantParent():null}get nextSibling(){return this._parent&&this.index>=0?this._parent.nextChild(this.index+1,1,0,4):null}get prevSibling(){return this._parent&&this.index>=0?this._parent.nextChild(this.index-1,-1,0,4):null}get tree(){return this._tree}toTree(){return this._tree}toString(){return this._tree.toString()}}function hG(A,j,q,$){let B=A.cursor(),G=[];if(!B.firstChild())return G;if(q!=null){for(let K=!1;!K;)if(K=B.type.is(q),!B.nextSibling())return G}for(;;){if($!=null&&B.type.is($))return G;if(B.type.is(j))G.push(B.node);if(!B.nextSibling())return $==null?G:[]}}function p0(A,j,q=j.length-1){for(let $=A;q>=0;$=$.parent){if(!$)return!1;if(!$.type.isAnonymous){if(j[q]&&j[q]!=$.name)return!1;q--}}return!0}class uG{constructor(A,j,q,$){this.parent=A,this.buffer=j,this.index=q,this.start=$}}class _j extends d0{get name(){return this.type.name}get from(){return this.context.start+this.context.buffer.buffer[this.index+1]}get to(){return this.context.start+this.context.buffer.buffer[this.index+2]}constructor(A,j,q){super();this.context=A,this._parent=j,this.index=q,this.type=A.buffer.set.types[A.buffer.buffer[q]]}child(A,j,q){let{buffer:$}=this.context,B=$.findChild(this.index+4,$.buffer[this.index+3],A,j-this.context.start,q);return B<0?null:new _j(this.context,this,B)}get firstChild(){return this.child(1,0,4)}get lastChild(){return this.child(-1,0,4)}childAfter(A){return this.child(1,A,2)}childBefore(A){return this.child(-1,A,-2)}enter(A,j,q=0){if(q&BA.ExcludeBuffers)return null;let{buffer:$}=this.context,B=$.findChild(this.index+4,$.buffer[this.index+3],j>0?1:-1,A-this.context.start,j);return B<0?null:new _j(this.context,this,B)}get parent(){return this._parent||this.context.parent.nextSignificantParent()}externalSibling(A){return this._parent?null:this.context.parent.nextChild(this.context.index+A,A,0,4)}get nextSibling(){let{buffer:A}=this.context,j=A.buffer[this.index+3];if(j<(this._parent?A.buffer[this._parent.index+3]:A.buffer.length))return new _j(this.context,this._parent,j);return this.externalSibling(1)}get prevSibling(){let{buffer:A}=this.context,j=this._parent?this._parent.index+4:0;if(this.index==j)return this.externalSibling(-1);return new _j(this.context,this._parent,A.findChild(j,this.index,-1,0,4))}get tree(){return null}toTree(){let A=[],j=[],{buffer:q}=this.context,$=this.index+4,B=q.buffer[this.index+3];if(B>$){let G=q.buffer[this.index+1];A.push(q.slice($,B,G)),j.push(0)}return new QA(this.type,A,j,this.to-this.from)}toString(){return this.context.buffer.childString(this.index)}}function gG(A){if(!A.length)return null;let j=0,q=A[0];for(let G=1;G<A.length;G++){let K=A[G];if(K.from>q.from||K.to<q.to)q=K,j=G}let $=q instanceof vA&&q.index<0?null:q.parent,B=A.slice();if($)B[j]=$;else B.splice(j,1);return new fG(B,q)}class fG{constructor(A,j){this.heads=A,this.node=j}get next(){return gG(this.heads)}}function C1(A,j,q){let $=A.resolveInner(j,q),B=null;for(let G=$ instanceof vA?$:$.context.parent;G;G=G.parent)if(G.index<0){let K=G.parent;(B||(B=[$])).push(K.resolve(j,q)),G=K}else{let K=g6.get(G.tree);if(K&&K.overlay&&K.overlay[0].from<=j&&K.overlay[K.overlay.length-1].to>=j){let J=new vA(K.tree,K.overlay[0].from+G.from,-1,G);(B||(B=[$])).push(f6(J,j,q,!1))}}return B?gG(B):$}class n7{get name(){return this.type.name}constructor(A,j=0){if(this.mode=j,this.buffer=null,this.stack=[],this.index=0,this.bufferNode=null,A instanceof vA)this.yieldNode(A);else{this._tree=A.context.parent,this.buffer=A.context;for(let q=A._parent;q;q=q._parent)this.stack.unshift(q.index);this.bufferNode=A,this.yieldBuf(A.index)}}yieldNode(A){if(!A)return!1;return this._tree=A,this.type=A.type,this.from=A.from,this.to=A.to,!0}yieldBuf(A,j){this.index=A;let{start:q,buffer:$}=this.buffer;return this.type=j||$.set.types[$.buffer[A]],this.from=q+$.buffer[A+1],this.to=q+$.buffer[A+2],!0}yield(A){if(!A)return!1;if(A instanceof vA)return this.buffer=null,this.yieldNode(A);return this.buffer=A.context,this.yieldBuf(A.index,A.type)}toString(){return this.buffer?this.buffer.buffer.childString(this.index):this._tree.toString()}enterChild(A,j,q){if(!this.buffer)return this.yield(this._tree.nextChild(A<0?this._tree._tree.children.length-1:0,A,j,q,this.mode));let{buffer:$}=this.buffer,B=$.findChild(this.index+4,$.buffer[this.index+3],A,j-this.buffer.start,q);if(B<0)return!1;return this.stack.push(this.index),this.yieldBuf(B)}firstChild(){return this.enterChild(1,0,4)}lastChild(){return this.enterChild(-1,0,4)}childAfter(A){return this.enterChild(1,A,2)}childBefore(A){return this.enterChild(-1,A,-2)}enter(A,j,q=this.mode){if(!this.buffer)return this.yield(this._tree.enter(A,j,q));return q&BA.ExcludeBuffers?!1:this.enterChild(1,A,j)}parent(){if(!this.buffer)return this.yieldNode(this.mode&BA.IncludeAnonymous?this._tree._parent:this._tree.parent);if(this.stack.length)return this.yieldBuf(this.stack.pop());let A=this.mode&BA.IncludeAnonymous?this.buffer.parent:this.buffer.parent.nextSignificantParent();return this.buffer=null,this.yieldNode(A)}sibling(A){if(!this.buffer)return!this._tree._parent?!1:this.yield(this._tree.index<0?null:this._tree._parent.nextChild(this._tree.index+A,A,0,4,this.mode));let{buffer:j}=this.buffer,q=this.stack.length-1;if(A<0){let $=q<0?0:this.stack[q]+4;if(this.index!=$)return this.yieldBuf(j.findChild($,this.index,-1,0,4))}else{let $=j.buffer[this.index+3];if($<(q<0?j.buffer.length:j.buffer[this.stack[q]+3]))return this.yieldBuf($)}return q<0?this.yield(this.buffer.parent.nextChild(this.buffer.index+A,A,0,4,this.mode)):!1}nextSibling(){return this.sibling(1)}prevSibling(){return this.sibling(-1)}atLastNode(A){let j,q,{buffer:$}=this;if($){if(A>0){if(this.index<$.buffer.buffer.length)return!1}else for(let B=0;B<this.index;B++)if($.buffer.buffer[B+3]<this.index)return!1;({index:j,parent:q}=$)}else({index:j,_parent:q}=this._tree);for(;q;{index:j,_parent:q}=q)if(j>-1)for(let B=j+A,G=A<0?-1:q._tree.children.length;B!=G;B+=A){let K=q._tree.children[B];if(this.mode&BA.IncludeAnonymous||K instanceof Nj||!K.type.isAnonymous||c0(K))return!1}return!0}move(A,j){if(j&&this.enterChild(A,0,4))return!0;for(;;){if(this.sibling(A))return!0;if(this.atLastNode(A)||!this.parent())return!1}}next(A=!0){return this.move(1,A)}prev(A=!0){return this.move(-1,A)}moveTo(A,j=0){while(this.from==this.to||(j<1?this.from>=A:this.from>A)||(j>-1?this.to<=A:this.to<A))if(!this.parent())break;while(this.enterChild(1,A,j));return this}get node(){if(!this.buffer)return this._tree;let A=this.bufferNode,j=null,q=0;if(A&&A.context==this.buffer)A:for(let $=this.index,B=this.stack.length;B>=0;){for(let G=A;G;G=G._parent)if(G.index==$){if($==this.index)return G;j=G,q=B+1;break A}$=this.stack[--B]}for(let $=q;$<this.stack.length;$++)j=new _j(this.buffer,j,this.stack[$]);return this.bufferNode=new _j(this.buffer,j,this.index)}get tree(){return this.buffer?null:this._tree._tree}iterate(A,j){for(let q=0;;){let $=!1;if(this.type.isAnonymous||A(this)!==!1){if(this.firstChild()){q++;continue}if(!this.type.isAnonymous)$=!0}for(;;){if($&&j)j(this);if($=this.type.isAnonymous,!q)return;if(this.nextSibling())break;this.parent(),q--,$=!0}}}matchContext(A){if(!this.buffer)return p0(this.node.parent,A);let{buffer:j}=this.buffer,{types:q}=j.set;for(let $=A.length-1,B=this.stack.length-1;$>=0;B--){if(B<0)return p0(this._tree,A,$);let G=q[j.buffer[this.stack[B]]];if(!G.isAnonymous){if(A[$]&&A[$]!=G.name)return!1;$--}}return!0}}function c0(A){return A.children.some((j)=>j instanceof Nj||!j.type.isAnonymous||c0(j))}function y1(A){var j;let{buffer:q,nodeSet:$,maxBufferLength:B=1024,reused:G=[],minRepeatType:K=$.types.length}=A,J=Array.isArray(q)?new l0(q,q.length):q,Z=$.types,X=0,U=0;function Y(D,T,P,x,u,c){let{id:w,start:y,end:p,size:g}=J,n=U,WA=X;while(g<0)if(J.next(),g==-1){let Xj=G[w];P.push(Xj),x.push(y-D);return}else if(g==-3){X=w;return}else if(g==-4){U=w;return}else throw new RangeError(`Unrecognized record size: ${g}`);let MA=Z[w],oA,JA,yA=y-D;if(p-y<=B&&(JA=I(J.pos-T,u))){let Xj=new Uint16Array(JA.size-JA.skip),bA=J.pos-JA.size,tA=Xj.length;while(J.pos>bA)tA=W(JA.start,Xj,tA);oA=new Nj(Xj,p-JA.start,$),yA=JA.start-D}else{let Xj=J.pos-g;J.next();let bA=[],tA=[],Pj=w>=K?w:-1,lj=0,G7=p;while(J.pos>Xj)if(Pj>=0&&J.id==Pj&&J.size>=0){if(J.end<=G7-B)F(bA,tA,y,lj,J.end,G7,Pj,n,WA),lj=bA.length,G7=J.end;J.next()}else if(c>2500)Q(y,Xj,bA,tA);else Y(y,Xj,bA,tA,Pj,c+1);if(Pj>=0&&lj>0&&lj<bA.length)F(bA,tA,y,lj,y,G7,Pj,n,WA);if(bA.reverse(),tA.reverse(),Pj>-1&&lj>0){let u$=O(MA,WA);oA=s0(MA,bA,tA,0,bA.length,0,p-y,u$,u$)}else oA=z(MA,bA,tA,p-y,n-p,WA)}P.push(oA),x.push(yA)}function Q(D,T,P,x){let u=[],c=0,w=-1;while(J.pos>T){let{id:y,start:p,end:g,size:n}=J;if(n>4)J.next();else if(w>-1&&p<w)break;else{if(w<0)w=g-B;u.push(y,p,g),c++,J.next()}}if(c){let y=new Uint16Array(c*4),p=u[u.length-2];for(let g=u.length-3,n=0;g>=0;g-=3)y[n++]=u[g],y[n++]=u[g+1]-p,y[n++]=u[g+2]-p,y[n++]=n;P.push(new Nj(y,u[2]-p,$)),x.push(p-D)}}function O(D,T){return(P,x,u)=>{let c=0,w=P.length-1,y,p;if(w>=0&&(y=P[w])instanceof QA){if(!w&&y.type==D&&y.length==u)return y;if(p=y.prop(S.lookAhead))c=x[w]+y.length+p}return z(D,P,x,u,c,T)}}function F(D,T,P,x,u,c,w,y,p){let g=[],n=[];while(D.length>x)g.push(D.pop()),n.push(T.pop()+P-u);D.push(z($.types[w],g,n,c-u,y-c,p)),T.push(u-P)}function z(D,T,P,x,u,c,w){if(c){let y=[S.contextHash,c];w=w?[y].concat(w):[y]}if(u>25){let y=[S.lookAhead,u];w=w?[y].concat(w):[y]}return new QA(D,T,P,x,w)}function I(D,T){let P=J.fork(),x=0,u=0,c=0,w=P.end-B,y={size:0,start:0,skip:0};A:for(let p=P.pos-D;P.pos>p;){let g=P.size;if(P.id==T&&g>=0){y.size=x,y.start=u,y.skip=c,c+=4,x+=4,P.next();continue}let n=P.pos-g;if(g<0||n<p||P.start<w)break;let WA=P.id>=K?4:0,MA=P.start;P.next();while(P.pos>n){if(P.size<0)if(P.size==-3)WA+=4;else break A;else if(P.id>=K)WA+=4;P.next()}u=MA,x+=g,c+=WA}if(T<0||x==D)y.size=x,y.start=u,y.skip=c;return y.size>4?y:void 0}function W(D,T,P){let{id:x,start:u,end:c,size:w}=J;if(J.next(),w>=0&&x<K){let y=P;if(w>4){let p=J.pos-(w-4);while(J.pos>p)P=W(D,T,P)}T[--P]=y,T[--P]=c-D,T[--P]=u-D,T[--P]=x}else if(w==-3)X=x;else if(w==-4)U=x;return P}let N=[],_=[];while(J.pos>0)Y(A.start||0,A.bufferStart||0,N,_,-1,0);let H=(j=A.length)!==null&&j!==void 0?j:N.length?_[0]+N[0].length:0;return new QA(Z[A.topID],N.reverse(),_.reverse(),H)}var vG=new WeakMap;function i7(A,j){if(!A.isAnonymous||j instanceof Nj||j.type!=A)return 1;let q=vG.get(j);if(q==null){q=1;for(let $ of j.children){if($.type!=A||!($ instanceof QA)){q=1;break}q+=i7(A,$)}vG.set(j,q)}return q}function s0(A,j,q,$,B,G,K,J,Z){let X=0;for(let F=$;F<B;F++)X+=i7(A,j[F]);let U=Math.ceil(X*1.5/8),Y=[],Q=[];function O(F,z,I,W,N){for(let _=I;_<W;){let H=_,D=z[_],T=i7(A,F[_]);_++;for(;_<W;_++){let P=i7(A,F[_]);if(T+P>=U)break;T+=P}if(_==H+1){if(T>U){let P=F[H];O(P.children,P.positions,0,P.children.length,z[H]+N);continue}Y.push(F[H])}else{let P=z[_-1]+F[_-1].length-D;Y.push(s0(A,F,z,H,_,D,P,null,Z))}Q.push(D+N-G)}}return O(j,q,$,B,0),(J||Z)(Y,Q,K)}class Dj{constructor(A,j,q,$,B=!1,G=!1){this.from=A,this.to=j,this.tree=q,this.offset=$,this.open=(B?1:0)|(G?2:0)}get openStart(){return(this.open&1)>0}get openEnd(){return(this.open&2)>0}static addTree(A,j=[],q=!1){let $=[new Dj(0,A.length,A,0,!1,q)];for(let B of j)if(B.to>A.length)$.push(B);return $}static applyChanges(A,j,q=128){if(!j.length)return A;let $=[],B=1,G=A.length?A[0]:null;for(let K=0,J=0,Z=0;;K++){let X=K<j.length?j[K]:null,U=X?X.fromA:1e9;if(U-J>=q)while(G&&G.from<U){let Y=G;if(J>=Y.from||U<=Y.to||Z){let Q=Math.max(Y.from,J)-Z,O=Math.min(Y.to,U)-Z;Y=Q>=O?null:new Dj(Q,O,Y.tree,Y.offset+Z,K>0,!!X)}if(Y)$.push(Y);if(G.to>U)break;G=B<A.length?A[B++]:null}if(!X)break;J=X.toA,Z=X.toA-X.toB}return $}}class i0{startParse(A,j,q){if(typeof A=="string")A=new pG(A);return q=!q?[new s7(0,A.length)]:q.length?q.map(($)=>new s7($.from,$.to)):[new s7(0,0)],this.createParse(A,j||[],q)}parse(A,j,q){let $=this.startParse(A,j,q);for(;;){let B=$.advance();if(B)return B}}}class pG{constructor(A){this.string=A}get length(){return this.string.length}chunk(A){return this.string.slice(A)}get lineChunks(){return!1}read(A,j){return this.string.slice(A,j)}}var E2=new S({perNode:!0});var b1=0;class mA{constructor(A,j,q,$){this.name=A,this.set=j,this.base=q,this.modified=$,this.id=b1++}toString(){let{name:A}=this;for(let j of this.modified)if(j.name)A=`${j.name}(${A})`;return A}static define(A,j){let q=typeof A=="string"?A:"?";if(A instanceof mA)j=A;if(j===null||j===void 0?void 0:j.base)throw new Error("Can not derive from a modified tag");let $=new mA(q,[],null,[]);if($.set.push($),j)for(let B of j.set)$.set.push(B);return $}static defineModifier(A){let j=new t7(A);return(q)=>{if(q.modified.indexOf(j)>-1)return q;return t7.get(q.base||q,q.modified.concat(j).sort(($,B)=>$.id-B.id))}}}var x1=0;class t7{constructor(A){this.name=A,this.instances=[],this.id=x1++}static get(A,j){if(!j.length)return A;let q=j[0].instances.find((K)=>K.base==A&&S1(j,K.modified));if(q)return q;let $=[],B=new mA(A.name,$,A,j);for(let K of j)K.instances.push(B);let G=w1(j);for(let K of A.set)if(!K.modified.length)for(let J of G)$.push(t7.get(K,J));return B}}function S1(A,j){return A.length==j.length&&A.every((q,$)=>q==j[$])}function w1(A){let j=[[]];for(let q=0;q<A.length;q++)for(let $=0,B=j.length;$<B;$++)j.push(j[$].concat(A[q]));return j.sort((q,$)=>$.length-q.length)}function cG(A){let j=Object.create(null);for(let q in A){let $=A[q];if(!Array.isArray($))$=[$];for(let B of q.split(" "))if(B){let G=[],K=2,J=B;for(let Y=0;;){if(J=="..."&&Y>0&&Y+3==B.length){K=1;break}let Q=/^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(J);if(!Q)throw new RangeError("Invalid path: "+B);if(G.push(Q[0]=="*"?"":Q[0][0]=='"'?JSON.parse(Q[0]):Q[0]),Y+=Q[0].length,Y==B.length)break;let O=B[Y++];if(Y==B.length&&O=="!"){K=0;break}if(O!="/")throw new RangeError("Invalid path: "+B);J=B.slice(Y)}let Z=G.length-1,X=G[Z];if(!X)throw new RangeError("Invalid path: "+B);let U=new l6($,K,Z>0?G.slice(0,Z):null);j[X]=U.sort(j[X])}}return sG.add(j)}var sG=new S;class l6{constructor(A,j,q,$){this.tags=A,this.mode=j,this.context=q,this.next=$}get opaque(){return this.mode==0}get inherit(){return this.mode==1}sort(A){if(!A||A.depth<this.depth)return this.next=A,this;return A.next=this.sort(A.next),A}get depth(){return this.context?this.context.length:0}}l6.empty=new l6([],2,null);function r0(A,j){let q=Object.create(null);for(let G of A)if(!Array.isArray(G.tag))q[G.tag.id]=G.class;else for(let K of G.tag)q[K.id]=G.class;let{scope:$,all:B=null}=j||{};return{style:(G)=>{let K=B;for(let J of G)for(let Z of J.set){let X=q[Z.id];if(X){K=K?K+" "+X:X;break}}return K},scope:$}}function h1(A,j){let q=null;for(let $ of A){let B=$.style(j);if(B)q=q?q+" "+B:B}return q}function iG(A,j,q,$=0,B=A.length){let G=new nG($,Array.isArray(j)?j:[j],q);G.highlightRange(A.cursor(),$,B,"",G.highlighters),G.flush(B)}class nG{constructor(A,j,q){this.at=A,this.highlighters=j,this.span=q,this.class=""}startSpan(A,j){if(j!=this.class){if(this.flush(A),A>this.at)this.at=A;this.class=j}}flush(A){if(A>this.at&&this.class)this.span(this.at,A,this.class)}highlightRange(A,j,q,$,B){let{type:G,from:K,to:J}=A;if(K>=q||J<=j)return;if(G.isTop)B=this.highlighters.filter((Q)=>!Q.scope||Q.scope(G));let Z=$,X=v1(A)||l6.empty,U=h1(B,X.tags);if(U){if(Z)Z+=" ";if(Z+=U,X.mode==1)$+=($?" ":"")+U}if(this.startSpan(Math.max(j,K),Z),X.opaque)return;let Y=A.tree&&A.tree.prop(S.mounted);if(Y&&Y.overlay){let Q=A.node.enter(Y.overlay[0].from+K,1),O=this.highlighters.filter((z)=>!z.scope||z.scope(Y.tree.type)),F=A.firstChild();for(let z=0,I=K;;z++){let W=z<Y.overlay.length?Y.overlay[z]:null,N=W?W.from+K:J,_=Math.max(j,I),H=Math.min(q,N);if(_<H&&F){while(A.from<H)if(this.highlightRange(A,_,H,$,B),this.startSpan(Math.min(H,A.to),Z),A.to>=N||!A.nextSibling())break}if(!W||N>q)break;if(I=W.to+K,I>j)this.highlightRange(Q.cursor(),Math.max(j,W.from+K),Math.min(q,I),"",O),this.startSpan(Math.min(q,I),Z)}if(F)A.parent()}else if(A.firstChild()){if(Y)$="";do{if(A.to<=j)continue;if(A.from>=q)break;this.highlightRange(A,j,q,$,B),this.startSpan(Math.min(q,A.to),Z)}while(A.nextSibling());A.parent()}}}function v1(A){let j=A.type.prop(sG);while(j&&j.context&&!A.matchContext(j.context))j=j.next;return j||null}var M=mA.define,a7=M(),Mj=M(),lG=M(Mj),dG=M(Mj),Rj=M(),r7=M(Rj),n0=M(Rj),Kj=M(),vj=M(Kj),Bj=M(),Gj=M(),a0=M(),p6=M(a0),o7=M(),V={comment:a7,lineComment:M(a7),blockComment:M(a7),docComment:M(a7),name:Mj,variableName:M(Mj),typeName:lG,tagName:M(lG),propertyName:dG,attributeName:M(dG),className:M(Mj),labelName:M(Mj),namespace:M(Mj),macroName:M(Mj),literal:Rj,string:r7,docString:M(r7),character:M(r7),attributeValue:M(r7),number:n0,integer:M(n0),float:M(n0),bool:M(Rj),regexp:M(Rj),escape:M(Rj),color:M(Rj),url:M(Rj),keyword:Bj,self:M(Bj),null:M(Bj),atom:M(Bj),unit:M(Bj),modifier:M(Bj),operatorKeyword:M(Bj),controlKeyword:M(Bj),definitionKeyword:M(Bj),moduleKeyword:M(Bj),operator:Gj,derefOperator:M(Gj),arithmeticOperator:M(Gj),logicOperator:M(Gj),bitwiseOperator:M(Gj),compareOperator:M(Gj),updateOperator:M(Gj),definitionOperator:M(Gj),typeOperator:M(Gj),controlOperator:M(Gj),punctuation:a0,separator:M(a0),bracket:p6,angleBracket:M(p6),squareBracket:M(p6),paren:M(p6),brace:M(p6),content:Kj,heading:vj,heading1:M(vj),heading2:M(vj),heading3:M(vj),heading4:M(vj),heading5:M(vj),heading6:M(vj),contentSeparator:M(Kj),list:M(Kj),quote:M(Kj),emphasis:M(Kj),strong:M(Kj),link:M(Kj),monospace:M(Kj),strikethrough:M(Kj),inserted:M(),deleted:M(),changed:M(),invalid:M(),meta:o7,documentMeta:M(o7),annotation:M(o7),processingInstruction:M(o7),definition:mA.defineModifier("definition"),constant:mA.defineModifier("constant"),function:mA.defineModifier("function"),standard:mA.defineModifier("standard"),local:mA.defineModifier("local"),special:mA.defineModifier("special")};for(let A in V){let j=V[A];if(j instanceof mA)j.name=A}var N2=r0([{tag:V.link,class:"tok-link"},{tag:V.heading,class:"tok-heading"},{tag:V.emphasis,class:"tok-emphasis"},{tag:V.strong,class:"tok-strong"},{tag:V.keyword,class:"tok-keyword"},{tag:V.atom,class:"tok-atom"},{tag:V.bool,class:"tok-bool"},{tag:V.url,class:"tok-url"},{tag:V.labelName,class:"tok-labelName"},{tag:V.inserted,class:"tok-inserted"},{tag:V.deleted,class:"tok-deleted"},{tag:V.literal,class:"tok-literal"},{tag:V.string,class:"tok-string"},{tag:V.number,class:"tok-number"},{tag:[V.regexp,V.escape,V.special(V.string)],class:"tok-string2"},{tag:V.variableName,class:"tok-variableName"},{tag:V.local(V.variableName),class:"tok-variableName tok-local"},{tag:V.definition(V.variableName),class:"tok-variableName tok-definition"},{tag:V.special(V.variableName),class:"tok-variableName2"},{tag:V.definition(V.propertyName),class:"tok-propertyName tok-definition"},{tag:V.typeName,class:"tok-typeName"},{tag:V.namespace,class:"tok-namespace"},{tag:V.className,class:"tok-className"},{tag:V.macroName,class:"tok-macroName"},{tag:V.propertyName,class:"tok-propertyName"},{tag:V.operator,class:"tok-operator"},{tag:V.comment,class:"tok-comment"},{tag:V.meta,class:"tok-meta"},{tag:V.invalid,class:"tok-invalid"},{tag:V.punctuation,class:"tok-punctuation"}]);var o0,c6=new S;var m1=new S;class iA{constructor(A,j,q=[],$=""){if(this.data=A,this.name=$,!v.prototype.hasOwnProperty("tree"))Object.defineProperty(v.prototype,"tree",{get(){return GA(this)}});this.parser=j,this.extension=[Vj.of(this),v.languageData.of((B,G,K)=>{let J=aG(B,G,K),Z=J.type.prop(c6);if(!Z)return[];let X=B.facet(Z),U=J.type.prop(m1);if(U){let Y=J.resolve(G-J.from,K);for(let Q of U)if(Q.test(Y,B)){let O=B.facet(Q.facet);return Q.type=="replace"?O:O.concat(X)}}return X})].concat(q)}isActiveAt(A,j,q=-1){return aG(A,j,q).type.prop(c6)==this.data}findRegions(A){let j=A.facet(Vj);if((j===null||j===void 0?void 0:j.data)==this.data)return[{from:0,to:A.doc.length}];if(!j||!j.allowsNesting)return[];let q=[],$=(B,G)=>{if(B.prop(c6)==this.data){q.push({from:G,to:G+B.length});return}let K=B.prop(S.mounted);if(K){if(K.tree.prop(c6)==this.data){if(K.overlay)for(let J of K.overlay)q.push({from:J.from+G,to:J.to+G});else q.push({from:G,to:G+B.length});return}else if(K.overlay){let J=q.length;if($(K.tree,K.overlay[0].from+G),q.length>J)return}}for(let J=0;J<B.children.length;J++){let Z=B.children[J];if(Z instanceof QA)$(Z,B.positions[J]+G)}};return $(GA(A),0),q}get allowsNesting(){return!0}}iA.setState=b.define();function aG(A,j,q){let $=A.facet(Vj),B=GA(A).topNode;if(!$||$.allowsNesting){for(let G=B;G;G=G.enter(j,q,BA.ExcludeBuffers))if(G.type.isTop)B=G}return B}function GA(A){let j=A.field(iA.state,!1);return j?j.tree:QA.empty}class q5{constructor(A){this.doc=A,this.cursorPos=0,this.string="",this.cursor=A.iter()}get length(){return this.doc.length}syncTo(A){return this.string=this.cursor.next(A-this.cursorPos).value,this.cursorPos=A+this.string.length,this.cursorPos-this.string.length}chunk(A){return this.syncTo(A),this.string}get lineChunks(){return!0}read(A,j){let q=this.cursorPos-this.string.length;if(A<q||j>=this.cursorPos)return this.doc.sliceString(A,j);else return this.string.slice(A-q,j-q)}}var d6=null;class Aq{constructor(A,j,q=[],$,B,G,K,J){this.parser=A,this.state=j,this.fragments=q,this.tree=$,this.treeLen=B,this.viewport=G,this.skipped=K,this.scheduleOn=J,this.parse=null,this.tempSkipped=[]}static create(A,j,q){return new Aq(A,j,[],QA.empty,0,q,[],null)}startParse(){return this.parser.startParse(new q5(this.state.doc),this.fragments)}work(A,j){if(j!=null&&j>=this.state.doc.length)j=void 0;if(this.tree!=QA.empty&&this.isDone(j!==null&&j!==void 0?j:this.state.doc.length))return this.takeTree(),!0;return this.withContext(()=>{var q;if(typeof A=="number"){let $=Date.now()+A;A=()=>Date.now()>$}if(!this.parse)this.parse=this.startParse();if(j!=null&&(this.parse.stoppedAt==null||this.parse.stoppedAt>j)&&j<this.state.doc.length)this.parse.stopAt(j);for(;;){let $=this.parse.advance();if($)if(this.fragments=this.withoutTempSkipped(Dj.addTree($,this.fragments,this.parse.stoppedAt!=null)),this.treeLen=(q=this.parse.stoppedAt)!==null&&q!==void 0?q:this.state.doc.length,this.tree=$,this.parse=null,this.treeLen<(j!==null&&j!==void 0?j:this.state.doc.length))this.parse=this.startParse();else return!0;if(A())return!1}})}takeTree(){let A,j;if(this.parse&&(A=this.parse.parsedPos)>=this.treeLen){if(this.parse.stoppedAt==null||this.parse.stoppedAt>A)this.parse.stopAt(A);this.withContext(()=>{while(!(j=this.parse.advance()));}),this.treeLen=A,this.tree=j,this.fragments=this.withoutTempSkipped(Dj.addTree(this.tree,this.fragments,!0)),this.parse=null}}withContext(A){let j=d6;d6=this;try{return A()}finally{d6=j}}withoutTempSkipped(A){for(let j;j=this.tempSkipped.pop();)A=rG(A,j.from,j.to);return A}changes(A,j){let{fragments:q,tree:$,treeLen:B,viewport:G,skipped:K}=this;if(this.takeTree(),!A.empty){let J=[];if(A.iterChangedRanges((Z,X,U,Y)=>J.push({fromA:Z,toA:X,fromB:U,toB:Y})),q=Dj.applyChanges(q,J),$=QA.empty,B=0,G={from:A.mapPos(G.from,-1),to:A.mapPos(G.to,1)},this.skipped.length){K=[];for(let Z of this.skipped){let X=A.mapPos(Z.from,1),U=A.mapPos(Z.to,-1);if(X<U)K.push({from:X,to:U})}}}return new Aq(this.parser,j,q,$,B,G,K,this.scheduleOn)}updateViewport(A){if(this.viewport.from==A.from&&this.viewport.to==A.to)return!1;this.viewport=A;let j=this.skipped.length;for(let q=0;q<this.skipped.length;q++){let{from:$,to:B}=this.skipped[q];if($<A.to&&B>A.from)this.fragments=rG(this.fragments,$,B),this.skipped.splice(q--,1)}if(this.skipped.length>=j)return!1;return this.reset(),!0}reset(){if(this.parse)this.takeTree(),this.parse=null}skipUntilInView(A,j){this.skipped.push({from:A,to:j})}static getSkippingParser(A){return new class extends i0{createParse(j,q,$){let B=$[0].from,G=$[$.length-1].to;return{parsedPos:B,advance(){let J=d6;if(J){for(let Z of $)J.tempSkipped.push(Z);if(A)J.scheduleOn=J.scheduleOn?Promise.all([J.scheduleOn,A]):A}return this.parsedPos=G,new QA(PA.none,[],[],G-B)},stoppedAt:null,stopAt(){}}}}}isDone(A){A=Math.min(A,this.state.doc.length);let j=this.fragments;return this.treeLen>=A&&j.length&&j[0].from==0&&j[0].to>=A}static get(){return d6}}function rG(A,j,q){return Dj.applyChanges(A,[{fromA:j,toA:q,fromB:j,toB:q}])}class $6{constructor(A){this.context=A,this.tree=A.tree}apply(A){if(!A.docChanged&&this.tree==this.context.tree)return this;let j=this.context.changes(A.changes,A.state),q=this.context.treeLen==A.startState.doc.length?void 0:Math.max(A.changes.mapPos(this.context.treeLen),j.viewport.to);if(!j.work(20,q))j.takeTree();return new $6(j)}static init(A){let j=Math.min(3000,A.doc.length),q=Aq.create(A.facet(Vj).parser,A,{from:0,to:j});if(!q.work(20,j))q.takeTree();return new $6(q)}}iA.state=o.define({create:$6.init,update(A,j){for(let q of j.effects)if(q.is(iA.setState))return q.value;if(j.startState.facet(Vj)!=j.state.facet(Vj))return $6.init(j.state);return A.apply(j)}});var $5=(A)=>{let j=setTimeout(()=>A(),500);return()=>clearTimeout(j)};if(typeof requestIdleCallback!="undefined")$5=(A)=>{let j=-1,q=setTimeout(()=>{j=requestIdleCallback(A,{timeout:400})},100);return()=>j<0?clearTimeout(q):cancelIdleCallback(j)};var t0=typeof navigator!="undefined"&&((o0=navigator.scheduling)===null||o0===void 0?void 0:o0.isInputPending)?()=>navigator.scheduling.isInputPending():null,u1=r.fromClass(class A{constructor(j){this.view=j,this.working=null,this.workScheduled=0,this.chunkEnd=-1,this.chunkBudget=-1,this.work=this.work.bind(this),this.scheduleWork()}update(j){let q=this.view.state.field(iA.state).context;if(q.updateViewport(j.view.viewport)||this.view.viewport.to>q.treeLen)this.scheduleWork();if(j.docChanged||j.selectionSet){if(this.view.hasFocus)this.chunkBudget+=50;this.scheduleWork()}this.checkAsyncSchedule(q)}scheduleWork(){if(this.working)return;let{state:j}=this.view,q=j.field(iA.state);if(q.tree!=q.context.tree||!q.context.isDone(j.doc.length))this.working=$5(this.work)}work(j){this.working=null;let q=Date.now();if(this.chunkEnd<q&&(this.chunkEnd<0||this.view.hasFocus))this.chunkEnd=q+30000,this.chunkBudget=3000;if(this.chunkBudget<=0)return;let{state:$,viewport:{to:B}}=this.view,G=$.field(iA.state);if(G.tree==G.context.tree&&G.context.isDone(B+1e5))return;let K=Date.now()+Math.min(this.chunkBudget,100,j&&!t0?Math.max(25,j.timeRemaining()-5):1e9),J=G.context.treeLen<B&&$.doc.length>B+1000,Z=G.context.work(()=>{return t0&&t0()||Date.now()>K},B+(J?0:1e5));if(this.chunkBudget-=Date.now()-q,Z||this.chunkBudget<=0)G.context.takeTree(),this.view.dispatch({effects:iA.setState.of(new $6(G.context))});if(this.chunkBudget>0&&!(Z&&!J))this.scheduleWork();this.checkAsyncSchedule(G.context)}checkAsyncSchedule(j){if(j.scheduleOn)this.workScheduled++,j.scheduleOn.then(()=>this.scheduleWork()).catch((q)=>YA(this.view.state,q)).then(()=>this.workScheduled--),j.scheduleOn=null}destroy(){if(this.working)this.working()}isWorking(){return!!(this.working||this.workScheduled>0)}},{eventHandlers:{focus(){this.scheduleWork()}}}),Vj=k.define({combine(A){return A.length?A[0]:null},enables:(A)=>[iA.state,u1,R.contentAttributes.compute([A],(j)=>{let q=j.facet(A);return q&&q.name?{"data-language":q.name}:{}})]});var g1=k.define(),s6=k.define({combine:(A)=>{if(!A.length)return"  ";let j=A[0];if(!j||/\S/.test(j)||Array.from(j).some((q)=>q!=j[0]))throw new Error("Invalid indent unit: "+JSON.stringify(A[0]));return j}});function i6(A){let j=A.facet(s6);return j.charCodeAt(0)==9?A.tabSize*j.length:j.length}function B6(A,j){let q="",$=A.tabSize,B=A.facet(s6)[0];if(B=="\t"){while(j>=$)q+="\t",j-=$;B=" "}for(let G=0;G<j;G++)q+=B;return q}function $q(A,j){if(A instanceof v)A=new G6(A);for(let $ of A.state.facet(g1)){let B=$(A,j);if(B!==void 0)return B}let q=GA(A.state);return q.length>=j?p1(A,q,j):null}class G6{constructor(A,j={}){this.state=A,this.options=j,this.unit=i6(A)}lineAt(A,j=1){let q=this.state.doc.lineAt(A),{simulateBreak:$,simulateDoubleBreak:B}=this.options;if($!=null&&$>=q.from&&$<=q.to)if(B&&$==A)return{text:"",from:A};else if(j<0?$<A:$<=A)return{text:q.text.slice($-q.from),from:$};else return{text:q.text.slice(0,$-q.from),from:q.from};return q}textAfterPos(A,j=1){if(this.options.simulateDoubleBreak&&A==this.options.simulateBreak)return"";let{text:q,from:$}=this.lineAt(A,j);return q.slice(A-$,Math.min(q.length,A+100-$))}column(A,j=1){let{text:q,from:$}=this.lineAt(A,j),B=this.countColumn(q,A-$),G=this.options.overrideIndentation?this.options.overrideIndentation($):-1;if(G>-1)B+=G-this.countColumn(q,q.search(/\S|$/));return B}countColumn(A,j=A.length){return Uj(A,this.state.tabSize,j)}lineIndent(A,j=1){let{text:q,from:$}=this.lineAt(A,j),B=this.options.overrideIndentation;if(B){let G=B($);if(G>-1)return G}return this.countColumn(q,q.search(/\S|$/))}get simulatedBreak(){return this.options.simulateBreak||null}}var f1=new S;function p1(A,j,q){let $=j.resolveStack(q),B=j.resolveInner(q,-1).resolve(q,0).enterUnfinishedNodesBefore(q);if(B!=$.node){let G=[];for(let K=B;K&&!(K.from<$.node.from||K.to>$.node.to||K.from==$.node.from&&K.type==$.node.type);K=K.parent)G.push(K);for(let K=G.length-1;K>=0;K--)$={node:G[K],next:$}}return B5($,A,q)}function B5(A,j,q){for(let $=A;$;$=$.next){let B=d1($.node);if(B)return B(B$.create(j,q,$))}return 0}function l1(A){return A.pos==A.options.simulateBreak&&A.options.simulateDoubleBreak}function d1(A){let j=A.type.prop(f1);if(j)return j;let q=A.firstChild,$;if(q&&($=q.type.prop(S.closedBy))){let B=A.lastChild,G=B&&$.indexOf(B.name)>-1;return(K)=>n1(K,!0,1,void 0,G&&!l1(K)?B.from:void 0)}return A.parent==null?c1:null}function c1(){return 0}class B$ extends G6{constructor(A,j,q){super(A.state,A.options);this.base=A,this.pos=j,this.context=q}get node(){return this.context.node}static create(A,j,q){return new B$(A,j,q)}get textAfter(){return this.textAfterPos(this.pos)}get baseIndent(){return this.baseIndentFor(this.node)}baseIndentFor(A){let j=this.state.doc.lineAt(A.from);for(;;){let q=A.resolve(j.from);while(q.parent&&q.parent.from==q.from)q=q.parent;if(s1(q,A))break;j=this.state.doc.lineAt(q.from)}return this.lineIndent(j.from)}continue(){return B5(this.context.next,this.base,this.pos)}}function s1(A,j){for(let q=j;q;q=q.parent)if(A==q)return!0;return!1}function i1(A){let j=A.node,q=j.childAfter(j.from),$=j.lastChild;if(!q)return null;let B=A.options.simulateBreak,G=A.state.doc.lineAt(q.from),K=B==null||B<=G.from?G.to:Math.min(G.to,B);for(let J=q.to;;){let Z=j.childAfter(J);if(!Z||Z==$)return null;if(!Z.type.isSkipped){if(Z.from>=K)return null;let X=/^ */.exec(G.text.slice(q.to-G.from))[0].length;return{from:q.from,to:q.to+X}}J=Z.to}}function n1(A,j,q,$,B){let G=A.textAfter,K=G.match(/^\s*/)[0].length,J=$&&G.slice(K,K+$.length)==$||B==A.pos+K,Z=j?i1(A):null;if(Z)return J?A.column(Z.from):A.column(Z.to);return A.baseIndent+(J?0:A.unit*q)}var a1=200;function G5(){return v.transactionFilter.of((A)=>{if(!A.docChanged||!A.isUserEvent("input.type")&&!A.isUserEvent("input.complete"))return A;let j=A.startState.languageDataAt("indentOnInput",A.startState.selection.main.head);if(!j.length)return A;let q=A.newDoc,{head:$}=A.newSelection.main,B=q.lineAt($);if($>B.from+a1)return A;let G=q.sliceString(B.from,$);if(!j.some((X)=>X.test(G)))return A;let{state:K}=A,J=-1,Z=[];for(let{head:X}of K.selection.ranges){let U=K.doc.lineAt(X);if(U.from==J)continue;J=U.from;let Y=$q(K,U.from);if(Y==null)continue;let Q=/^\s*/.exec(U.text)[0],O=B6(K,Y);if(Q!=O)Z.push({from:U.from,to:U.from+Q.length,insert:O})}return Z.length?[A,{changes:Z,sequential:!0}]:A})}var r1=k.define(),o1=new S;function t1(A,j,q){let $=GA(A);if($.length<q)return null;let B=$.resolveStack(q,1),G=null;for(let K=B;K;K=K.next){let J=K.node;if(J.to<=q||J.from>q)continue;if(G&&J.from<j)break;let Z=J.type.prop(o1);if(Z&&(J.to<$.length-50||$.length==A.doc.length||!e1(J))){let X=Z(J,A);if(X&&X.from<=q&&X.from>=j&&X.to>q)G=X}}return G}function e1(A){let j=A.lastChild;return j&&j.to==A.to&&j.type.isError}function jq(A,j,q){for(let $ of A.facet(r1)){let B=$(A,j,q);if(B)return B}return t1(A,j,q)}function K5(A,j){let q=j.mapPos(A.from,1),$=j.mapPos(A.to,-1);return q>=$?void 0:{from:q,to:$}}var Bq=b.define({map:K5}),n6=b.define({map:K5});function J5(A){let j=[];for(let{head:q}of A.state.selection.ranges){if(j.some(($)=>$.from<=q&&$.to>=q))continue;j.push(A.lineBlockAt(q))}return j}var mj=o.define({create(){return C.none},update(A,j){if(j.isUserEvent("delete"))j.changes.iterChangedRanges((q,$)=>A=oG(A,q,$));A=A.map(j.changes);for(let q of j.effects)if(q.is(Bq)&&!A3(A,q.value.from,q.value.to)){let{preparePlaceholder:$}=j.state.facet(G$),B=!$?tG:C.replace({widget:new O5($(j.state,q.value))});A=A.update({add:[B.range(q.value.from,q.value.to)]})}else if(q.is(n6))A=A.update({filter:($,B)=>q.value.from!=$||q.value.to!=B,filterFrom:q.value.from,filterTo:q.value.to});if(j.selection)A=oG(A,j.selection.main.head);return A},provide:(A)=>R.decorations.from(A),toJSON(A,j){let q=[];return A.between(0,j.doc.length,($,B)=>{q.push($,B)}),q},fromJSON(A){if(!Array.isArray(A)||A.length%2)throw new RangeError("Invalid JSON for fold state");let j=[];for(let q=0;q<A.length;){let $=A[q++],B=A[q++];if(typeof $!="number"||typeof B!="number")throw new RangeError("Invalid JSON for fold state");j.push(tG.range($,B))}return C.set(j,!0)}});function oG(A,j,q=j){let $=!1;return A.between(j,q,(B,G)=>{if(B<q&&G>j)$=!0}),!$?A:A.update({filterFrom:j,filterTo:q,filter:(B,G)=>B>=q||G<=j})}function qq(A,j,q){var $;let B=null;return($=A.field(mj,!1))===null||$===void 0||$.between(j,q,(G,K)=>{if(!B||B.from>G)B={from:G,to:K}}),B}function A3(A,j,q){let $=!1;return A.between(j,j,(B,G)=>{if(B==j&&G==q)$=!0}),$}function Z5(A,j){return A.field(mj,!1)?j:j.concat(b.appendConfig.of(Y5()))}var j3=(A)=>{for(let j of J5(A)){let q=jq(A.state,j.from,j.to);if(q)return A.dispatch({effects:Z5(A.state,[Bq.of(q),X5(A,q)])}),!0}return!1},q3=(A)=>{if(!A.state.field(mj,!1))return!1;let j=[];for(let q of J5(A)){let $=qq(A.state,q.from,q.to);if($)j.push(n6.of($),X5(A,$,!1))}if(j.length)A.dispatch({effects:j});return j.length>0};function X5(A,j,q=!0){let $=A.state.doc.lineAt(j.from).number,B=A.state.doc.lineAt(j.to).number;return R.announce.of(`${A.state.phrase(q?"Folded lines":"Unfolded lines")} ${$} ${A.state.phrase("to")} ${B}.`)}var $3=(A)=>{let{state:j}=A,q=[];for(let $=0;$<j.doc.length;){let B=A.lineBlockAt($),G=jq(j,B.from,B.to);if(G)q.push(Bq.of(G));$=(G?A.lineBlockAt(G.to):B).to+1}if(q.length)A.dispatch({effects:Z5(A.state,q)});return!!q.length},B3=(A)=>{let j=A.state.field(mj,!1);if(!j||!j.size)return!1;let q=[];return j.between(0,A.state.doc.length,($,B)=>{q.push(n6.of({from:$,to:B}))}),A.dispatch({effects:q}),!0};var U5=[{key:"Ctrl-Shift-[",mac:"Cmd-Alt-[",run:j3},{key:"Ctrl-Shift-]",mac:"Cmd-Alt-]",run:q3},{key:"Ctrl-Alt-[",run:$3},{key:"Ctrl-Alt-]",run:B3}],G3={placeholderDOM:null,preparePlaceholder:null,placeholderText:"…"},G$=k.define({combine(A){return FA(A,G3)}});function Y5(A){let j=[mj,J3];if(A)j.push(G$.of(A));return j}function Q5(A,j){let{state:q}=A,$=q.facet(G$),B=(K)=>{let J=A.lineBlockAt(A.posAtDOM(K.target)),Z=qq(A.state,J.from,J.to);if(Z)A.dispatch({effects:n6.of(Z)});K.preventDefault()};if($.placeholderDOM)return $.placeholderDOM(A,B,j);let G=document.createElement("span");return G.textContent=$.placeholderText,G.setAttribute("aria-label",q.phrase("folded code")),G.title=q.phrase("unfold"),G.className="cm-foldPlaceholder",G.onclick=B,G}var tG=C.replace({widget:new class extends hA{toDOM(A){return Q5(A,null)}}});class O5 extends hA{constructor(A){super();this.value=A}eq(A){return this.value==A.value}toDOM(A){return Q5(A,this.value)}}var K3={openText:"⌄",closedText:"›",markerDOM:null,domEventHandlers:{},foldingChanged:()=>!1};class e7 extends wA{constructor(A,j){super();this.config=A,this.open=j}eq(A){return this.config==A.config&&this.open==A.open}toDOM(A){if(this.config.markerDOM)return this.config.markerDOM(this.open);let j=document.createElement("span");return j.textContent=this.open?this.config.openText:this.config.closedText,j.title=A.state.phrase(this.open?"Fold line":"Unfold line"),j}}function F5(A={}){let j={...K3,...A},q=new e7(j,!0),$=new e7(j,!1),B=r.fromClass(class{constructor(K){this.from=K.viewport.from,this.markers=this.buildMarkers(K)}update(K){if(K.docChanged||K.viewportChanged||K.startState.facet(Vj)!=K.state.facet(Vj)||K.startState.field(mj,!1)!=K.state.field(mj,!1)||GA(K.startState)!=GA(K.state)||j.foldingChanged(K))this.markers=this.buildMarkers(K.view)}buildMarkers(K){let J=new RA;for(let Z of K.viewportLineBlocks){let X=qq(K.state,Z.from,Z.to)?$:jq(K.state,Z.from,Z.to)?q:null;if(X)J.add(Z.from,Z.from,X)}return J.finish()}}),{domEventHandlers:G}=j;return[B,g0({class:"cm-foldGutter",markers(K){var J;return((J=K.plugin(B))===null||J===void 0?void 0:J.markers)||h.empty},initialSpacer(){return new e7(j,!1)},domEventHandlers:{...G,click:(K,J,Z)=>{if(G.click&&G.click(K,J,Z))return!0;let X=qq(K.state,J.from,J.to);if(X)return K.dispatch({effects:n6.of(X)}),!0;let U=jq(K.state,J.from,J.to);if(U)return K.dispatch({effects:Bq.of(U)}),!0;return!1}}}),Y5()]}var J3=R.baseTheme({".cm-foldPlaceholder":{backgroundColor:"#eee",border:"1px solid #ddd",color:"#888",borderRadius:".2em",margin:"0 1px",padding:"0 1px",cursor:"pointer"},".cm-foldGutter span":{padding:"0 1px",cursor:"pointer"}});class Gq{constructor(A,j){this.specs=A;let q;function $(K){let J=dA.newName();return(q||(q=Object.create(null)))["."+J]=K,J}let B=typeof j.all=="string"?j.all:j.all?$(j.all):void 0,G=j.scope;this.scope=G instanceof iA?(K)=>K.prop(c6)==G.data:G?(K)=>K==G:void 0,this.style=r0(A.map((K)=>({tag:K.tag,class:K.class||$(Object.assign({},K,{tag:null}))})),{all:B}).style,this.module=q?new dA(q):null,this.themeType=j.themeType}static define(A,j){return new Gq(A,j||{})}}var j$=k.define(),z5=k.define({combine(A){return A.length?[A[0]]:null}});function e0(A){let j=A.facet(j$);return j.length?j:A.facet(z5)}function I5(A,j){let q=[Z3],$;if(A instanceof Gq){if(A.module)q.push(R.styleModule.of(A.module));$=A.themeType}if(j===null||j===void 0?void 0:j.fallback)q.push(z5.of(A));else if($)q.push(j$.computeN([R.darkTheme],(B)=>{return B.facet(R.darkTheme)==($=="dark")?[A]:[]}));else q.push(j$.of(A));return q}class W5{constructor(A){this.markCache=Object.create(null),this.tree=GA(A.state),this.decorations=this.buildDeco(A,e0(A.state)),this.decoratedTo=A.viewport.to}update(A){let j=GA(A.state),q=e0(A.state),$=q!=e0(A.startState),{viewport:B}=A.view,G=A.changes.mapPos(this.decoratedTo,1);if(j.length<B.to&&!$&&j.type==this.tree.type&&G>=B.to)this.decorations=this.decorations.map(A.changes),this.decoratedTo=G;else if(j!=this.tree||A.viewportChanged||$)this.tree=j,this.decorations=this.buildDeco(A.view,q),this.decoratedTo=B.to}buildDeco(A,j){if(!j||!this.tree.length)return C.none;let q=new RA;for(let{from:$,to:B}of A.visibleRanges)iG(this.tree,j,(G,K,J)=>{q.add(G,K,this.markCache[J]||(this.markCache[J]=C.mark({class:J})))},$,B);return q.finish()}}var Z3=lA.high(r.fromClass(W5,{decorations:(A)=>A.decorations})),E5=Gq.define([{tag:V.meta,color:"#404740"},{tag:V.link,textDecoration:"underline"},{tag:V.heading,textDecoration:"underline",fontWeight:"bold"},{tag:V.emphasis,fontStyle:"italic"},{tag:V.strong,fontWeight:"bold"},{tag:V.strikethrough,textDecoration:"line-through"},{tag:V.keyword,color:"#708"},{tag:[V.atom,V.bool,V.url,V.contentSeparator,V.labelName],color:"#219"},{tag:[V.literal,V.inserted],color:"#164"},{tag:[V.string,V.deleted],color:"#a11"},{tag:[V.regexp,V.escape,V.special(V.string)],color:"#e40"},{tag:V.definition(V.variableName),color:"#00f"},{tag:V.local(V.variableName),color:"#30a"},{tag:[V.typeName,V.namespace],color:"#085"},{tag:V.className,color:"#167"},{tag:[V.special(V.variableName),V.macroName],color:"#256"},{tag:V.definition(V.propertyName),color:"#00c"},{tag:V.comment,color:"#940"},{tag:V.invalid,color:"#f00"}]),X3=R.baseTheme({"&.cm-focused .cm-matchingBracket":{backgroundColor:"#328c8252"},"&.cm-focused .cm-nonmatchingBracket":{backgroundColor:"#bb555544"}}),H5=1e4,_5="()[]{}",N5=k.define({combine(A){return FA(A,{afterCursor:!0,brackets:_5,maxScanDistance:H5,renderMatch:Q3})}}),U3=C.mark({class:"cm-matchingBracket"}),Y3=C.mark({class:"cm-nonmatchingBracket"});function Q3(A){let j=[],q=A.matched?U3:Y3;if(j.push(q.range(A.start.from,A.start.to)),A.end)j.push(q.range(A.end.from,A.end.to));return j}var O3=o.define({create(){return C.none},update(A,j){if(!j.docChanged&&!j.selection)return A;let q=[],$=j.state.facet(N5);for(let B of j.state.selection.ranges){if(!B.empty)continue;let G=nA(j.state,B.head,-1,$)||B.head>0&&nA(j.state,B.head-1,1,$)||$.afterCursor&&(nA(j.state,B.head,1,$)||B.head<j.state.doc.length&&nA(j.state,B.head+1,-1,$));if(G)q=q.concat($.renderMatch(G,j.state))}return C.set(q,!0)},provide:(A)=>R.decorations.from(A)}),F3=[O3,X3];function D5(A={}){return[N5.of(A),F3]}var z3=new S;function q$(A,j,q){let $=A.prop(j<0?S.openedBy:S.closedBy);if($)return $;if(A.name.length==1){let B=q.indexOf(A.name);if(B>-1&&B%2==(j<0?1:0))return[q[B+j]]}return null}function $$(A){let j=A.type.prop(z3);return j?j(A.node):A}function nA(A,j,q,$={}){let B=$.maxScanDistance||H5,G=$.brackets||_5,K=GA(A),J=K.resolveInner(j,q);for(let Z=J;Z;Z=Z.parent){let X=q$(Z.type,q,G);if(X&&Z.from<Z.to){let U=$$(Z);if(U&&(q>0?j>=U.from&&j<U.to:j>U.from&&j<=U.to))return I3(A,j,q,Z,U,X,G)}}return W3(A,j,q,K,J.type,B,G)}function I3(A,j,q,$,B,G,K){let J=$.parent,Z={from:B.from,to:B.to},X=0,U=J===null||J===void 0?void 0:J.cursor();if(U&&(q<0?U.childBefore($.from):U.childAfter($.to)))do if(q<0?U.to<=$.from:U.from>=$.to){if(X==0&&G.indexOf(U.type.name)>-1&&U.from<U.to){let Y=$$(U);return{start:Z,end:Y?{from:Y.from,to:Y.to}:void 0,matched:!0}}else if(q$(U.type,q,K))X++;else if(q$(U.type,-q,K)){if(X==0){let Y=$$(U);return{start:Z,end:Y&&Y.from<Y.to?{from:Y.from,to:Y.to}:void 0,matched:!1}}X--}}while(q<0?U.prevSibling():U.nextSibling());return{start:Z,matched:!1}}function W3(A,j,q,$,B,G,K){let J=q<0?A.sliceDoc(j-1,j):A.sliceDoc(j,j+1),Z=K.indexOf(J);if(Z<0||Z%2==0!=q>0)return null;let X={from:q<0?j-1:j,to:q>0?j+1:j},U=A.doc.iterRange(j,q>0?A.doc.length:0),Y=0;for(let Q=0;!U.next().done&&Q<=G;){let O=U.value;if(q<0)Q+=O.length;let F=j+Q*q;for(let z=q>0?0:O.length-1,I=q>0?O.length:-1;z!=I;z+=q){let W=K.indexOf(O[z]);if(W<0||$.resolveInner(F+z,1).type!=B)continue;if(W%2==0==q>0)Y++;else if(Y==1)return{start:X,end:{from:F+z,to:F+z+1},matched:W>>1==Z>>1};else Y--}if(q>0)Q+=O.length}return U.done?{start:X,matched:!1}:null}var E3=Object.create(null),eG=[PA.none];var A5=[],j5=Object.create(null),H3=Object.create(null);for(let[A,j]of[["variable","variableName"],["variable-2","variableName.special"],["string-2","string.special"],["def","variableName.definition"],["tag","tagName"],["attribute","attributeName"],["type","typeName"],["builtin","variableName.standard"],["qualifier","modifier"],["error","invalid"],["header","heading"],["property","propertyName"]])H3[A]=_3(E3,j);function A$(A,j){if(A5.indexOf(A)>-1)return;A5.push(A),console.warn(j)}function _3(A,j){let q=[];for(let J of j.split(" ")){let Z=[];for(let X of J.split(".")){let U=A[X]||V[X];if(!U)A$(X,`Unknown highlighting tag ${X}`);else if(typeof U=="function")if(!Z.length)A$(X,`Modifier ${X} used at start of tag`);else Z=Z.map(U);else if(Z.length)A$(X,`Tag ${X} used as modifier`);else Z=Array.isArray(U)?U:[U]}for(let X of Z)q.push(X)}if(!q.length)return 0;let $=j.replace(/ /g,"_"),B=$+" "+q.map((J)=>J.id),G=j5[B];if(G)return G.id;let K=j5[B]=PA.define({id:eG.length,name:$,props:[cG({[$]:q})]});return eG.push(K),K.id}var T2={rtl:C.mark({class:"cm-iso",inclusive:!0,attributes:{dir:"rtl"},bidiIsolate:d.RTL}),ltr:C.mark({class:"cm-iso",inclusive:!0,attributes:{dir:"ltr"},bidiIsolate:d.LTR}),auto:C.mark({class:"cm-iso",inclusive:!0,attributes:{dir:"auto"},bidiIsolate:null})};var N3=(A)=>{let{state:j}=A,q=j.doc.lineAt(j.selection.main.from),$=Q$(A.state,q.from);return $.line?D3(A):$.block?R3(A):!1};function Y$(A,j){return({state:q,dispatch:$})=>{if(q.readOnly)return!1;let B=A(j,q);if(!B)return!1;return $(q.update(B)),!0}}var D3=Y$(L3,0);var M3=Y$(y5,0);var R3=Y$((A,j)=>y5(A,j,k3(j)),0);function Q$(A,j){let q=A.languageDataAt("commentTokens",j,1);return q.length?q[0]:{}}var a6=50;function V3(A,{open:j,close:q},$,B){let G=A.sliceDoc($-a6,$),K=A.sliceDoc(B,B+a6),J=/\s*$/.exec(G)[0].length,Z=/^\s*/.exec(K)[0].length,X=G.length-J;if(G.slice(X-j.length,X)==j&&K.slice(Z,Z+q.length)==q)return{open:{pos:$-J,margin:J&&1},close:{pos:B+Z,margin:Z&&1}};let U,Y;if(B-$<=2*a6)U=Y=A.sliceDoc($,B);else U=A.sliceDoc($,$+a6),Y=A.sliceDoc(B-a6,B);let Q=/^\s*/.exec(U)[0].length,O=/\s*$/.exec(Y)[0].length,F=Y.length-O-q.length;if(U.slice(Q,Q+j.length)==j&&Y.slice(F,F+q.length)==q)return{open:{pos:$+Q+j.length,margin:/\s/.test(U.charAt(Q+j.length))?1:0},close:{pos:B-O-q.length,margin:/\s/.test(Y.charAt(F-1))?1:0}};return null}function k3(A){let j=[];for(let q of A.selection.ranges){let $=A.doc.lineAt(q.from),B=q.to<=$.to?$:A.doc.lineAt(q.to);if(B.from>$.from&&B.from==q.to)B=q.to==$.to+1?$:A.doc.lineAt(q.to-1);let G=j.length-1;if(G>=0&&j[G].to>$.from)j[G].to=B.to;else j.push({from:$.from+/^\s*/.exec($.text)[0].length,to:B.to})}return j}function y5(A,j,q=j.selection.ranges){let $=q.map((G)=>Q$(j,G.from).block);if(!$.every((G)=>G))return null;let B=q.map((G,K)=>V3(j,$[K],G.from,G.to));if(A!=2&&!B.every((G)=>G))return{changes:j.changes(q.map((G,K)=>{if(B[K])return[];return[{from:G.from,insert:$[K].open+" "},{from:G.to,insert:" "+$[K].close}]}))};else if(A!=1&&B.some((G)=>G)){let G=[];for(let K=0,J;K<B.length;K++)if(J=B[K]){let Z=$[K],{open:X,close:U}=J;G.push({from:X.pos-Z.open.length,to:X.pos+X.margin},{from:U.pos-U.margin,to:U.pos+Z.close.length})}return{changes:G}}return null}function L3(A,j,q=j.selection.ranges){let $=[],B=-1;for(let{from:G,to:K}of q){let J=$.length,Z=1e9,X=Q$(j,G).line;if(!X)continue;for(let U=G;U<=K;){let Y=j.doc.lineAt(U);if(Y.from>B&&(G==K||K>Y.from)){B=Y.from;let Q=/^\s*/.exec(Y.text)[0].length,O=Q==Y.length,F=Y.text.slice(Q,Q+X.length)==X?Q:-1;if(Q<Y.text.length&&Q<Z)Z=Q;$.push({line:Y,comment:F,token:X,indent:Q,empty:O,single:!1})}U=Y.to+1}if(Z<1e9){for(let U=J;U<$.length;U++)if($[U].indent<$[U].line.text.length)$[U].indent=Z}if($.length==J+1)$[J].single=!0}if(A!=2&&$.some((G)=>G.comment<0&&(!G.empty||G.single))){let G=[];for(let{line:J,token:Z,indent:X,empty:U,single:Y}of $)if(Y||!U)G.push({from:J.from+X,insert:Z+" "});let K=j.changes(G);return{changes:K,selection:j.selection.map(K,1)}}else if(A!=1&&$.some((G)=>G.comment>=0)){let G=[];for(let{line:K,comment:J,token:Z}of $)if(J>=0){let X=K.from+J,U=X+Z.length;if(K.text[U-K.from]==" ")U++;G.push({from:X,to:U})}return{changes:G}}return null}var J$=kA.define(),P3=kA.define(),T3=k.define(),b5=k.define({combine(A){return FA(A,{minDepth:100,newGroupDelay:500,joinToEvent:(j,q)=>q},{minDepth:Math.max,newGroupDelay:Math.min,joinToEvent:(j,q)=>($,B)=>j($,B)||q($,B)})}}),x5=o.define({create(){return Jj.empty},update(A,j){let q=j.state.facet(b5),$=j.annotation(J$);if($){let Z=NA.fromTransaction(j,$.selection),X=$.side,U=X==0?A.undone:A.done;if(Z)U=Jq(U,U.length,q.minDepth,Z);else U=v5(U,j.startState.selection);return new Jj(X==0?$.rest:U,X==0?U:$.rest)}let B=j.annotation(P3);if(B=="full"||B=="before")A=A.isolate();if(j.annotation(e.addToHistory)===!1)return!j.changes.empty?A.addMapping(j.changes.desc):A;let G=NA.fromTransaction(j),K=j.annotation(e.time),J=j.annotation(e.userEvent);if(G)A=A.addChanges(G,K,J,q,j);else if(j.selection)A=A.addSelection(j.startState.selection,K,J,q.newGroupDelay);if(B=="full"||B=="after")A=A.isolate();return A},toJSON(A){return{done:A.done.map((j)=>j.toJSON()),undone:A.undone.map((j)=>j.toJSON())}},fromJSON(A){return new Jj(A.done.map(NA.fromJSON),A.undone.map(NA.fromJSON))}});function S5(A={}){return[x5,b5.of(A),R.domEventHandlers({beforeinput(j,q){let $=j.inputType=="historyUndo"?w5:j.inputType=="historyRedo"?Z$:null;if(!$)return!1;return j.preventDefault(),$(q)}})]}function Zq(A,j){return function({state:q,dispatch:$}){if(!j&&q.readOnly)return!1;let B=q.field(x5,!1);if(!B)return!1;let G=B.pop(A,q,j);if(!G)return!1;return $(G),!0}}var w5=Zq(0,!1),Z$=Zq(1,!1),C3=Zq(0,!0),y3=Zq(1,!0);class NA{constructor(A,j,q,$,B){this.changes=A,this.effects=j,this.mapped=q,this.startSelection=$,this.selectionsAfter=B}setSelAfter(A){return new NA(this.changes,this.effects,this.mapped,this.startSelection,A)}toJSON(){var A,j,q;return{changes:(A=this.changes)===null||A===void 0?void 0:A.toJSON(),mapped:(j=this.mapped)===null||j===void 0?void 0:j.toJSON(),startSelection:(q=this.startSelection)===null||q===void 0?void 0:q.toJSON(),selectionsAfter:this.selectionsAfter.map(($)=>$.toJSON())}}static fromJSON(A){return new NA(A.changes&&jA.fromJSON(A.changes),[],A.mapped&&pA.fromJSON(A.mapped),A.startSelection&&E.fromJSON(A.startSelection),A.selectionsAfter.map(E.fromJSON))}static fromTransaction(A,j){let q=uA;for(let $ of A.startState.facet(T3)){let B=$(A);if(B.length)q=q.concat(B)}if(!q.length&&A.changes.empty)return null;return new NA(A.changes.invert(A.startState.doc),q,void 0,j||A.startState.selection,uA)}static selection(A){return new NA(void 0,uA,void 0,void 0,A)}}function Jq(A,j,q,$){let B=j+1>q+20?j-q-1:0,G=A.slice(B,j);return G.push($),G}function b3(A,j){let q=[],$=!1;return A.iterChangedRanges((B,G)=>q.push(B,G)),j.iterChangedRanges((B,G,K,J)=>{for(let Z=0;Z<q.length;){let X=q[Z++],U=q[Z++];if(J>=X&&K<=U)$=!0}}),$}function x3(A,j){return A.ranges.length==j.ranges.length&&A.ranges.filter((q,$)=>q.empty!=j.ranges[$].empty).length===0}function h5(A,j){return!A.length?j:!j.length?A:A.concat(j)}var uA=[],S3=200;function v5(A,j){if(!A.length)return[NA.selection([j])];else{let q=A[A.length-1],$=q.selectionsAfter.slice(Math.max(0,q.selectionsAfter.length-S3));if($.length&&$[$.length-1].eq(j))return A;return $.push(j),Jq(A,A.length-1,1e9,q.setSelAfter($))}}function w3(A){let j=A[A.length-1],q=A.slice();return q[A.length-1]=j.setSelAfter(j.selectionsAfter.slice(0,j.selectionsAfter.length-1)),q}function K$(A,j){if(!A.length)return A;let q=A.length,$=uA;while(q){let B=h3(A[q-1],j,$);if(B.changes&&!B.changes.empty||B.effects.length){let G=A.slice(0,q);return G[q-1]=B,G}else j=B.mapped,q--,$=B.selectionsAfter}return $.length?[NA.selection($)]:uA}function h3(A,j,q){let $=h5(A.selectionsAfter.length?A.selectionsAfter.map((J)=>J.map(j)):uA,q);if(!A.changes)return NA.selection($);let B=A.changes.map(j),G=j.mapDesc(A.changes,!0),K=A.mapped?A.mapped.composeDesc(G):G;return new NA(B,b.mapEffects(A.effects,j),K,A.startSelection.map(G),$)}var v3=/^(input\.type|delete)($|\.)/;class Jj{constructor(A,j,q=0,$=void 0){this.done=A,this.undone=j,this.prevTime=q,this.prevUserEvent=$}isolate(){return this.prevTime?new Jj(this.done,this.undone):this}addChanges(A,j,q,$,B){let G=this.done,K=G[G.length-1];if(K&&K.changes&&!K.changes.empty&&A.changes&&(!q||v3.test(q))&&(!K.selectionsAfter.length&&j-this.prevTime<$.newGroupDelay&&$.joinToEvent(B,b3(K.changes,A.changes))||q=="input.type.compose"))G=Jq(G,G.length-1,$.minDepth,new NA(A.changes.compose(K.changes),h5(b.mapEffects(A.effects,K.changes),K.effects),K.mapped,K.startSelection,uA));else G=Jq(G,G.length,$.minDepth,A);return new Jj(G,uA,j,q)}addSelection(A,j,q,$){let B=this.done.length?this.done[this.done.length-1].selectionsAfter:uA;if(B.length>0&&j-this.prevTime<$&&q==this.prevUserEvent&&q&&/^select($|\.)/.test(q)&&x3(B[B.length-1],A))return this;return new Jj(v5(this.done,A),this.undone,j,q)}addMapping(A){return new Jj(K$(this.done,A),K$(this.undone,A),this.prevTime,this.prevUserEvent)}pop(A,j,q){let $=A==0?this.done:this.undone;if($.length==0)return null;let B=$[$.length-1],G=B.selectionsAfter[0]||j.selection;if(q&&B.selectionsAfter.length)return j.update({selection:B.selectionsAfter[B.selectionsAfter.length-1],annotations:J$.of({side:A,rest:w3($),selection:G}),userEvent:A==0?"select.undo":"select.redo",scrollIntoView:!0});else if(!B.changes)return null;else{let K=$.length==1?uA:$.slice(0,$.length-1);if(B.mapped)K=K$(K,B.mapped);return j.update({changes:B.changes,selection:B.startSelection,effects:B.effects,annotations:J$.of({side:A,rest:K,selection:G}),filter:!1,userEvent:A==0?"undo":"redo",scrollIntoView:!0})}}}Jj.empty=new Jj(uA,uA);var m5=[{key:"Mod-z",run:w5,preventDefault:!0},{key:"Mod-y",mac:"Mod-Shift-z",run:Z$,preventDefault:!0},{linux:"Ctrl-Shift-z",run:Z$,preventDefault:!0},{key:"Mod-u",run:C3,preventDefault:!0},{key:"Alt-u",mac:"Mod-Shift-u",run:y3,preventDefault:!0}];function K6(A,j){return E.create(A.ranges.map(j),A.mainIndex)}function Zj(A,j){return A.update({selection:j,scrollIntoView:!0,userEvent:"select"})}function aA({state:A,dispatch:j},q){let $=K6(A.selection,q);if($.eq(A.selection,!0))return!1;return j(Zj(A,$)),!0}function Xq(A,j){return E.cursor(j?A.to:A.from)}function u5(A,j){return aA(A,(q)=>q.empty?A.moveByChar(q,j):Xq(q,j))}function IA(A){return A.textDirectionAt(A.state.selection.main.head)==d.LTR}var g5=(A)=>u5(A,!IA(A)),f5=(A)=>u5(A,IA(A));function p5(A,j){return aA(A,(q)=>q.empty?A.moveByGroup(q,j):Xq(q,j))}var m3=(A)=>p5(A,!IA(A)),u3=(A)=>p5(A,IA(A));var m2=typeof Intl!="undefined"&&Intl.Segmenter?new Intl.Segmenter(void 0,{granularity:"word"}):null;function g3(A,j,q){if(j.type.prop(q))return!0;let $=j.to-j.from;return $&&($>2||/[^\s,.;:]/.test(A.sliceDoc(j.from,j.to)))||j.firstChild}function Uq(A,j,q){let $=GA(A).resolveInner(j.head),B=q?S.closedBy:S.openedBy;for(let Z=j.head;;){let X=q?$.childAfter(Z):$.childBefore(Z);if(!X)break;if(g3(A,X,B))$=X;else Z=q?X.to:X.from}let G=$.type.prop(B),K,J;if(G&&(K=q?nA(A,$.from,1):nA(A,$.to,-1))&&K.matched)J=q?K.end.to:K.end.from;else J=q?$.to:$.from;return E.cursor(J,q?-1:1)}var f3=(A)=>aA(A,(j)=>Uq(A.state,j,!IA(A))),p3=(A)=>aA(A,(j)=>Uq(A.state,j,IA(A)));function l5(A,j){return aA(A,(q)=>{if(!q.empty)return Xq(q,j);let $=A.moveVertically(q,j);return $.head!=q.head?$:A.moveToLineBoundary(q,j)})}var d5=(A)=>l5(A,!1),c5=(A)=>l5(A,!0);function s5(A){let j=A.scrollDOM.clientHeight<A.scrollDOM.scrollHeight-2,q=0,$=0,B;if(j){for(let G of A.state.facet(R.scrollMargins)){let K=G(A);if(K===null||K===void 0?void 0:K.top)q=Math.max(K===null||K===void 0?void 0:K.top,q);if(K===null||K===void 0?void 0:K.bottom)$=Math.max(K===null||K===void 0?void 0:K.bottom,$)}B=A.scrollDOM.clientHeight-q-$}else B=(A.dom.ownerDocument.defaultView||window).innerHeight;return{marginTop:q,marginBottom:$,selfScroll:j,height:Math.max(A.defaultLineHeight,B-5)}}function i5(A,j){let q=s5(A),{state:$}=A,B=K6($.selection,(K)=>{return K.empty?A.moveVertically(K,j,q.height):Xq(K,j)});if(B.eq($.selection))return!1;let G;if(q.selfScroll){let K=A.coordsAtPos($.selection.main.head),J=A.scrollDOM.getBoundingClientRect(),Z=J.top+q.marginTop,X=J.bottom-q.marginBottom;if(K&&K.top>Z&&K.bottom<X)G=R.scrollIntoView(B.main.head,{y:"start",yMargin:K.top-Z})}return A.dispatch(Zj($,B),{effects:G}),!0}var M5=(A)=>i5(A,!1),X$=(A)=>i5(A,!0);function kj(A,j,q){let $=A.lineBlockAt(j.head),B=A.moveToLineBoundary(j,q);if(B.head==j.head&&B.head!=(q?$.to:$.from))B=A.moveToLineBoundary(j,q,!1);if(!q&&B.head==$.from&&$.length){let G=/^\s*/.exec(A.state.sliceDoc($.from,Math.min($.from+100,$.to)))[0].length;if(G&&j.head!=$.from+G)B=E.cursor($.from+G)}return B}var l3=(A)=>aA(A,(j)=>kj(A,j,!0)),d3=(A)=>aA(A,(j)=>kj(A,j,!1)),c3=(A)=>aA(A,(j)=>kj(A,j,!IA(A))),s3=(A)=>aA(A,(j)=>kj(A,j,IA(A))),i3=(A)=>aA(A,(j)=>E.cursor(A.lineBlockAt(j.head).from,1)),n3=(A)=>aA(A,(j)=>E.cursor(A.lineBlockAt(j.head).to,-1));function a3(A,j,q){let $=!1,B=K6(A.selection,(G)=>{let K=nA(A,G.head,-1)||nA(A,G.head,1)||G.head>0&&nA(A,G.head-1,1)||G.head<A.doc.length&&nA(A,G.head+1,-1);if(!K||!K.end)return G;$=!0;let J=K.start.from==G.head?K.end.to:K.end.from;return q?E.range(G.anchor,J):E.cursor(J)});if(!$)return!1;return j(Zj(A,B)),!0}var r3=({state:A,dispatch:j})=>a3(A,j,!1);function gA(A,j){let q=K6(A.state.selection,($)=>{let B=j($);return E.range($.anchor,B.head,B.goalColumn,B.bidiLevel||void 0)});if(q.eq(A.state.selection))return!1;return A.dispatch(Zj(A.state,q)),!0}function n5(A,j){return gA(A,(q)=>A.moveByChar(q,j))}var a5=(A)=>n5(A,!IA(A)),r5=(A)=>n5(A,IA(A));function o5(A,j){return gA(A,(q)=>A.moveByGroup(q,j))}var o3=(A)=>o5(A,!IA(A)),t3=(A)=>o5(A,IA(A));var e3=(A)=>gA(A,(j)=>Uq(A.state,j,!IA(A))),AJ=(A)=>gA(A,(j)=>Uq(A.state,j,IA(A)));function t5(A,j){return gA(A,(q)=>A.moveVertically(q,j))}var e5=(A)=>t5(A,!1),AK=(A)=>t5(A,!0);function jK(A,j){return gA(A,(q)=>A.moveVertically(q,j,s5(A).height))}var R5=(A)=>jK(A,!1),V5=(A)=>jK(A,!0),jJ=(A)=>gA(A,(j)=>kj(A,j,!0)),qJ=(A)=>gA(A,(j)=>kj(A,j,!1)),$J=(A)=>gA(A,(j)=>kj(A,j,!IA(A))),BJ=(A)=>gA(A,(j)=>kj(A,j,IA(A))),GJ=(A)=>gA(A,(j)=>E.cursor(A.lineBlockAt(j.head).from)),KJ=(A)=>gA(A,(j)=>E.cursor(A.lineBlockAt(j.head).to)),k5=({state:A,dispatch:j})=>{return j(Zj(A,{anchor:0})),!0},L5=({state:A,dispatch:j})=>{return j(Zj(A,{anchor:A.doc.length})),!0},P5=({state:A,dispatch:j})=>{return j(Zj(A,{anchor:A.selection.main.anchor,head:0})),!0},T5=({state:A,dispatch:j})=>{return j(Zj(A,{anchor:A.selection.main.anchor,head:A.doc.length})),!0},JJ=({state:A,dispatch:j})=>{return j(A.update({selection:{anchor:0,head:A.doc.length},userEvent:"select"})),!0},ZJ=({state:A,dispatch:j})=>{let q=Yq(A).map(({from:$,to:B})=>E.range($,Math.min(B+1,A.doc.length)));return j(A.update({selection:E.create(q),userEvent:"select"})),!0},XJ=({state:A,dispatch:j})=>{let q=K6(A.selection,($)=>{let B=GA(A),G=B.resolveStack($.from,1);if($.empty){let K=B.resolveStack($.from,-1);if(K.node.from>=G.node.from&&K.node.to<=G.node.to)G=K}for(let K=G;K;K=K.next){let{node:J}=K;if((J.from<$.from&&J.to>=$.to||J.to>$.to&&J.from<=$.from)&&K.next)return E.range(J.to,J.from)}return $});if(q.eq(A.selection))return!1;return j(Zj(A,q)),!0},UJ=({state:A,dispatch:j})=>{let q=A.selection,$=null;if(q.ranges.length>1)$=E.create([q.main]);else if(!q.main.empty)$=E.create([E.cursor(q.main.head)]);if(!$)return!1;return j(Zj(A,$)),!0};function r6(A,j){if(A.state.readOnly)return!1;let q="delete.selection",{state:$}=A,B=$.changeByRange((G)=>{let{from:K,to:J}=G;if(K==J){let Z=j(G);if(Z<K)q="delete.backward",Z=Kq(A,Z,!1);else if(Z>K)q="delete.forward",Z=Kq(A,Z,!0);K=Math.min(K,Z),J=Math.max(J,Z)}else K=Kq(A,K,!1),J=Kq(A,J,!0);return K==J?{range:G}:{changes:{from:K,to:J},range:E.cursor(K,K<G.head?-1:1)}});if(B.changes.empty)return!1;return A.dispatch($.update(B,{scrollIntoView:!0,userEvent:q,effects:q=="delete.selection"?R.announce.of($.phrase("Selection deleted")):void 0})),!0}function Kq(A,j,q){if(A instanceof R)for(let $ of A.state.facet(R.atomicRanges).map((B)=>B(A)))$.between(j,j,(B,G)=>{if(B<j&&G>j)j=q?G:B});return j}var qK=(A,j,q)=>r6(A,($)=>{let B=$.from,{state:G}=A,K=G.doc.lineAt(B),J,Z;if(q&&!j&&B>K.from&&B<K.from+200&&!/[^ \t]/.test(J=K.text.slice(0,B-K.from))){if(J[J.length-1]=="\t")return B-1;let X=Uj(J,G.tabSize),U=X%i6(G)||i6(G);for(let Y=0;Y<U&&J[J.length-1-Y]==" ";Y++)B--;Z=B}else if(Z=qA(K.text,B-K.from,j,j)+K.from,Z==B&&K.number!=(j?G.doc.lines:1))Z+=j?1:-1;else if(!j&&/[\ufe00-\ufe0f]/.test(K.text.slice(Z-K.from,B-K.from)))Z=qA(K.text,Z-K.from,!1,!1)+K.from;return Z}),U$=(A)=>qK(A,!1,!0);var $K=(A)=>qK(A,!0,!1),BK=(A,j)=>r6(A,(q)=>{let $=q.head,{state:B}=A,G=B.doc.lineAt($),K=B.charCategorizer($);for(let J=null;;){if($==(j?G.to:G.from)){if($==q.head&&G.number!=(j?B.doc.lines:1))$+=j?1:-1;break}let Z=qA(G.text,$-G.from,j)+G.from,X=G.text.slice(Math.min($,Z)-G.from,Math.max($,Z)-G.from),U=K(X);if(J!=null&&U!=J)break;if(X!=" "||$!=q.head)J=U;$=Z}return $}),GK=(A)=>BK(A,!1),YJ=(A)=>BK(A,!0),QJ=(A)=>r6(A,(j)=>{let q=A.lineBlockAt(j.head).to;return j.head<q?q:Math.min(A.state.doc.length,j.head+1)});var OJ=(A)=>r6(A,(j)=>{let q=A.moveToLineBoundary(j,!1).head;return j.head>q?q:Math.max(0,j.head-1)}),FJ=(A)=>r6(A,(j)=>{let q=A.moveToLineBoundary(j,!0).head;return j.head<q?q:Math.min(A.state.doc.length,j.head+1)});var zJ=({state:A,dispatch:j})=>{if(A.readOnly)return!1;let q=A.changeByRange(($)=>{return{changes:{from:$.from,to:$.to,insert:m.of(["",""])},range:E.cursor($.from)}});return j(A.update(q,{scrollIntoView:!0,userEvent:"input"})),!0},IJ=({state:A,dispatch:j})=>{if(A.readOnly)return!1;let q=A.changeByRange(($)=>{if(!$.empty||$.from==0||$.from==A.doc.length)return{range:$};let B=$.from,G=A.doc.lineAt(B),K=B==G.from?B-1:qA(G.text,B-G.from,!1)+G.from,J=B==G.to?B+1:qA(G.text,B-G.from,!0)+G.from;return{changes:{from:K,to:J,insert:A.doc.slice(B,J).append(A.doc.slice(K,B))},range:E.cursor(J)}});if(q.changes.empty)return!1;return j(A.update(q,{scrollIntoView:!0,userEvent:"move.character"})),!0};function Yq(A){let j=[],q=-1;for(let $ of A.selection.ranges){let B=A.doc.lineAt($.from),G=A.doc.lineAt($.to);if(!$.empty&&$.to==G.from)G=A.doc.lineAt($.to-1);if(q>=B.number){let K=j[j.length-1];K.to=G.to,K.ranges.push($)}else j.push({from:B.from,to:G.to,ranges:[$]});q=G.number+1}return j}function KK(A,j,q){if(A.readOnly)return!1;let $=[],B=[];for(let G of Yq(A)){if(q?G.to==A.doc.length:G.from==0)continue;let K=A.doc.lineAt(q?G.to+1:G.from-1),J=K.length+1;if(q){$.push({from:G.to,to:K.to},{from:G.from,insert:K.text+A.lineBreak});for(let Z of G.ranges)B.push(E.range(Math.min(A.doc.length,Z.anchor+J),Math.min(A.doc.length,Z.head+J)))}else{$.push({from:K.from,to:G.from},{from:G.to,insert:A.lineBreak+K.text});for(let Z of G.ranges)B.push(E.range(Z.anchor-J,Z.head-J))}}if(!$.length)return!1;return j(A.update({changes:$,scrollIntoView:!0,selection:E.create(B,A.selection.mainIndex),userEvent:"move.line"})),!0}var WJ=({state:A,dispatch:j})=>KK(A,j,!1),EJ=({state:A,dispatch:j})=>KK(A,j,!0);function JK(A,j,q){if(A.readOnly)return!1;let $=[];for(let B of Yq(A))if(q)$.push({from:B.from,insert:A.doc.slice(B.from,B.to)+A.lineBreak});else $.push({from:B.to,insert:A.lineBreak+A.doc.slice(B.from,B.to)});return j(A.update({changes:$,scrollIntoView:!0,userEvent:"input.copyline"})),!0}var HJ=({state:A,dispatch:j})=>JK(A,j,!1),_J=({state:A,dispatch:j})=>JK(A,j,!0),NJ=(A)=>{if(A.state.readOnly)return!1;let{state:j}=A,q=j.changes(Yq(j).map(({from:B,to:G})=>{if(B>0)B--;else if(G<j.doc.length)G++;return{from:B,to:G}})),$=K6(j.selection,(B)=>{let G=void 0;if(A.lineWrapping){let K=A.lineBlockAt(B.head),J=A.coordsAtPos(B.head,B.assoc||1);if(J)G=K.bottom+A.documentTop-J.bottom+A.defaultLineHeight/2}return A.moveVertically(B,!0,G)}).map(q);return A.dispatch({changes:q,selection:$,scrollIntoView:!0,userEvent:"delete.line"}),!0};function DJ(A,j){if(/\(\)|\[\]|\{\}/.test(A.sliceDoc(j-1,j+1)))return{from:j,to:j};let q=GA(A).resolveInner(j),$=q.childBefore(j),B=q.childAfter(j),G;if($&&B&&$.to<=j&&B.from>=j&&(G=$.type.prop(S.closedBy))&&G.indexOf(B.name)>-1&&A.doc.lineAt($.to).from==A.doc.lineAt(B.from).from&&!/\S/.test(A.sliceDoc($.to,B.from)))return{from:$.to,to:B.from};return null}var C5=ZK(!1),MJ=ZK(!0);function ZK(A){return({state:j,dispatch:q})=>{if(j.readOnly)return!1;let $=j.changeByRange((B)=>{let{from:G,to:K}=B,J=j.doc.lineAt(G),Z=!A&&G==K&&DJ(j,G);if(A)G=K=(K<=J.to?J:j.doc.lineAt(K)).to;let X=new G6(j,{simulateBreak:G,simulateDoubleBreak:!!Z}),U=$q(X,G);if(U==null)U=Uj(/^\s*/.exec(j.doc.lineAt(G).text)[0],j.tabSize);while(K<J.to&&/\s/.test(J.text[K-J.from]))K++;if(Z)({from:G,to:K}=Z);else if(G>J.from&&G<J.from+100&&!/\S/.test(J.text.slice(0,G)))G=J.from;let Y=["",B6(j,U)];if(Z)Y.push(B6(j,X.lineIndent(J.from,-1)));return{changes:{from:G,to:K,insert:m.of(Y)},range:E.cursor(G+1+Y[1].length)}});return q(j.update($,{scrollIntoView:!0,userEvent:"input"})),!0}}function O$(A,j){let q=-1;return A.changeByRange(($)=>{let B=[];for(let K=$.from;K<=$.to;){let J=A.doc.lineAt(K);if(J.number>q&&($.empty||$.to>J.from))j(J,B,$),q=J.number;K=J.to+1}let G=A.changes(B);return{changes:B,range:E.range(G.mapPos($.anchor,1),G.mapPos($.head,1))}})}var RJ=({state:A,dispatch:j})=>{if(A.readOnly)return!1;let q=Object.create(null),$=new G6(A,{overrideIndentation:(G)=>{let K=q[G];return K==null?-1:K}}),B=O$(A,(G,K,J)=>{let Z=$q($,G.from);if(Z==null)return;if(!/\S/.test(G.text))Z=0;let X=/^\s*/.exec(G.text)[0],U=B6(A,Z);if(X!=U||J.from<G.from+X.length)q[G.from]=Z,K.push({from:G.from,to:G.from+X.length,insert:U})});if(!B.changes.empty)j(A.update(B,{userEvent:"indent"}));return!0},VJ=({state:A,dispatch:j})=>{if(A.readOnly)return!1;return j(A.update(O$(A,(q,$)=>{$.push({from:q.from,insert:A.facet(s6)})}),{userEvent:"input.indent"})),!0},kJ=({state:A,dispatch:j})=>{if(A.readOnly)return!1;return j(A.update(O$(A,(q,$)=>{let B=/^\s*/.exec(q.text)[0];if(!B)return;let G=Uj(B,A.tabSize),K=0,J=B6(A,Math.max(0,G-i6(A)));while(K<B.length&&K<J.length&&B.charCodeAt(K)==J.charCodeAt(K))K++;$.push({from:q.from+K,to:q.from+B.length,insert:J.slice(K)})}),{userEvent:"delete.dedent"})),!0},LJ=(A)=>{return A.setTabFocusMode(),!0};var PJ=[{key:"Ctrl-b",run:g5,shift:a5,preventDefault:!0},{key:"Ctrl-f",run:f5,shift:r5},{key:"Ctrl-p",run:d5,shift:e5},{key:"Ctrl-n",run:c5,shift:AK},{key:"Ctrl-a",run:i3,shift:GJ},{key:"Ctrl-e",run:n3,shift:KJ},{key:"Ctrl-d",run:$K},{key:"Ctrl-h",run:U$},{key:"Ctrl-k",run:QJ},{key:"Ctrl-Alt-h",run:GK},{key:"Ctrl-o",run:zJ},{key:"Ctrl-t",run:IJ},{key:"Ctrl-v",run:X$}],TJ=[{key:"ArrowLeft",run:g5,shift:a5,preventDefault:!0},{key:"Mod-ArrowLeft",mac:"Alt-ArrowLeft",run:m3,shift:o3,preventDefault:!0},{mac:"Cmd-ArrowLeft",run:c3,shift:$J,preventDefault:!0},{key:"ArrowRight",run:f5,shift:r5,preventDefault:!0},{key:"Mod-ArrowRight",mac:"Alt-ArrowRight",run:u3,shift:t3,preventDefault:!0},{mac:"Cmd-ArrowRight",run:s3,shift:BJ,preventDefault:!0},{key:"ArrowUp",run:d5,shift:e5,preventDefault:!0},{mac:"Cmd-ArrowUp",run:k5,shift:P5},{mac:"Ctrl-ArrowUp",run:M5,shift:R5},{key:"ArrowDown",run:c5,shift:AK,preventDefault:!0},{mac:"Cmd-ArrowDown",run:L5,shift:T5},{mac:"Ctrl-ArrowDown",run:X$,shift:V5},{key:"PageUp",run:M5,shift:R5},{key:"PageDown",run:X$,shift:V5},{key:"Home",run:d3,shift:qJ,preventDefault:!0},{key:"Mod-Home",run:k5,shift:P5},{key:"End",run:l3,shift:jJ,preventDefault:!0},{key:"Mod-End",run:L5,shift:T5},{key:"Enter",run:C5,shift:C5},{key:"Mod-a",run:JJ},{key:"Backspace",run:U$,shift:U$},{key:"Delete",run:$K},{key:"Mod-Backspace",mac:"Alt-Backspace",run:GK},{key:"Mod-Delete",mac:"Alt-Delete",run:YJ},{mac:"Mod-Backspace",run:OJ},{mac:"Mod-Delete",run:FJ}].concat(PJ.map((A)=>({mac:A.key,run:A.run,shift:A.shift}))),XK=[{key:"Alt-ArrowLeft",mac:"Ctrl-ArrowLeft",run:f3,shift:e3},{key:"Alt-ArrowRight",mac:"Ctrl-ArrowRight",run:p3,shift:AJ},{key:"Alt-ArrowUp",run:WJ},{key:"Shift-Alt-ArrowUp",run:HJ},{key:"Alt-ArrowDown",run:EJ},{key:"Shift-Alt-ArrowDown",run:_J},{key:"Escape",run:UJ},{key:"Mod-Enter",run:MJ},{key:"Alt-l",mac:"Ctrl-l",run:ZJ},{key:"Mod-i",run:XJ,preventDefault:!0},{key:"Mod-[",run:kJ},{key:"Mod-]",run:VJ},{key:"Mod-Alt-\\",run:RJ},{key:"Shift-Mod-k",run:NJ},{key:"Shift-Mod-\\",run:r3},{key:"Mod-/",run:N3},{key:"Alt-A",run:M3},{key:"Ctrl-m",mac:"Shift-Alt-m",run:LJ}].concat(TJ);var UK=typeof String.prototype.normalize=="function"?(A)=>A.normalize("NFKD"):(A)=>A;class uj{constructor(A,j,q=0,$=A.length,B,G){this.test=G,this.value={from:0,to:0},this.done=!1,this.matches=[],this.buffer="",this.bufferPos=0,this.iter=A.iterRange(q,$),this.bufferStart=q,this.normalize=B?(K)=>B(UK(K)):UK,this.query=this.normalize(j)}peek(){if(this.bufferPos==this.buffer.length){if(this.bufferStart+=this.buffer.length,this.iter.next(),this.iter.done)return-1;this.bufferPos=0,this.buffer=this.iter.value}return XA(this.buffer,this.bufferPos)}next(){while(this.matches.length)this.matches.pop();return this.nextOverlapping()}nextOverlapping(){for(;;){let A=this.peek();if(A<0)return this.done=!0,this;let j=H6(A),q=this.bufferStart+this.bufferPos;this.bufferPos+=VA(A);let $=this.normalize(j);if($.length)for(let B=0,G=q;;B++){let K=$.charCodeAt(B),J=this.match(K,G,this.bufferPos+this.bufferStart);if(B==$.length-1){if(J)return this.value=J,this;break}if(G==q&&B<j.length&&j.charCodeAt(B)==K)G++}}}match(A,j,q){let $=null;for(let B=0;B<this.matches.length;B+=2){let G=this.matches[B],K=!1;if(this.query.charCodeAt(G)==A)if(G==this.query.length-1)$={from:this.matches[B+1],to:q};else this.matches[B]++,K=!0;if(!K)this.matches.splice(B,2),B-=2}if(this.query.charCodeAt(0)==A)if(this.query.length==1)$={from:j,to:q};else this.matches.push(1,j);if($&&this.test&&!this.test($.from,$.to,this.buffer,this.bufferStart))$=null;return $}}if(typeof Symbol!="undefined")uj.prototype[Symbol.iterator]=function(){return this};var FK={from:-1,to:-1,match:/.*/.exec("")},W$="gm"+(/x/.unicode==null?"":"u");class E${constructor(A,j,q,$=0,B=A.length){if(this.text=A,this.to=B,this.curLine="",this.done=!1,this.value=FK,/\\[sWDnr]|\n|\r|\[\^/.test(j))return new H$(A,j,q,$,B);this.re=new RegExp(j,W$+((q===null||q===void 0?void 0:q.ignoreCase)?"i":"")),this.test=q===null||q===void 0?void 0:q.test,this.iter=A.iter();let G=A.lineAt($);this.curLineStart=G.from,this.matchPos=zq(A,$),this.getLine(this.curLineStart)}getLine(A){if(this.iter.next(A),this.iter.lineBreak)this.curLine="";else{if(this.curLine=this.iter.value,this.curLineStart+this.curLine.length>this.to)this.curLine=this.curLine.slice(0,this.to-this.curLineStart);this.iter.next()}}nextLine(){if(this.curLineStart=this.curLineStart+this.curLine.length+1,this.curLineStart>this.to)this.curLine="";else this.getLine(0)}next(){for(let A=this.matchPos-this.curLineStart;;){this.re.lastIndex=A;let j=this.matchPos<=this.to&&this.re.exec(this.curLine);if(j){let q=this.curLineStart+j.index,$=q+j[0].length;if(this.matchPos=zq(this.text,$+(q==$?1:0)),q==this.curLineStart+this.curLine.length)this.nextLine();if((q<$||q>this.value.to)&&(!this.test||this.test(q,$,j)))return this.value={from:q,to:$,match:j},this;A=this.matchPos-this.curLineStart}else if(this.curLineStart+this.curLine.length<this.to)this.nextLine(),A=0;else return this.done=!0,this}}}var F$=new WeakMap;class X6{constructor(A,j){this.from=A,this.text=j}get to(){return this.from+this.text.length}static get(A,j,q){let $=F$.get(A);if(!$||$.from>=q||$.to<=j){let K=new X6(j,A.sliceString(j,q));return F$.set(A,K),K}if($.from==j&&$.to==q)return $;let{text:B,from:G}=$;if(G>j)B=A.sliceString(j,G)+B,G=j;if($.to<q)B+=A.sliceString($.to,q);return F$.set(A,new X6(G,B)),new X6(j,B.slice(j-G,q-G))}}class H${constructor(A,j,q,$,B){this.text=A,this.to=B,this.done=!1,this.value=FK,this.matchPos=zq(A,$),this.re=new RegExp(j,W$+((q===null||q===void 0?void 0:q.ignoreCase)?"i":"")),this.test=q===null||q===void 0?void 0:q.test,this.flat=X6.get(A,$,this.chunkEnd($+5000))}chunkEnd(A){return A>=this.to?this.to:this.text.lineAt(A).to}next(){for(;;){let A=this.re.lastIndex=this.matchPos-this.flat.from,j=this.re.exec(this.flat.text);if(j&&!j[0]&&j.index==A)this.re.lastIndex=A+1,j=this.re.exec(this.flat.text);if(j){let q=this.flat.from+j.index,$=q+j[0].length;if((this.flat.to>=this.to||j.index+j[0].length<=this.flat.text.length-10)&&(!this.test||this.test(q,$,j)))return this.value={from:q,to:$,match:j},this.matchPos=zq(this.text,$+(q==$?1:0)),this}if(this.flat.to==this.to)return this.done=!0,this;this.flat=X6.get(this.text,this.flat.from,this.chunkEnd(this.flat.from+this.flat.text.length*2))}}}if(typeof Symbol!="undefined")E$.prototype[Symbol.iterator]=H$.prototype[Symbol.iterator]=function(){return this};function CJ(A){try{return new RegExp(A,W$),!0}catch(j){return!1}}function zq(A,j){if(j>=A.length)return j;let q=A.lineAt(j),$;while(j<q.to&&($=q.text.charCodeAt(j-q.from))>=56320&&$<57344)j++;return j}function z$(A){let j=String(A.state.doc.lineAt(A.state.selection.main.head).number),q=f("input",{class:"cm-textfield",name:"line",value:j}),$=f("form",{class:"cm-gotoLine",onkeydown:(G)=>{if(G.keyCode==27)G.preventDefault(),A.dispatch({effects:o6.of(!1)}),A.focus();else if(G.keyCode==13)G.preventDefault(),B()},onsubmit:(G)=>{G.preventDefault(),B()}},f("label",A.state.phrase("Go to line"),": ",q)," ",f("button",{class:"cm-button",type:"submit"},A.state.phrase("go")),f("button",{name:"close",onclick:()=>{A.dispatch({effects:o6.of(!1)}),A.focus()},"aria-label":A.state.phrase("close"),type:"button"},["×"]));function B(){let G=/^([+-])?(\d+)?(:\d+)?(%)?$/.exec(q.value);if(!G)return;let{state:K}=A,J=K.doc.lineAt(K.selection.main.head),[,Z,X,U,Y]=G,Q=U?+U.slice(1):0,O=X?+X:J.number;if(X&&Y){let I=O/100;if(Z)I=I*(Z=="-"?-1:1)+J.number/K.doc.lines;O=Math.round(K.doc.lines*I)}else if(X&&Z)O=O*(Z=="-"?-1:1)+J.number;let F=K.doc.line(Math.max(1,Math.min(K.doc.lines,O))),z=E.cursor(F.from+Math.max(0,Math.min(Q,F.length)));A.dispatch({effects:[o6.of(!1),R.scrollIntoView(z.from,{y:"center"})],selection:z}),A.focus()}return{dom:$}}var o6=b.define(),YK=o.define({create(){return!0},update(A,j){for(let q of j.effects)if(q.is(o6))A=q.value;return A},provide:(A)=>wj.from(A,(j)=>j?z$:null)}),yJ=(A)=>{let j=hj(A,z$);if(!j){let q=[o6.of(!0)];if(A.state.field(YK,!1)==null)q.push(b.appendConfig.of([YK,bJ]));A.dispatch({effects:q}),j=hj(A,z$)}if(j)j.dom.querySelector("input").select();return!0},bJ=R.baseTheme({".cm-panel.cm-gotoLine":{padding:"2px 6px 4px",position:"relative","& label":{fontSize:"80%"},"& [name=close]":{position:"absolute",top:"0",bottom:"0",right:"4px",backgroundColor:"inherit",border:"none",font:"inherit",padding:"0"}}}),xJ={highlightWordAroundCursor:!1,minSelectionLength:1,maxMatches:100,wholeWords:!1},zK=k.define({combine(A){return FA(A,xJ,{highlightWordAroundCursor:(j,q)=>j||q,minSelectionLength:Math.min,maxMatches:Math.min})}});function IK(A){let j=[mJ,vJ];if(A)j.push(zK.of(A));return j}var SJ=C.mark({class:"cm-selectionMatch"}),wJ=C.mark({class:"cm-selectionMatch cm-selectionMatch-main"});function QK(A,j,q,$){return(q==0||A(j.sliceDoc(q-1,q))!=l.Word)&&($==j.doc.length||A(j.sliceDoc($,$+1))!=l.Word)}function hJ(A,j,q,$){return A(j.sliceDoc(q,q+1))==l.Word&&A(j.sliceDoc($-1,$))==l.Word}var vJ=r.fromClass(class{constructor(A){this.decorations=this.getDeco(A)}update(A){if(A.selectionSet||A.docChanged||A.viewportChanged)this.decorations=this.getDeco(A.view)}getDeco(A){let j=A.state.facet(zK),{state:q}=A,$=q.selection;if($.ranges.length>1)return C.none;let B=$.main,G,K=null;if(B.empty){if(!j.highlightWordAroundCursor)return C.none;let Z=q.wordAt(B.head);if(!Z)return C.none;K=q.charCategorizer(B.head),G=q.sliceDoc(Z.from,Z.to)}else{let Z=B.to-B.from;if(Z<j.minSelectionLength||Z>200)return C.none;if(j.wholeWords){if(G=q.sliceDoc(B.from,B.to),K=q.charCategorizer(B.head),!(QK(K,q,B.from,B.to)&&hJ(K,q,B.from,B.to)))return C.none}else if(G=q.sliceDoc(B.from,B.to),!G)return C.none}let J=[];for(let Z of A.visibleRanges){let X=new uj(q.doc,G,Z.from,Z.to);while(!X.next().done){let{from:U,to:Y}=X.value;if(!K||QK(K,q,U,Y)){if(B.empty&&U<=B.from&&Y>=B.to)J.push(wJ.range(U,Y));else if(U>=B.to||Y<=B.from)J.push(SJ.range(U,Y));if(J.length>j.maxMatches)return C.none}}}return C.set(J)}},{decorations:(A)=>A.decorations}),mJ=R.baseTheme({".cm-selectionMatch":{backgroundColor:"#99ff7780"},".cm-searchMatch .cm-selectionMatch":{backgroundColor:"transparent"}}),uJ=({state:A,dispatch:j})=>{let{selection:q}=A,$=E.create(q.ranges.map((B)=>A.wordAt(B.head)||E.cursor(B.head)),q.mainIndex);if($.eq(q))return!1;return j(A.update({selection:$})),!0};function gJ(A,j){let{main:q,ranges:$}=A.selection,B=A.wordAt(q.head),G=B&&B.from==q.from&&B.to==q.to;for(let K=!1,J=new uj(A.doc,j,$[$.length-1].to);;)if(J.next(),J.done){if(K)return null;J=new uj(A.doc,j,0,Math.max(0,$[$.length-1].from-1)),K=!0}else{if(K&&$.some((Z)=>Z.from==J.value.from))continue;if(G){let Z=A.wordAt(J.value.from);if(!Z||Z.from!=J.value.from||Z.to!=J.value.to)continue}return J.value}}var fJ=({state:A,dispatch:j})=>{let{ranges:q}=A.selection;if(q.some((G)=>G.from===G.to))return uJ({state:A,dispatch:j});let $=A.sliceDoc(q[0].from,q[0].to);if(A.selection.ranges.some((G)=>A.sliceDoc(G.from,G.to)!=$))return!1;let B=gJ(A,$);if(!B)return!1;return j(A.update({selection:A.selection.addRange(E.range(B.from,B.to),!1),effects:R.scrollIntoView(B.to)})),!0},U6=k.define({combine(A){return FA(A,{top:!1,caseSensitive:!1,literal:!1,regexp:!1,wholeWord:!1,createPanel:(j)=>new RK(j),scrollToMatch:(j)=>R.scrollIntoView(j)})}});class _${constructor(A){this.search=A.search,this.caseSensitive=!!A.caseSensitive,this.literal=!!A.literal,this.regexp=!!A.regexp,this.replace=A.replace||"",this.valid=!!this.search&&(!this.regexp||CJ(this.search)),this.unquoted=this.unquote(this.search),this.wholeWord=!!A.wholeWord}unquote(A){return this.literal?A:A.replace(/\\([nrt\\])/g,(j,q)=>q=="n"?`
`:q=="r"?"\r":q=="t"?"\t":"\\")}eq(A){return this.search==A.search&&this.replace==A.replace&&this.caseSensitive==A.caseSensitive&&this.regexp==A.regexp&&this.wholeWord==A.wholeWord}create(){return this.regexp?new EK(this):new WK(this)}getCursor(A,j=0,q){let $=A.doc?A:v.create({doc:A});if(q==null)q=$.doc.length;return this.regexp?Z6(this,$,j,q):J6(this,$,j,q)}}class N${constructor(A){this.spec=A}}function J6(A,j,q,$){return new uj(j.doc,A.unquoted,q,$,A.caseSensitive?void 0:(B)=>B.toLowerCase(),A.wholeWord?pJ(j.doc,j.charCategorizer(j.selection.main.head)):void 0)}function pJ(A,j){return(q,$,B,G)=>{if(G>q||G+B.length<$)G=Math.max(0,q-2),B=A.sliceString(G,Math.min(A.length,$+2));return(j(Iq(B,q-G))!=l.Word||j(Wq(B,q-G))!=l.Word)&&(j(Wq(B,$-G))!=l.Word||j(Iq(B,$-G))!=l.Word)}}class WK extends N${constructor(A){super(A)}nextMatch(A,j,q){let $=J6(this.spec,A,q,A.doc.length).nextOverlapping();if($.done){let B=Math.min(A.doc.length,j+this.spec.unquoted.length);$=J6(this.spec,A,0,B).nextOverlapping()}return $.done||$.value.from==j&&$.value.to==q?null:$.value}prevMatchInRange(A,j,q){for(let $=q;;){let B=Math.max(j,$-1e4-this.spec.unquoted.length),G=J6(this.spec,A,B,$),K=null;while(!G.nextOverlapping().done)K=G.value;if(K)return K;if(B==j)return null;$-=1e4}}prevMatch(A,j,q){let $=this.prevMatchInRange(A,0,j);if(!$)$=this.prevMatchInRange(A,Math.max(0,q-this.spec.unquoted.length),A.doc.length);return $&&($.from!=j||$.to!=q)?$:null}getReplacement(A){return this.spec.unquote(this.spec.replace)}matchAll(A,j){let q=J6(this.spec,A,0,A.doc.length),$=[];while(!q.next().done){if($.length>=j)return null;$.push(q.value)}return $}highlight(A,j,q,$){let B=J6(this.spec,A,Math.max(0,j-this.spec.unquoted.length),Math.min(q+this.spec.unquoted.length,A.doc.length));while(!B.next().done)$(B.value.from,B.value.to)}}function Z6(A,j,q,$){return new E$(j.doc,A.search,{ignoreCase:!A.caseSensitive,test:A.wholeWord?lJ(j.charCategorizer(j.selection.main.head)):void 0},q,$)}function Iq(A,j){return A.slice(qA(A,j,!1),j)}function Wq(A,j){return A.slice(j,qA(A,j))}function lJ(A){return(j,q,$)=>!$[0].length||(A(Iq($.input,$.index))!=l.Word||A(Wq($.input,$.index))!=l.Word)&&(A(Wq($.input,$.index+$[0].length))!=l.Word||A(Iq($.input,$.index+$[0].length))!=l.Word)}class EK extends N${nextMatch(A,j,q){let $=Z6(this.spec,A,q,A.doc.length).next();if($.done)$=Z6(this.spec,A,0,j).next();return $.done?null:$.value}prevMatchInRange(A,j,q){for(let $=1;;$++){let B=Math.max(j,q-$*1e4),G=Z6(this.spec,A,B,q),K=null;while(!G.next().done)K=G.value;if(K&&(B==j||K.from>B+10))return K;if(B==j)return null}}prevMatch(A,j,q){return this.prevMatchInRange(A,0,j)||this.prevMatchInRange(A,q,A.doc.length)}getReplacement(A){return this.spec.unquote(this.spec.replace).replace(/\$([$&]|\d+)/g,(j,q)=>{if(q=="&")return A.match[0];if(q=="$")return"$";for(let $=q.length;$>0;$--){let B=+q.slice(0,$);if(B>0&&B<A.match.length)return A.match[B]+q.slice($)}return j})}matchAll(A,j){let q=Z6(this.spec,A,0,A.doc.length),$=[];while(!q.next().done){if($.length>=j)return null;$.push(q.value)}return $}highlight(A,j,q,$){let B=Z6(this.spec,A,Math.max(0,j-250),Math.min(q+250,A.doc.length));while(!B.next().done)$(B.value.from,B.value.to)}}var t6=b.define(),D$=b.define(),Lj=o.define({create(A){return new Fq(I$(A).create(),null)},update(A,j){for(let q of j.effects)if(q.is(t6))A=new Fq(q.value.create(),A.panel);else if(q.is(D$))A=new Fq(A.query,q.value?M$:null);return A},provide:(A)=>wj.from(A,(j)=>j.panel)});class Fq{constructor(A,j){this.query=A,this.panel=j}}var dJ=C.mark({class:"cm-searchMatch"}),cJ=C.mark({class:"cm-searchMatch cm-searchMatch-selected"}),sJ=r.fromClass(class{constructor(A){this.view=A,this.decorations=this.highlight(A.state.field(Lj))}update(A){let j=A.state.field(Lj);if(j!=A.startState.field(Lj)||A.docChanged||A.selectionSet||A.viewportChanged)this.decorations=this.highlight(j)}highlight({query:A,panel:j}){if(!j||!A.spec.valid)return C.none;let{view:q}=this,$=new RA;for(let B=0,G=q.visibleRanges,K=G.length;B<K;B++){let{from:J,to:Z}=G[B];while(B<K-1&&Z>G[B+1].from-500)Z=G[++B].to;A.highlight(q.state,J,Z,(X,U)=>{let Y=q.state.selection.ranges.some((Q)=>Q.from==X&&Q.to==U);$.add(X,U,Y?cJ:dJ)})}return $.finish()}},{decorations:(A)=>A.decorations});function e6(A){return(j)=>{let q=j.state.field(Lj,!1);return q&&q.query.spec.valid?A(j,q):NK(j)}}var Eq=e6((A,{query:j})=>{let{to:q}=A.state.selection.main,$=j.nextMatch(A.state,q,q);if(!$)return!1;let B=E.single($.from,$.to),G=A.state.facet(U6);return A.dispatch({selection:B,effects:[R$(A,$),G.scrollToMatch(B.main,A)],userEvent:"select.search"}),_K(A),!0}),Hq=e6((A,{query:j})=>{let{state:q}=A,{from:$}=q.selection.main,B=j.prevMatch(q,$,$);if(!B)return!1;let G=E.single(B.from,B.to),K=A.state.facet(U6);return A.dispatch({selection:G,effects:[R$(A,B),K.scrollToMatch(G.main,A)],userEvent:"select.search"}),_K(A),!0}),iJ=e6((A,{query:j})=>{let q=j.matchAll(A.state,1000);if(!q||!q.length)return!1;return A.dispatch({selection:E.create(q.map(($)=>E.range($.from,$.to))),userEvent:"select.search.matches"}),!0}),nJ=({state:A,dispatch:j})=>{let q=A.selection;if(q.ranges.length>1||q.main.empty)return!1;let{from:$,to:B}=q.main,G=[],K=0;for(let J=new uj(A.doc,A.sliceDoc($,B));!J.next().done;){if(G.length>1000)return!1;if(J.value.from==$)K=G.length;G.push(E.range(J.value.from,J.value.to))}return j(A.update({selection:E.create(G,K),userEvent:"select.search.matches"})),!0},OK=e6((A,{query:j})=>{let{state:q}=A,{from:$,to:B}=q.selection.main;if(q.readOnly)return!1;let G=j.nextMatch(q,$,$);if(!G)return!1;let K=G,J=[],Z,X,U=[];if(K.from==$&&K.to==B)X=q.toText(j.getReplacement(K)),J.push({from:K.from,to:K.to,insert:X}),K=j.nextMatch(q,K.from,K.to),U.push(R.announce.of(q.phrase("replaced match on line $",q.doc.lineAt($).number)+"."));let Y=A.state.changes(J);if(K)Z=E.single(K.from,K.to).map(Y),U.push(R$(A,K)),U.push(q.facet(U6).scrollToMatch(Z.main,A));return A.dispatch({changes:Y,selection:Z,effects:U,userEvent:"input.replace"}),!0}),aJ=e6((A,{query:j})=>{if(A.state.readOnly)return!1;let q=j.matchAll(A.state,1e9).map((B)=>{let{from:G,to:K}=B;return{from:G,to:K,insert:j.getReplacement(B)}});if(!q.length)return!1;let $=A.state.phrase("replaced $ matches",q.length)+".";return A.dispatch({changes:q,effects:R.announce.of($),userEvent:"input.replace.all"}),!0});function M$(A){return A.state.facet(U6).createPanel(A)}function I$(A,j){var q,$,B,G,K;let J=A.selection.main,Z=J.empty||J.to>J.from+100?"":A.sliceDoc(J.from,J.to);if(j&&!Z)return j;let X=A.facet(U6);return new _$({search:((q=j===null||j===void 0?void 0:j.literal)!==null&&q!==void 0?q:X.literal)?Z:Z.replace(/\n/g,"\\n"),caseSensitive:($=j===null||j===void 0?void 0:j.caseSensitive)!==null&&$!==void 0?$:X.caseSensitive,literal:(B=j===null||j===void 0?void 0:j.literal)!==null&&B!==void 0?B:X.literal,regexp:(G=j===null||j===void 0?void 0:j.regexp)!==null&&G!==void 0?G:X.regexp,wholeWord:(K=j===null||j===void 0?void 0:j.wholeWord)!==null&&K!==void 0?K:X.wholeWord})}function HK(A){let j=hj(A,M$);return j&&j.dom.querySelector("[main-field]")}function _K(A){let j=HK(A);if(j&&j==A.root.activeElement)j.select()}var NK=(A)=>{let j=A.state.field(Lj,!1);if(j&&j.panel){let q=HK(A);if(q&&q!=A.root.activeElement){let $=I$(A.state,j.query.spec);if($.valid)A.dispatch({effects:t6.of($)});q.focus(),q.select()}}else A.dispatch({effects:[D$.of(!0),j?t6.of(I$(A.state,j.query.spec)):b.appendConfig.of(oJ)]});return!0},DK=(A)=>{let j=A.state.field(Lj,!1);if(!j||!j.panel)return!1;let q=hj(A,M$);if(q&&q.dom.contains(A.root.activeElement))A.focus();return A.dispatch({effects:D$.of(!1)}),!0},MK=[{key:"Mod-f",run:NK,scope:"editor search-panel"},{key:"F3",run:Eq,shift:Hq,scope:"editor search-panel",preventDefault:!0},{key:"Mod-g",run:Eq,shift:Hq,scope:"editor search-panel",preventDefault:!0},{key:"Escape",run:DK,scope:"editor search-panel"},{key:"Mod-Shift-l",run:nJ},{key:"Mod-Alt-g",run:yJ},{key:"Mod-d",run:fJ,preventDefault:!0}];class RK{constructor(A){this.view=A;let j=this.query=A.state.field(Lj).query.spec;this.commit=this.commit.bind(this),this.searchField=f("input",{value:j.search,placeholder:TA(A,"Find"),"aria-label":TA(A,"Find"),class:"cm-textfield",name:"search",form:"","main-field":"true",onchange:this.commit,onkeyup:this.commit}),this.replaceField=f("input",{value:j.replace,placeholder:TA(A,"Replace"),"aria-label":TA(A,"Replace"),class:"cm-textfield",name:"replace",form:"",onchange:this.commit,onkeyup:this.commit}),this.caseField=f("input",{type:"checkbox",name:"case",form:"",checked:j.caseSensitive,onchange:this.commit}),this.reField=f("input",{type:"checkbox",name:"re",form:"",checked:j.regexp,onchange:this.commit}),this.wordField=f("input",{type:"checkbox",name:"word",form:"",checked:j.wholeWord,onchange:this.commit});function q($,B,G){return f("button",{class:"cm-button",name:$,onclick:B,type:"button"},G)}this.dom=f("div",{onkeydown:($)=>this.keydown($),class:"cm-search"},[this.searchField,q("next",()=>Eq(A),[TA(A,"next")]),q("prev",()=>Hq(A),[TA(A,"previous")]),q("select",()=>iJ(A),[TA(A,"all")]),f("label",null,[this.caseField,TA(A,"match case")]),f("label",null,[this.reField,TA(A,"regexp")]),f("label",null,[this.wordField,TA(A,"by word")]),...A.state.readOnly?[]:[f("br"),this.replaceField,q("replace",()=>OK(A),[TA(A,"replace")]),q("replaceAll",()=>aJ(A),[TA(A,"replace all")])],f("button",{name:"close",onclick:()=>DK(A),"aria-label":TA(A,"close"),type:"button"},["×"])])}commit(){let A=new _$({search:this.searchField.value,caseSensitive:this.caseField.checked,regexp:this.reField.checked,wholeWord:this.wordField.checked,replace:this.replaceField.value});if(!A.eq(this.query))this.query=A,this.view.dispatch({effects:t6.of(A)})}keydown(A){if(QG(this.view,A,"search-panel"))A.preventDefault();else if(A.keyCode==13&&A.target==this.searchField)A.preventDefault(),(A.shiftKey?Hq:Eq)(this.view);else if(A.keyCode==13&&A.target==this.replaceField)A.preventDefault(),OK(this.view)}update(A){for(let j of A.transactions)for(let q of j.effects)if(q.is(t6)&&!q.value.eq(this.query))this.setQuery(q.value)}setQuery(A){this.query=A,this.searchField.value=A.search,this.replaceField.value=A.replace,this.caseField.checked=A.caseSensitive,this.reField.checked=A.regexp,this.wordField.checked=A.wholeWord}mount(){this.searchField.select()}get pos(){return 80}get top(){return this.view.state.facet(U6).top}}function TA(A,j){return A.state.phrase(j)}var Qq=30,Oq=/[\s\.,:;?!]/;function R$(A,{from:j,to:q}){let $=A.state.doc.lineAt(j),B=A.state.doc.lineAt(q).to,G=Math.max($.from,j-Qq),K=Math.min(B,q+Qq),J=A.state.sliceDoc(G,K);if(G!=$.from){for(let Z=0;Z<Qq;Z++)if(!Oq.test(J[Z+1])&&Oq.test(J[Z])){J=J.slice(Z);break}}if(K!=B){for(let Z=J.length-1;Z>J.length-Qq;Z--)if(!Oq.test(J[Z-1])&&Oq.test(J[Z])){J=J.slice(0,Z);break}}return R.announce.of(`${A.state.phrase("current match")}. ${J} ${A.state.phrase("on line")} ${$.number}.`)}var rJ=R.baseTheme({".cm-panel.cm-search":{padding:"2px 6px 4px",position:"relative","& [name=close]":{position:"absolute",top:"0",right:"4px",backgroundColor:"inherit",border:"none",font:"inherit",padding:0,margin:0},"& input, & button, & label":{margin:".2em .6em .2em 0"},"& input[type=checkbox]":{marginRight:".2em"},"& label":{fontSize:"80%",whiteSpace:"pre"}},"&light .cm-searchMatch":{backgroundColor:"#ffff0054"},"&dark .cm-searchMatch":{backgroundColor:"#00ffff8a"},"&light .cm-searchMatch-selected":{backgroundColor:"#ff6a0054"},"&dark .cm-searchMatch-selected":{backgroundColor:"#ff00ff8a"}}),oJ=[Lj,lA.low(sJ),rJ];class P${constructor(A,j,q,$){this.state=A,this.pos=j,this.explicit=q,this.view=$,this.abortListeners=[],this.abortOnDocChange=!1}tokenBefore(A){let j=GA(this.state).resolveInner(this.pos,-1);while(j&&A.indexOf(j.name)<0)j=j.parent;return j?{from:j.from,to:this.pos,text:this.state.sliceDoc(j.from,this.pos),type:j.type}:null}matchBefore(A){let j=this.state.doc.lineAt(this.pos),q=Math.max(j.from,this.pos-250),$=j.text.slice(q-j.from,this.pos-j.from),B=$.search(xK(A,!1));return B<0?null:{from:q+B,to:this.pos,text:$.slice(B)}}get aborted(){return this.abortListeners==null}addEventListener(A,j,q){if(A=="abort"&&this.abortListeners){if(this.abortListeners.push(j),q&&q.onDocChange)this.abortOnDocChange=!0}}}function VK(A){let j=Object.keys(A).join(""),q=/\w/.test(j);if(q)j=j.replace(/\w/g,"");return`[${q?"\\w":""}${j.replace(/[^\w\s]/g,"\\$&")}]`}function tJ(A){let j=Object.create(null),q=Object.create(null);for(let{label:B}of A){j[B[0]]=!0;for(let G=1;G<B.length;G++)q[B[G]]=!0}let $=VK(j)+VK(q)+"*$";return[new RegExp("^"+$),new RegExp($)]}function eJ(A){let j=A.map((B)=>typeof B=="string"?{label:B}:B),[q,$]=j.every((B)=>/^\w+$/.test(B.label))?[/\w*$/,/\w+$/]:tJ(j);return(B)=>{let G=B.matchBefore($);return G||B.explicit?{from:G?G.from:B.pos,options:j,validFor:q}:null}}class L${constructor(A,j,q,$){this.completion=A,this.source=j,this.match=q,this.score=$}}function fj(A){return A.selection.main.from}function xK(A,j){var q;let{source:$}=A,B=j&&$[0]!="^",G=$[$.length-1]!="$";if(!B&&!G)return A;return new RegExp(`${B?"^":""}(?:${$})${G?"$":""}`,(q=A.flags)!==null&&q!==void 0?q:A.ignoreCase?"i":"")}var SK=kA.define();function AZ(A,j,q,$){let{main:B}=A.selection,G=q-B.from,K=$-B.from;return Object.assign(Object.assign({},A.changeByRange((J)=>{if(J!=B&&q!=$&&A.sliceDoc(J.from+G,J.from+K)!=A.sliceDoc(q,$))return{range:J};let Z=A.toText(j);return{changes:{from:J.from+G,to:$==B.from?J.to:J.from+K,insert:Z},range:E.cursor(J.from+G+Z.length)}})),{scrollIntoView:!0,userEvent:"input.complete"})}var kK=new WeakMap;function jZ(A){if(!Array.isArray(A))return A;let j=kK.get(A);if(!j)kK.set(A,j=eJ(A));return j}var Nq=b.define(),A7=b.define();class wK{constructor(A){this.pattern=A,this.chars=[],this.folded=[],this.any=[],this.precise=[],this.byWord=[],this.score=0,this.matched=[];for(let j=0;j<A.length;){let q=XA(A,j),$=VA(q);this.chars.push(q);let B=A.slice(j,j+$),G=B.toUpperCase();this.folded.push(XA(G==B?B.toLowerCase():G,0)),j+=$}this.astral=A.length!=this.chars.length}ret(A,j){return this.score=A,this.matched=j,this}match(A){if(this.pattern.length==0)return this.ret(-100,[]);if(A.length<this.pattern.length)return null;let{chars:j,folded:q,any:$,precise:B,byWord:G}=this;if(j.length==1){let W=XA(A,0),N=VA(W),_=N==A.length?0:-100;if(W==j[0]);else if(W==q[0])_+=-200;else return null;return this.ret(_,[0,N])}let K=A.indexOf(this.pattern);if(K==0)return this.ret(A.length==this.pattern.length?0:-100,[0,this.pattern.length]);let J=j.length,Z=0;if(K<0){for(let W=0,N=Math.min(A.length,200);W<N&&Z<J;){let _=XA(A,W);if(_==j[Z]||_==q[Z])$[Z++]=W;W+=VA(_)}if(Z<J)return null}let X=0,U=0,Y=!1,Q=0,O=-1,F=-1,z=/[a-z]/.test(A),I=!0;for(let W=0,N=Math.min(A.length,200),_=0;W<N&&U<J;){let H=XA(A,W);if(K<0){if(X<J&&H==j[X])B[X++]=W;if(Q<J)if(H==j[Q]||H==q[Q]){if(Q==0)O=W;F=W+1,Q++}else Q=0}let D,T=H<255?H>=48&&H<=57||H>=97&&H<=122?2:H>=65&&H<=90?1:0:(D=H6(H))!=D.toLowerCase()?1:D!=D.toUpperCase()?2:0;if(!W||T==1&&z||_==0&&T!=0){if(j[U]==H||q[U]==H&&(Y=!0))G[U++]=W;else if(G.length)I=!1}_=T,W+=VA(H)}if(U==J&&G[0]==0&&I)return this.result(-100+(Y?-200:0),G,A);if(Q==J&&O==0)return this.ret(-200-A.length+(F==A.length?0:-100),[0,F]);if(K>-1)return this.ret(-700-A.length,[K,K+this.pattern.length]);if(Q==J)return this.ret(-900-A.length,[O,F]);if(U==J)return this.result(-100+(Y?-200:0)+-700+(I?0:-1100),G,A);return j.length==2?null:this.result(($[0]?-700:0)+-200+-1100,$,A)}result(A,j,q){let $=[],B=0;for(let G of j){let K=G+(this.astral?VA(XA(q,G)):1);if(B&&$[B-1]==G)$[B-1]=K;else $[B++]=G,$[B++]=K}return this.ret(A-q.length,$)}}class hK{constructor(A){this.pattern=A,this.matched=[],this.score=0,this.folded=A.toLowerCase()}match(A){if(A.length<this.pattern.length)return null;let j=A.slice(0,this.pattern.length),q=j==this.pattern?0:j.toLowerCase()==this.folded?-200:null;if(q==null)return null;return this.matched=[0,j.length],this.score=q+(A.length==this.pattern.length?0:-100),this}}var KA=k.define({combine(A){return FA(A,{activateOnTyping:!0,activateOnCompletion:()=>!1,activateOnTypingDelay:100,selectOnOpen:!0,override:null,closeOnBlur:!0,maxRenderedOptions:100,defaultKeymap:!0,tooltipClass:()=>"",optionClass:()=>"",aboveCursor:!1,icons:!0,addToOptions:[],positionInfo:qZ,filterStrict:!1,compareCompletions:(j,q)=>j.label.localeCompare(q.label),interactionDelay:75,updateSyncTime:100},{defaultKeymap:(j,q)=>j&&q,closeOnBlur:(j,q)=>j&&q,icons:(j,q)=>j&&q,tooltipClass:(j,q)=>($)=>LK(j($),q($)),optionClass:(j,q)=>($)=>LK(j($),q($)),addToOptions:(j,q)=>j.concat(q),filterStrict:(j,q)=>j||q})}});function LK(A,j){return A?j?A+" "+j:A:j}function qZ(A,j,q,$,B,G){let K=A.textDirection==d.RTL,J=K,Z=!1,X="top",U,Y,Q=j.left-B.left,O=B.right-j.right,F=$.right-$.left,z=$.bottom-$.top;if(J&&Q<Math.min(F,O))J=!1;else if(!J&&O<Math.min(F,Q))J=!0;if(F<=(J?Q:O))U=Math.max(B.top,Math.min(q.top,B.bottom-z))-j.top,Y=Math.min(400,J?Q:O);else{Z=!0,Y=Math.min(400,(K?j.right:B.right-j.left)-30);let N=B.bottom-j.bottom;if(N>=z||N>j.top)U=q.bottom-j.top;else X="bottom",U=j.bottom-q.top}let I=(j.bottom-j.top)/G.offsetHeight,W=(j.right-j.left)/G.offsetWidth;return{style:`${X}: ${U/I}px; max-width: ${Y/W}px`,class:"cm-completionInfo-"+(Z?K?"left-narrow":"right-narrow":J?"left":"right")}}function $Z(A){let j=A.addToOptions.slice();if(A.icons)j.push({render(q){let $=document.createElement("div");if($.classList.add("cm-completionIcon"),q.type)$.classList.add(...q.type.split(/\s+/g).map((B)=>"cm-completionIcon-"+B));return $.setAttribute("aria-hidden","true"),$},position:20});return j.push({render(q,$,B,G){let K=document.createElement("span");K.className="cm-completionLabel";let J=q.displayLabel||q.label,Z=0;for(let X=0;X<G.length;){let U=G[X++],Y=G[X++];if(U>Z)K.appendChild(document.createTextNode(J.slice(Z,U)));let Q=K.appendChild(document.createElement("span"));Q.appendChild(document.createTextNode(J.slice(U,Y))),Q.className="cm-completionMatchedText",Z=Y}if(Z<J.length)K.appendChild(document.createTextNode(J.slice(Z)));return K},position:50},{render(q){if(!q.detail)return null;let $=document.createElement("span");return $.className="cm-completionDetail",$.textContent=q.detail,$},position:80}),j.sort((q,$)=>q.position-$.position).map((q)=>q.render)}function V$(A,j,q){if(A<=q)return{from:0,to:A};if(j<0)j=0;if(j<=A>>1){let B=Math.floor(j/q);return{from:B*q,to:(B+1)*q}}let $=Math.floor((A-j)/q);return{from:A-($+1)*q,to:A-$*q}}class vK{constructor(A,j,q){this.view=A,this.stateField=j,this.applyCompletion=q,this.info=null,this.infoDestroy=null,this.placeInfoReq={read:()=>this.measureInfo(),write:(J)=>this.placeInfo(J),key:this},this.space=null,this.currentClass="";let $=A.state.field(j),{options:B,selected:G}=$.open,K=A.state.facet(KA);this.optionContent=$Z(K),this.optionClass=K.optionClass,this.tooltipClass=K.tooltipClass,this.range=V$(B.length,G,K.maxRenderedOptions),this.dom=document.createElement("div"),this.dom.className="cm-tooltip-autocomplete",this.updateTooltipClass(A.state),this.dom.addEventListener("mousedown",(J)=>{let{options:Z}=A.state.field(j).open;for(let X=J.target,U;X&&X!=this.dom;X=X.parentNode)if(X.nodeName=="LI"&&(U=/-(\d+)$/.exec(X.id))&&+U[1]<Z.length){this.applyCompletion(A,Z[+U[1]]),J.preventDefault();return}}),this.dom.addEventListener("focusout",(J)=>{let Z=A.state.field(this.stateField,!1);if(Z&&Z.tooltip&&A.state.facet(KA).closeOnBlur&&J.relatedTarget!=A.contentDOM)A.dispatch({effects:A7.of(null)})}),this.showOptions(B,$.id)}mount(){this.updateSel()}showOptions(A,j){if(this.list)this.list.remove();this.list=this.dom.appendChild(this.createListBox(A,j,this.range)),this.list.addEventListener("scroll",()=>{if(this.info)this.view.requestMeasure(this.placeInfoReq)})}update(A){var j;let q=A.state.field(this.stateField),$=A.startState.field(this.stateField);if(this.updateTooltipClass(A.state),q!=$){let{options:B,selected:G,disabled:K}=q.open;if(!$.open||$.open.options!=B)this.range=V$(B.length,G,A.state.facet(KA).maxRenderedOptions),this.showOptions(B,q.id);if(this.updateSel(),K!=((j=$.open)===null||j===void 0?void 0:j.disabled))this.dom.classList.toggle("cm-tooltip-autocomplete-disabled",!!K)}}updateTooltipClass(A){let j=this.tooltipClass(A);if(j!=this.currentClass){for(let q of this.currentClass.split(" "))if(q)this.dom.classList.remove(q);for(let q of j.split(" "))if(q)this.dom.classList.add(q);this.currentClass=j}}positioned(A){if(this.space=A,this.info)this.view.requestMeasure(this.placeInfoReq)}updateSel(){let A=this.view.state.field(this.stateField),j=A.open;if(j.selected>-1&&j.selected<this.range.from||j.selected>=this.range.to)this.range=V$(j.options.length,j.selected,this.view.state.facet(KA).maxRenderedOptions),this.showOptions(j.options,A.id);if(this.updateSelectedOption(j.selected)){this.destroyInfo();let{completion:q}=j.options[j.selected],{info:$}=q;if(!$)return;let B=typeof $==="string"?document.createTextNode($):$(q);if(!B)return;if("then"in B)B.then((G)=>{if(G&&this.view.state.field(this.stateField,!1)==A)this.addInfoPane(G,q)}).catch((G)=>YA(this.view.state,G,"completion info"));else this.addInfoPane(B,q)}}addInfoPane(A,j){this.destroyInfo();let q=this.info=document.createElement("div");if(q.className="cm-tooltip cm-completionInfo",A.nodeType!=null)q.appendChild(A),this.infoDestroy=null;else{let{dom:$,destroy:B}=A;q.appendChild($),this.infoDestroy=B||null}this.dom.appendChild(q),this.view.requestMeasure(this.placeInfoReq)}updateSelectedOption(A){let j=null;for(let q=this.list.firstChild,$=this.range.from;q;q=q.nextSibling,$++)if(q.nodeName!="LI"||!q.id)$--;else if($==A){if(!q.hasAttribute("aria-selected"))q.setAttribute("aria-selected","true"),j=q}else if(q.hasAttribute("aria-selected"))q.removeAttribute("aria-selected");if(j)GZ(this.list,j);return j}measureInfo(){let A=this.dom.querySelector("[aria-selected]");if(!A||!this.info)return null;let j=this.dom.getBoundingClientRect(),q=this.info.getBoundingClientRect(),$=A.getBoundingClientRect(),B=this.space;if(!B){let G=this.dom.ownerDocument.documentElement;B={left:0,top:0,right:G.clientWidth,bottom:G.clientHeight}}if($.top>Math.min(B.bottom,j.bottom)-10||$.bottom<Math.max(B.top,j.top)+10)return null;return this.view.state.facet(KA).positionInfo(this.view,j,$,q,B,this.dom)}placeInfo(A){if(this.info)if(A){if(A.style)this.info.style.cssText=A.style;this.info.className="cm-tooltip cm-completionInfo "+(A.class||"")}else this.info.style.cssText="top: -1e6px"}createListBox(A,j,q){let $=document.createElement("ul");$.id=j,$.setAttribute("role","listbox"),$.setAttribute("aria-expanded","true"),$.setAttribute("aria-label",this.view.state.phrase("Completions")),$.addEventListener("mousedown",(G)=>{if(G.target==$)G.preventDefault()});let B=null;for(let G=q.from;G<q.to;G++){let{completion:K,match:J}=A[G],{section:Z}=K;if(Z){let Y=typeof Z=="string"?Z:Z.name;if(Y!=B&&(G>q.from||q.from==0))if(B=Y,typeof Z!="string"&&Z.header)$.appendChild(Z.header(Z));else{let Q=$.appendChild(document.createElement("completion-section"));Q.textContent=Y}}let X=$.appendChild(document.createElement("li"));X.id=j+"-"+G,X.setAttribute("role","option");let U=this.optionClass(K);if(U)X.className=U;for(let Y of this.optionContent){let Q=Y(K,this.view.state,this.view,J);if(Q)X.appendChild(Q)}}if(q.from)$.classList.add("cm-completionListIncompleteTop");if(q.to<A.length)$.classList.add("cm-completionListIncompleteBottom");return $}destroyInfo(){if(this.info){if(this.infoDestroy)this.infoDestroy();this.info.remove(),this.info=null}}destroy(){this.destroyInfo()}}function BZ(A,j){return(q)=>new vK(q,A,j)}function GZ(A,j){let q=A.getBoundingClientRect(),$=j.getBoundingClientRect(),B=q.height/A.offsetHeight;if($.top<q.top)A.scrollTop-=(q.top-$.top)/B;else if($.bottom>q.bottom)A.scrollTop+=($.bottom-q.bottom)/B}function PK(A){return(A.boost||0)*100+(A.apply?10:0)+(A.info?5:0)+(A.type?1:0)}function KZ(A,j){let q=[],$=null,B=(X)=>{q.push(X);let{section:U}=X.completion;if(U){if(!$)$=[];let Y=typeof U=="string"?U:U.name;if(!$.some((Q)=>Q.name==Y))$.push(typeof U=="string"?{name:Y}:U)}},G=j.facet(KA);for(let X of A)if(X.hasResult()){let U=X.result.getMatch;if(X.result.filter===!1)for(let Y of X.result.options)B(new L$(Y,X.source,U?U(Y):[],1e9-q.length));else{let Y=j.sliceDoc(X.from,X.to),Q,O=G.filterStrict?new hK(Y):new wK(Y);for(let F of X.result.options)if(Q=O.match(F.label)){let z=!F.displayLabel?Q.matched:U?U(F,Q.matched):[];B(new L$(F,X.source,z,Q.score+(F.boost||0)))}}}if($){let X=Object.create(null),U=0,Y=(Q,O)=>{var F,z;return((F=Q.rank)!==null&&F!==void 0?F:1e9)-((z=O.rank)!==null&&z!==void 0?z:1e9)||(Q.name<O.name?-1:1)};for(let Q of $.sort(Y))U-=1e5,X[Q.name]=U;for(let Q of q){let{section:O}=Q.completion;if(O)Q.score+=X[typeof O=="string"?O:O.name]}}let K=[],J=null,Z=G.compareCompletions;for(let X of q.sort((U,Y)=>Y.score-U.score||Z(U.completion,Y.completion))){let U=X.completion;if(!J||J.label!=U.label||J.detail!=U.detail||J.type!=null&&U.type!=null&&J.type!=U.type||J.apply!=U.apply||J.boost!=U.boost)K.push(X);else if(PK(X.completion)>PK(J))K[K.length-1]=X;J=X.completion}return K}class Y6{constructor(A,j,q,$,B,G){this.options=A,this.attrs=j,this.tooltip=q,this.timestamp=$,this.selected=B,this.disabled=G}setSelected(A,j){return A==this.selected||A>=this.options.length?this:new Y6(this.options,TK(j,A),this.tooltip,this.timestamp,A,this.disabled)}static build(A,j,q,$,B,G){if($&&!G&&A.some((Z)=>Z.isPending))return $.setDisabled();let K=KZ(A,j);if(!K.length)return $&&A.some((Z)=>Z.isPending)?$.setDisabled():null;let J=j.facet(KA).selectOnOpen?0:-1;if($&&$.selected!=J&&$.selected!=-1){let Z=$.options[$.selected].completion;for(let X=0;X<K.length;X++)if(K[X].completion==Z){J=X;break}}return new Y6(K,TK(q,J),{pos:A.reduce((Z,X)=>X.hasResult()?Math.min(Z,X.from):Z,1e8),create:QZ,above:B.aboveCursor},$?$.timestamp:Date.now(),J,!1)}map(A){return new Y6(this.options,this.attrs,Object.assign(Object.assign({},this.tooltip),{pos:A.mapPos(this.tooltip.pos)}),this.timestamp,this.selected,this.disabled)}setDisabled(){return new Y6(this.options,this.attrs,this.tooltip,this.timestamp,this.selected,!0)}}class Dq{constructor(A,j,q){this.active=A,this.id=j,this.open=q}static start(){return new Dq(UZ,"cm-ac-"+Math.floor(Math.random()*2000000).toString(36),null)}update(A){let{state:j}=A,q=j.facet(KA),B=(q.override||j.languageDataAt("autocomplete",fj(j)).map(jZ)).map((J)=>{return(this.active.find((X)=>X.source==J)||new fA(J,this.active.some((X)=>X.state!=0)?1:0)).update(A,q)});if(B.length==this.active.length&&B.every((J,Z)=>J==this.active[Z]))B=this.active;let G=this.open,K=A.effects.some((J)=>J.is(T$));if(G&&A.docChanged)G=G.map(A.changes);if(A.selection||B.some((J)=>J.hasResult()&&A.changes.touchesRange(J.from,J.to))||!JZ(B,this.active)||K)G=Y6.build(B,j,this.id,G,q,K);else if(G&&G.disabled&&!B.some((J)=>J.isPending))G=null;if(!G&&B.every((J)=>!J.isPending)&&B.some((J)=>J.hasResult()))B=B.map((J)=>J.hasResult()?new fA(J.source,0):J);for(let J of A.effects)if(J.is(uK))G=G&&G.setSelected(J.value,this.id);return B==this.active&&G==this.open?this:new Dq(B,this.id,G)}get tooltip(){return this.open?this.open.tooltip:null}get attrs(){return this.open?this.open.attrs:this.active.length?ZZ:XZ}}function JZ(A,j){if(A==j)return!0;for(let q=0,$=0;;){while(q<A.length&&!A[q].hasResult())q++;while($<j.length&&!j[$].hasResult())$++;let B=q==A.length,G=$==j.length;if(B||G)return B==G;if(A[q++].result!=j[$++].result)return!1}}var ZZ={"aria-autocomplete":"list"},XZ={};function TK(A,j){let q={"aria-autocomplete":"list","aria-haspopup":"listbox","aria-controls":A};if(j>-1)q["aria-activedescendant"]=A+"-"+j;return q}var UZ=[];function mK(A,j){if(A.isUserEvent("input.complete")){let $=A.annotation(SK);if($&&j.activateOnCompletion($))return 12}let q=A.isUserEvent("input.type");return q&&j.activateOnTyping?5:q?1:A.isUserEvent("delete.backward")?2:A.selection?8:A.docChanged?16:0}class fA{constructor(A,j,q=!1){this.source=A,this.state=j,this.explicit=q}hasResult(){return!1}get isPending(){return this.state==1}update(A,j){let q=mK(A,j),$=this;if(q&8||q&16&&this.touches(A))$=new fA($.source,0);if(q&4&&$.state==0)$=new fA(this.source,1);$=$.updateFor(A,q);for(let B of A.effects)if(B.is(Nq))$=new fA($.source,1,B.value);else if(B.is(A7))$=new fA($.source,0);else if(B.is(T$)){for(let G of B.value)if(G.source==$.source)$=G}return $}updateFor(A,j){return this.map(A.changes)}map(A){return this}touches(A){return A.changes.touchesRange(fj(A.state))}}class Q6 extends fA{constructor(A,j,q,$,B,G){super(A,3,j);this.limit=q,this.result=$,this.from=B,this.to=G}hasResult(){return!0}updateFor(A,j){var q;if(!(j&3))return this.map(A.changes);let $=this.result;if($.map&&!A.changes.empty)$=$.map($,A.changes);let B=A.changes.mapPos(this.from),G=A.changes.mapPos(this.to,1),K=fj(A.state);if(K>G||!$||j&2&&(fj(A.startState)==this.from||K<this.limit))return new fA(this.source,j&4?1:0);let J=A.changes.mapPos(this.limit);if(YZ($.validFor,A.state,B,G))return new Q6(this.source,this.explicit,J,$,B,G);if($.update&&($=$.update($,B,G,new P$(A.state,K,!1))))return new Q6(this.source,this.explicit,J,$,$.from,(q=$.to)!==null&&q!==void 0?q:fj(A.state));return new fA(this.source,1,this.explicit)}map(A){if(A.empty)return this;if(!(this.result.map?this.result.map(this.result,A):this.result))return new fA(this.source,0);return new Q6(this.source,this.explicit,A.mapPos(this.limit),this.result,A.mapPos(this.from),A.mapPos(this.to,1))}touches(A){return A.changes.touchesRange(this.from,this.to)}}function YZ(A,j,q,$){if(!A)return!1;let B=j.sliceDoc(q,$);return typeof A=="function"?A(B,q,$,j):xK(A,!0).test(B)}var T$=b.define({map(A,j){return A.map((q)=>q.map(j))}}),uK=b.define(),DA=o.define({create(){return Dq.start()},update(A,j){return A.update(j)},provide:(A)=>[u6.from(A,(j)=>j.tooltip),R.contentAttributes.from(A,(j)=>j.attrs)]});function C$(A,j){let q=j.completion.apply||j.completion.label,$=A.state.field(DA).active.find((B)=>B.source==j.source);if(!($ instanceof Q6))return!1;if(typeof q=="string")A.dispatch(Object.assign(Object.assign({},AZ(A.state,q,$.from,$.to)),{annotations:SK.of(j.completion)}));else q(A,j.completion,$.from,$.to);return!0}var QZ=BZ(DA,C$);function _q(A,j="option"){return(q)=>{let $=q.state.field(DA,!1);if(!$||!$.open||$.open.disabled||Date.now()-$.open.timestamp<q.state.facet(KA).interactionDelay)return!1;let B=1,G;if(j=="page"&&(G=u0(q,$.open.tooltip)))B=Math.max(2,Math.floor(G.dom.offsetHeight/G.dom.querySelector("li").offsetHeight)-1);let{length:K}=$.open.options,J=$.open.selected>-1?$.open.selected+B*(A?1:-1):A?0:K-1;if(J<0)J=j=="page"?0:K-1;else if(J>=K)J=j=="page"?K-1:0;return q.dispatch({effects:uK.of(J)}),!0}}var OZ=(A)=>{let j=A.state.field(DA,!1);if(A.state.readOnly||!j||!j.open||j.open.selected<0||j.open.disabled||Date.now()-j.open.timestamp<A.state.facet(KA).interactionDelay)return!1;return C$(A,j.open.options[j.open.selected])},CK=(A)=>{if(!A.state.field(DA,!1))return!1;return A.dispatch({effects:Nq.of(!0)}),!0},FZ=(A)=>{let j=A.state.field(DA,!1);if(!j||!j.active.some((q)=>q.state!=0))return!1;return A.dispatch({effects:A7.of(null)}),!0};class gK{constructor(A,j){this.active=A,this.context=j,this.time=Date.now(),this.updates=[],this.done=void 0}}var zZ=50,IZ=1000,WZ=r.fromClass(class{constructor(A){this.view=A,this.debounceUpdate=-1,this.running=[],this.debounceAccept=-1,this.pendingStart=!1,this.composing=0;for(let j of A.state.field(DA).active)if(j.isPending)this.startQuery(j)}update(A){let j=A.state.field(DA),q=A.state.facet(KA);if(!A.selectionSet&&!A.docChanged&&A.startState.field(DA)==j)return;let $=A.transactions.some((G)=>{let K=mK(G,q);return K&8||(G.selection||G.docChanged)&&!(K&3)});for(let G=0;G<this.running.length;G++){let K=this.running[G];if($||K.context.abortOnDocChange&&A.docChanged||K.updates.length+A.transactions.length>zZ&&Date.now()-K.time>IZ){for(let J of K.context.abortListeners)try{J()}catch(Z){YA(this.view.state,Z)}K.context.abortListeners=null,this.running.splice(G--,1)}else K.updates.push(...A.transactions)}if(this.debounceUpdate>-1)clearTimeout(this.debounceUpdate);if(A.transactions.some((G)=>G.effects.some((K)=>K.is(Nq))))this.pendingStart=!0;let B=this.pendingStart?50:q.activateOnTypingDelay;if(this.debounceUpdate=j.active.some((G)=>G.isPending&&!this.running.some((K)=>K.active.source==G.source))?setTimeout(()=>this.startUpdate(),B):-1,this.composing!=0){for(let G of A.transactions)if(G.isUserEvent("input.type"))this.composing=2;else if(this.composing==2&&G.selection)this.composing=3}}startUpdate(){this.debounceUpdate=-1,this.pendingStart=!1;let{state:A}=this.view,j=A.field(DA);for(let q of j.active)if(q.isPending&&!this.running.some(($)=>$.active.source==q.source))this.startQuery(q);if(this.running.length&&j.open&&j.open.disabled)this.debounceAccept=setTimeout(()=>this.accept(),this.view.state.facet(KA).updateSyncTime)}startQuery(A){let{state:j}=this.view,q=fj(j),$=new P$(j,q,A.explicit,this.view),B=new gK(A,$);this.running.push(B),Promise.resolve(A.source($)).then((G)=>{if(!B.context.aborted)B.done=G||null,this.scheduleAccept()},(G)=>{this.view.dispatch({effects:A7.of(null)}),YA(this.view.state,G)})}scheduleAccept(){if(this.running.every((A)=>A.done!==void 0))this.accept();else if(this.debounceAccept<0)this.debounceAccept=setTimeout(()=>this.accept(),this.view.state.facet(KA).updateSyncTime)}accept(){var A;if(this.debounceAccept>-1)clearTimeout(this.debounceAccept);this.debounceAccept=-1;let j=[],q=this.view.state.facet(KA),$=this.view.state.field(DA);for(let B=0;B<this.running.length;B++){let G=this.running[B];if(G.done===void 0)continue;if(this.running.splice(B--,1),G.done){let J=fj(G.updates.length?G.updates[0].startState:this.view.state),Z=Math.min(J,G.done.from+(G.active.explicit?0:1)),X=new Q6(G.active.source,G.active.explicit,Z,G.done,G.done.from,(A=G.done.to)!==null&&A!==void 0?A:J);for(let U of G.updates)X=X.update(U,q);if(X.hasResult()){j.push(X);continue}}let K=$.active.find((J)=>J.source==G.active.source);if(K&&K.isPending)if(G.done==null){let J=new fA(G.active.source,0);for(let Z of G.updates)J=J.update(Z,q);if(!J.isPending)j.push(J)}else this.startQuery(K)}if(j.length||$.open&&$.open.disabled)this.view.dispatch({effects:T$.of(j)})}},{eventHandlers:{blur(A){let j=this.view.state.field(DA,!1);if(j&&j.tooltip&&this.view.state.facet(KA).closeOnBlur){let q=j.open&&u0(this.view,j.open.tooltip);if(!q||!q.dom.contains(A.relatedTarget))setTimeout(()=>this.view.dispatch({effects:A7.of(null)}),10)}},compositionstart(){this.composing=1},compositionend(){if(this.composing==3)setTimeout(()=>this.view.dispatch({effects:Nq.of(!1)}),20);this.composing=0}}}),EZ=typeof navigator=="object"&&/Win/.test(navigator.platform),HZ=lA.highest(R.domEventHandlers({keydown(A,j){let q=j.state.field(DA,!1);if(!q||!q.open||q.open.disabled||q.open.selected<0||A.key.length>1||A.ctrlKey&&!(EZ&&A.altKey)||A.metaKey)return!1;let $=q.open.options[q.open.selected],B=q.active.find((K)=>K.source==$.source),G=$.completion.commitCharacters||B.result.commitCharacters;if(G&&G.indexOf(A.key)>-1)C$(j,$);return!1}})),_Z=R.baseTheme({".cm-tooltip.cm-tooltip-autocomplete":{"& > ul":{fontFamily:"monospace",whiteSpace:"nowrap",overflow:"hidden auto",maxWidth_fallback:"700px",maxWidth:"min(700px, 95vw)",minWidth:"250px",maxHeight:"10em",height:"100%",listStyle:"none",margin:0,padding:0,"& > li, & > completion-section":{padding:"1px 3px",lineHeight:1.2},"& > li":{overflowX:"hidden",textOverflow:"ellipsis",cursor:"pointer"},"& > completion-section":{display:"list-item",borderBottom:"1px solid silver",paddingLeft:"0.5em",opacity:0.7}}},"&light .cm-tooltip-autocomplete ul li[aria-selected]":{background:"#17c",color:"white"},"&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]":{background:"#777"},"&dark .cm-tooltip-autocomplete ul li[aria-selected]":{background:"#347",color:"white"},"&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]":{background:"#444"},".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after":{content:'"···"',opacity:0.5,display:"block",textAlign:"center"},".cm-tooltip.cm-completionInfo":{position:"absolute",padding:"3px 9px",width:"max-content",maxWidth:"400px",boxSizing:"border-box",whiteSpace:"pre-line"},".cm-completionInfo.cm-completionInfo-left":{right:"100%"},".cm-completionInfo.cm-completionInfo-right":{left:"100%"},".cm-completionInfo.cm-completionInfo-left-narrow":{right:"30px"},".cm-completionInfo.cm-completionInfo-right-narrow":{left:"30px"},"&light .cm-snippetField":{backgroundColor:"#00000022"},"&dark .cm-snippetField":{backgroundColor:"#ffffff22"},".cm-snippetFieldPosition":{verticalAlign:"text-top",width:0,height:"1.15em",display:"inline-block",margin:"0 -0.7px -.7em",borderLeft:"1.4px dotted #888"},".cm-completionMatchedText":{textDecoration:"underline"},".cm-completionDetail":{marginLeft:"0.5em",fontStyle:"italic"},".cm-completionIcon":{fontSize:"90%",width:".8em",display:"inline-block",textAlign:"center",paddingRight:".6em",opacity:"0.6",boxSizing:"content-box"},".cm-completionIcon-function, .cm-completionIcon-method":{"&:after":{content:"'ƒ'"}},".cm-completionIcon-class":{"&:after":{content:"'○'"}},".cm-completionIcon-interface":{"&:after":{content:"'◌'"}},".cm-completionIcon-variable":{"&:after":{content:"'\uD835\uDC65'"}},".cm-completionIcon-constant":{"&:after":{content:"'\uD835\uDC36'"}},".cm-completionIcon-type":{"&:after":{content:"'\uD835\uDC61'"}},".cm-completionIcon-enum":{"&:after":{content:"'∪'"}},".cm-completionIcon-property":{"&:after":{content:"'□'"}},".cm-completionIcon-keyword":{"&:after":{content:"'\uD83D\uDD11︎'"}},".cm-completionIcon-namespace":{"&:after":{content:"'▢'"}},".cm-completionIcon-text":{"&:after":{content:"'abc'",fontSize:"50%",verticalAlign:"middle"}}});var j7={brackets:["(","[","{","'",'"'],before:")]}:;>",stringPrefixes:[]},gj=b.define({map(A,j){let q=j.mapPos(A,-1,ZA.TrackAfter);return q==null?void 0:q}}),y$=new class extends Aj{};y$.startSide=1;y$.endSide=-1;var fK=o.define({create(){return h.empty},update(A,j){if(A=A.map(j.changes),j.selection){let q=j.state.doc.lineAt(j.selection.main.head);A=A.update({filter:($)=>$>=q.from&&$<=q.to})}for(let q of j.effects)if(q.is(gj))A=A.update({add:[y$.range(q.value,q.value+1)]});return A}});function pK(){return[DZ,fK]}var k$="()[]{}<>«»»«［］｛｝";function lK(A){for(let j=0;j<k$.length;j+=2)if(k$.charCodeAt(j)==A)return k$.charAt(j+1);return H6(A<128?A:A+1)}function dK(A,j){return A.languageDataAt("closeBrackets",j)[0]||j7}var NZ=typeof navigator=="object"&&/Android\b/.test(navigator.userAgent),DZ=R.inputHandler.of((A,j,q,$)=>{if((NZ?A.composing:A.compositionStarted)||A.state.readOnly)return!1;let B=A.state.selection.main;if($.length>2||$.length==2&&VA(XA($,0))==1||j!=B.from||q!=B.to)return!1;let G=RZ(A.state,$);if(!G)return!1;return A.dispatch(G),!0}),MZ=({state:A,dispatch:j})=>{if(A.readOnly)return!1;let $=dK(A,A.selection.main.head).brackets||j7.brackets,B=null,G=A.changeByRange((K)=>{if(K.empty){let J=VZ(A.doc,K.head);for(let Z of $)if(Z==J&&Mq(A.doc,K.head)==lK(XA(Z,0)))return{changes:{from:K.head-Z.length,to:K.head+Z.length},range:E.cursor(K.head-Z.length)}}return{range:B=K}});if(!B)j(A.update(G,{scrollIntoView:!0,userEvent:"delete.backward"}));return!B},cK=[{key:"Backspace",run:MZ}];function RZ(A,j){let q=dK(A,A.selection.main.head),$=q.brackets||j7.brackets;for(let B of $){let G=lK(XA(B,0));if(j==B)return G==B?PZ(A,B,$.indexOf(B+B+B)>-1,q):kZ(A,B,G,q.before||j7.before);if(j==G&&sK(A,A.selection.main.from))return LZ(A,B,G)}return null}function sK(A,j){let q=!1;return A.field(fK).between(0,A.doc.length,($)=>{if($==j)q=!0}),q}function Mq(A,j){let q=A.sliceString(j,j+2);return q.slice(0,VA(XA(q,0)))}function VZ(A,j){let q=A.sliceString(j-2,j);return VA(XA(q,0))==q.length?q:q.slice(1)}function kZ(A,j,q,$){let B=null,G=A.changeByRange((K)=>{if(!K.empty)return{changes:[{insert:j,from:K.from},{insert:q,from:K.to}],effects:gj.of(K.to+j.length),range:E.range(K.anchor+j.length,K.head+j.length)};let J=Mq(A.doc,K.head);if(!J||/\s/.test(J)||$.indexOf(J)>-1)return{changes:{insert:j+q,from:K.head},effects:gj.of(K.head+j.length),range:E.cursor(K.head+j.length)};return{range:B=K}});return B?null:A.update(G,{scrollIntoView:!0,userEvent:"input.type"})}function LZ(A,j,q){let $=null,B=A.changeByRange((G)=>{if(G.empty&&Mq(A.doc,G.head)==q)return{changes:{from:G.head,to:G.head+q.length,insert:q},range:E.cursor(G.head+q.length)};return $={range:G}});return $?null:A.update(B,{scrollIntoView:!0,userEvent:"input.type"})}function PZ(A,j,q,$){let B=$.stringPrefixes||j7.stringPrefixes,G=null,K=A.changeByRange((J)=>{if(!J.empty)return{changes:[{insert:j,from:J.from},{insert:j,from:J.to}],effects:gj.of(J.to+j.length),range:E.range(J.anchor+j.length,J.head+j.length)};let Z=J.head,X=Mq(A.doc,Z),U;if(X==j){if(yK(A,Z))return{changes:{insert:j+j,from:Z},effects:gj.of(Z+j.length),range:E.cursor(Z+j.length)};else if(sK(A,Z)){let Q=q&&A.sliceDoc(Z,Z+j.length*3)==j+j+j?j+j+j:j;return{changes:{from:Z,to:Z+Q.length,insert:Q},range:E.cursor(Z+Q.length)}}}else if(q&&A.sliceDoc(Z-2*j.length,Z)==j+j&&(U=bK(A,Z-2*j.length,B))>-1&&yK(A,U))return{changes:{insert:j+j+j+j,from:Z},effects:gj.of(Z+j.length),range:E.cursor(Z+j.length)};else if(A.charCategorizer(Z)(X)!=l.Word){if(bK(A,Z,B)>-1&&!TZ(A,Z,j,B))return{changes:{insert:j+j,from:Z},effects:gj.of(Z+j.length),range:E.cursor(Z+j.length)}}return{range:G=J}});return G?null:A.update(K,{scrollIntoView:!0,userEvent:"input.type"})}function yK(A,j){let q=GA(A).resolveInner(j+1);return q.parent&&q.from==j}function TZ(A,j,q,$){let B=GA(A).resolveInner(j,-1),G=$.reduce((K,J)=>Math.max(K,J.length),0);for(let K=0;K<5;K++){let J=A.sliceDoc(B.from,Math.min(B.to,B.from+q.length+G)),Z=J.indexOf(q);if(!Z||Z>-1&&$.indexOf(J.slice(0,Z))>-1){let U=B.firstChild;while(U&&U.from==B.from&&U.to-U.from>q.length+Z){if(A.sliceDoc(U.to-q.length,U.to)==q)return!1;U=U.firstChild}return!0}let X=B.to==j&&B.parent;if(!X)break;B=X}return!1}function bK(A,j,q){let $=A.charCategorizer(j);if($(A.sliceDoc(j-1,j))!=l.Word)return j;for(let B of q){let G=j-B.length;if(A.sliceDoc(G,j)==B&&$(A.sliceDoc(G-1,G))!=l.Word)return G}return-1}function iK(A={}){return[HZ,DA,KA.of(A),WZ,CZ,_Z]}var b$=[{key:"Ctrl-Space",run:CK},{mac:"Alt-`",run:CK},{key:"Escape",run:FZ},{key:"ArrowDown",run:_q(!0)},{key:"ArrowUp",run:_q(!1)},{key:"PageDown",run:_q(!0,"page")},{key:"PageUp",run:_q(!1,"page")},{key:"Enter",run:OZ}],CZ=lA.highest(v6.computeN([KA],(A)=>A.facet(KA).defaultKeymap?[b$]:[]));class x${constructor(A,j,q){this.from=A,this.to=j,this.diagnostic=q}}class pj{constructor(A,j,q){this.diagnostics=A,this.panel=j,this.selected=q}static init(A,j,q){let $=q.facet(q7).markerFilter;if($)A=$(A,q);let B=A.slice().sort((X,U)=>X.from-U.from||X.to-U.to),G=new RA,K=[],J=0;for(let X=0;;){let U=X==B.length?null:B[X];if(!U&&!K.length)break;let Y,Q;if(K.length)Y=J,Q=K.reduce((F,z)=>Math.min(F,z.to),U&&U.from>Y?U.from:1e8);else Y=U.from,Q=U.to,K.push(U),X++;while(X<B.length){let F=B[X];if(F.from==Y&&(F.to>F.from||F.to==Y))K.push(F),X++,Q=Math.min(F.to,Q);else{Q=Math.min(F.from,Q);break}}let O=fZ(K);if(K.some((F)=>F.from==F.to||F.from==F.to-1&&q.doc.lineAt(F.from).to==F.from))G.add(Y,Y,C.widget({widget:new A4(O),diagnostics:K.slice()}));else{let F=K.reduce((z,I)=>I.markClass?z+" "+I.markClass:z,"");G.add(Y,Q,C.mark({class:"cm-lintRange cm-lintRange-"+O+F,diagnostics:K.slice(),inclusiveEnd:K.some((z)=>z.to>Q)}))}J=Q;for(let F=0;F<K.length;F++)if(K[F].to<=J)K.splice(F--,1)}let Z=G.finish();return new pj(Z,j,O6(Z))}}function O6(A,j=null,q=0){let $=null;return A.between(q,1e9,(B,G,{spec:K})=>{if(j&&K.diagnostics.indexOf(j)<0)return;if(!$)$=new x$(B,G,j||K.diagnostics[0]);else if(K.diagnostics.indexOf($.diagnostic)<0)return!1;else $=new x$($.from,G,$.diagnostic)}),$}function yZ(A,j){let q=j.pos,$=j.end||q,B=A.state.facet(q7).hideOn(A,q,$);if(B!=null)return B;let G=A.startState.doc.lineAt(j.pos);return!!(A.effects.some((K)=>K.is(aK))||A.changes.touchesRange(G.from,Math.max(G.to,$)))}function bZ(A,j){return A.field(CA,!1)?j:j.concat(b.appendConfig.of(pZ))}var aK=b.define(),w$=b.define(),rK=b.define(),CA=o.define({create(){return new pj(C.none,null,null)},update(A,j){if(j.docChanged&&A.diagnostics.size){let q=A.diagnostics.map(j.changes),$=null,B=A.panel;if(A.selected){let G=j.changes.mapPos(A.selected.from,1);$=O6(q,A.selected.diagnostic,G)||O6(q,null,G)}if(!q.size&&B&&j.state.facet(q7).autoPanel)B=null;A=new pj(q,B,$)}for(let q of j.effects)if(q.is(aK)){let $=!j.state.facet(q7).autoPanel?A.panel:q.value.length?$7.open:null;A=pj.init(q.value,$,j.state)}else if(q.is(w$))A=new pj(A.diagnostics,q.value?$7.open:null,A.selected);else if(q.is(rK))A=new pj(A.diagnostics,A.panel,q.value);return A},provide:(A)=>[wj.from(A,(j)=>j.panel),R.decorations.from(A,(j)=>j.diagnostics)]});var xZ=C.mark({class:"cm-lintRange cm-lintRange-active"});function SZ(A,j,q){let{diagnostics:$}=A.state.field(CA),B,G=-1,K=-1;$.between(j-(q<0?1:0),j+(q>0?1:0),(Z,X,{spec:U})=>{if(j>=Z&&j<=X&&(Z==X||(j>Z||q>0)&&(j<X||q<0)))return B=U.diagnostics,G=Z,K=X,!1});let J=A.state.facet(q7).tooltipFilter;if(B&&J)B=J(B,A.state);if(!B)return null;return{pos:G,end:K,above:A.state.doc.lineAt(G).to<K,create(){return{dom:wZ(A,B)}}}}function wZ(A,j){return f("ul",{class:"cm-tooltip-lint"},j.map((q)=>eK(A,q,!1)))}var hZ=(A)=>{let j=A.state.field(CA,!1);if(!j||!j.panel)A.dispatch({effects:bZ(A.state,[w$.of(!0)])});let q=hj(A,$7.open);if(q)q.dom.querySelector(".cm-panel-lint ul").focus();return!0},nK=(A)=>{let j=A.state.field(CA,!1);if(!j||!j.panel)return!1;return A.dispatch({effects:w$.of(!1)}),!0},vZ=(A)=>{let j=A.state.field(CA,!1);if(!j)return!1;let q=A.state.selection.main,$=j.diagnostics.iter(q.to+1);if(!$.value){if($=j.diagnostics.iter(0),!$.value||$.from==q.from&&$.to==q.to)return!1}return A.dispatch({selection:{anchor:$.from,head:$.to},scrollIntoView:!0}),!0};var oK=[{key:"Mod-Shift-m",run:hZ,preventDefault:!0},{key:"F8",run:vZ}];var q7=k.define({combine(A){return Object.assign({sources:A.map((j)=>j.source).filter((j)=>j!=null)},FA(A.map((j)=>j.config),{delay:750,markerFilter:null,tooltipFilter:null,needsRefresh:null,hideOn:()=>null},{needsRefresh:(j,q)=>!j?q:!q?j:($)=>j($)||q($)}))}});function tK(A){let j=[];if(A)A:for(let{name:q}of A){for(let $=0;$<q.length;$++){let B=q[$];if(/[a-zA-Z]/.test(B)&&!j.some((G)=>G.toLowerCase()==B.toLowerCase())){j.push(B);continue A}}j.push("")}return j}function eK(A,j,q){var $;let B=q?tK(j.actions):[];return f("li",{class:"cm-diagnostic cm-diagnostic-"+j.severity},f("span",{class:"cm-diagnosticText"},j.renderMessage?j.renderMessage(A):j.message),($=j.actions)===null||$===void 0?void 0:$.map((G,K)=>{let J=!1,Z=(Q)=>{if(Q.preventDefault(),J)return;J=!0;let O=O6(A.state.field(CA).diagnostics,j);if(O)G.apply(A,O.from,O.to)},{name:X}=G,U=B[K]?X.indexOf(B[K]):-1,Y=U<0?X:[X.slice(0,U),f("u",X.slice(U,U+1)),X.slice(U+1)];return f("button",{type:"button",class:"cm-diagnosticAction",onclick:Z,onmousedown:Z,"aria-label":` Action: ${X}${U<0?"":` (access key "${B[K]})"`}.`},Y)}),j.source&&f("div",{class:"cm-diagnosticSource"},j.source))}class A4 extends hA{constructor(A){super();this.sev=A}eq(A){return A.sev==this.sev}toDOM(){return f("span",{class:"cm-lintPoint cm-lintPoint-"+this.sev})}}class S${constructor(A,j){this.diagnostic=j,this.id="item_"+Math.floor(Math.random()*4294967295).toString(16),this.dom=eK(A,j,!0),this.dom.id=this.id,this.dom.setAttribute("role","option")}}class $7{constructor(A){this.view=A,this.items=[];let j=($)=>{if($.keyCode==27)nK(this.view),this.view.focus();else if($.keyCode==38||$.keyCode==33)this.moveSelection((this.selectedIndex-1+this.items.length)%this.items.length);else if($.keyCode==40||$.keyCode==34)this.moveSelection((this.selectedIndex+1)%this.items.length);else if($.keyCode==36)this.moveSelection(0);else if($.keyCode==35)this.moveSelection(this.items.length-1);else if($.keyCode==13)this.view.focus();else if($.keyCode>=65&&$.keyCode<=90&&this.selectedIndex>=0){let{diagnostic:B}=this.items[this.selectedIndex],G=tK(B.actions);for(let K=0;K<G.length;K++)if(G[K].toUpperCase().charCodeAt(0)==$.keyCode){let J=O6(this.view.state.field(CA).diagnostics,B);if(J)B.actions[K].apply(A,J.from,J.to)}}else return;$.preventDefault()},q=($)=>{for(let B=0;B<this.items.length;B++)if(this.items[B].dom.contains($.target))this.moveSelection(B)};this.list=f("ul",{tabIndex:0,role:"listbox","aria-label":this.view.state.phrase("Diagnostics"),onkeydown:j,onclick:q}),this.dom=f("div",{class:"cm-panel-lint"},this.list,f("button",{type:"button",name:"close","aria-label":this.view.state.phrase("close"),onclick:()=>nK(this.view)},"×")),this.update()}get selectedIndex(){let A=this.view.state.field(CA).selected;if(!A)return-1;for(let j=0;j<this.items.length;j++)if(this.items[j].diagnostic==A.diagnostic)return j;return-1}update(){let{diagnostics:A,selected:j}=this.view.state.field(CA),q=0,$=!1,B=null,G=new Set;A.between(0,this.view.state.doc.length,(K,J,{spec:Z})=>{for(let X of Z.diagnostics){if(G.has(X))continue;G.add(X);let U=-1,Y;for(let Q=q;Q<this.items.length;Q++)if(this.items[Q].diagnostic==X){U=Q;break}if(U<0)Y=new S$(this.view,X),this.items.splice(q,0,Y),$=!0;else if(Y=this.items[U],U>q)this.items.splice(q,U-q),$=!0;if(j&&Y.diagnostic==j.diagnostic){if(!Y.dom.hasAttribute("aria-selected"))Y.dom.setAttribute("aria-selected","true"),B=Y}else if(Y.dom.hasAttribute("aria-selected"))Y.dom.removeAttribute("aria-selected");q++}});while(q<this.items.length&&!(this.items.length==1&&this.items[0].diagnostic.from<0))$=!0,this.items.pop();if(this.items.length==0)this.items.push(new S$(this.view,{from:-1,to:-1,severity:"info",message:this.view.state.phrase("No diagnostics")})),$=!0;if(B)this.list.setAttribute("aria-activedescendant",B.id),this.view.requestMeasure({key:this,read:()=>({sel:B.dom.getBoundingClientRect(),panel:this.list.getBoundingClientRect()}),write:({sel:K,panel:J})=>{let Z=J.height/this.list.offsetHeight;if(K.top<J.top)this.list.scrollTop-=(J.top-K.top)/Z;else if(K.bottom>J.bottom)this.list.scrollTop+=(K.bottom-J.bottom)/Z}});else if(this.selectedIndex<0)this.list.removeAttribute("aria-activedescendant");if($)this.sync()}sync(){let A=this.list.firstChild;function j(){let q=A;A=q.nextSibling,q.remove()}for(let q of this.items)if(q.dom.parentNode==this.list){while(A!=q.dom)j();A=q.dom.nextSibling}else this.list.insertBefore(q.dom,A);while(A)j()}moveSelection(A){if(this.selectedIndex<0)return;let j=this.view.state.field(CA),q=O6(j.diagnostics,this.items[A].diagnostic);if(!q)return;this.view.dispatch({selection:{anchor:q.from,head:q.to},scrollIntoView:!0,effects:rK.of(q)})}static open(A){return new $7(A)}}function mZ(A,j='viewBox="0 0 40 40"'){return`url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${j}>${encodeURIComponent(A)}</svg>')`}function Rq(A){return mZ(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${A}" fill="none" stroke-width=".7"/>`,'width="6" height="3"')}var uZ=R.baseTheme({".cm-diagnostic":{padding:"3px 6px 3px 8px",marginLeft:"-1px",display:"block",whiteSpace:"pre-wrap"},".cm-diagnostic-error":{borderLeft:"5px solid #d11"},".cm-diagnostic-warning":{borderLeft:"5px solid orange"},".cm-diagnostic-info":{borderLeft:"5px solid #999"},".cm-diagnostic-hint":{borderLeft:"5px solid #66d"},".cm-diagnosticAction":{font:"inherit",border:"none",padding:"2px 4px",backgroundColor:"#444",color:"white",borderRadius:"3px",marginLeft:"8px",cursor:"pointer"},".cm-diagnosticSource":{fontSize:"70%",opacity:0.7},".cm-lintRange":{backgroundPosition:"left bottom",backgroundRepeat:"repeat-x",paddingBottom:"0.7px"},".cm-lintRange-error":{backgroundImage:Rq("#d11")},".cm-lintRange-warning":{backgroundImage:Rq("orange")},".cm-lintRange-info":{backgroundImage:Rq("#999")},".cm-lintRange-hint":{backgroundImage:Rq("#66d")},".cm-lintRange-active":{backgroundColor:"#ffdd9980"},".cm-tooltip-lint":{padding:0,margin:0},".cm-lintPoint":{position:"relative","&:after":{content:'""',position:"absolute",bottom:0,left:"-2px",borderLeft:"3px solid transparent",borderRight:"3px solid transparent",borderBottom:"4px solid #d11"}},".cm-lintPoint-warning":{"&:after":{borderBottomColor:"orange"}},".cm-lintPoint-info":{"&:after":{borderBottomColor:"#999"}},".cm-lintPoint-hint":{"&:after":{borderBottomColor:"#66d"}},".cm-panel.cm-panel-lint":{position:"relative","& ul":{maxHeight:"100px",overflowY:"auto","& [aria-selected]":{backgroundColor:"#ddd","& u":{textDecoration:"underline"}},"&:focus [aria-selected]":{background_fallback:"#bdf",backgroundColor:"Highlight",color_fallback:"white",color:"HighlightText"},"& u":{textDecoration:"none"},padding:0,margin:0},"& [name=close]":{position:"absolute",top:"0",right:"2px",background:"inherit",border:"none",font:"inherit",padding:0,margin:0}}});function gZ(A){return A=="error"?4:A=="warning"?3:A=="info"?2:1}function fZ(A){let j="hint",q=1;for(let $ of A){let B=gZ($.severity);if(B>q)q=B,j=$.severity}return j}var pZ=[CA,R.decorations.compute([CA],(A)=>{let{selected:j,panel:q}=A.field(CA);return!j||!q||j.from==j.to?C.none:C.set([xZ.range(j.from,j.to)])}),TG(SZ,{hideOn:yZ}),uZ];var j4=(()=>[xG(),SG(),DG(),S5(),F5(),WG(),_G(),v.allowMultipleSelections.of(!0),G5(),I5(E5,{fallback:!0}),D5(),pK(),iK(),kG(),LG(),VG(),IK(),v6.of([...cK,...XK,...MK,...m5,...U5,...b$,...oK])])();var rA,h$=0,B7=null;function Vq(){if(B7===null||B7.byteLength===0)B7=new Uint8Array(rA.memory.buffer);return B7}var kq=typeof TextEncoder!=="undefined"?new TextEncoder("utf-8"):{encode:()=>{throw Error("TextEncoder not available")}},lZ=typeof kq.encodeInto==="function"?function(A,j){return kq.encodeInto(A,j)}:function(A,j){let q=kq.encode(A);return j.set(q),{read:A.length,written:q.length}};function dZ(A,j,q){if(q===void 0){let J=kq.encode(A),Z=j(J.length,1)>>>0;return Vq().subarray(Z,Z+J.length).set(J),h$=J.length,Z}let $=A.length,B=j($,1)>>>0,G=Vq(),K=0;for(;K<$;K++){let J=A.charCodeAt(K);if(J>127)break;G[B+K]=J}if(K!==$){if(K!==0)A=A.slice(K);B=q(B,$,$=K+A.length*3,1)>>>0;let J=Vq().subarray(B+K,B+$),Z=lZ(A,J);K+=Z.written,B=q(B,$,K,1)>>>0}return h$=K,B}var q4=typeof TextDecoder!=="undefined"?new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0}):{decode:()=>{throw Error("TextDecoder not available")}};if(typeof TextDecoder!=="undefined")q4.decode();function cZ(A,j){return A=A>>>0,q4.decode(Vq().subarray(A,A+j))}function $4(A,j,q){let $,B;try{let G=dZ(A,rA.__wbindgen_malloc,rA.__wbindgen_realloc),K=h$,J=rA.run_simulation(G,K,j,q);return $=J[0],B=J[1],cZ(J[0],J[1])}finally{rA.__wbindgen_free($,B,1)}}async function sZ(A,j){if(typeof Response==="function"&&A instanceof Response){if(typeof WebAssembly.instantiateStreaming==="function")try{return await WebAssembly.instantiateStreaming(A,j)}catch($){if(A.headers.get("Content-Type")!="application/wasm")console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve Wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",$);else throw $}let q=await A.arrayBuffer();return await WebAssembly.instantiate(q,j)}else{let q=await WebAssembly.instantiate(A,j);if(q instanceof WebAssembly.Instance)return{instance:q,module:A};else return q}}function iZ(){let A={};return A.wbg={},A.wbg.__wbindgen_init_externref_table=function(){let j=rA.__wbindgen_export_0,q=j.grow(4);j.set(0,void 0),j.set(q+0,void 0),j.set(q+1,null),j.set(q+2,!0),j.set(q+3,!1)},A}function nZ(A,j){}function aZ(A,j){return rA=A.exports,B4.__wbindgen_wasm_module=j,B7=null,rA.__wbindgen_start(),rA}async function B4(A){if(rA!==void 0)return rA;if(typeof A!=="undefined")if(Object.getPrototypeOf(A)===Object.prototype)({module_or_path:A}=A);else console.warn("using deprecated parameters for the initialization function; pass a single object instead");if(typeof A==="undefined")A=new URL("icache_sim_bg.wasm",import.meta.url);let j=iZ();if(typeof A==="string"||typeof Request==="function"&&A instanceof Request||typeof URL==="function"&&A instanceof URL)A=fetch(A);nZ(j);let{instance:q,module:$}=await sZ(await A,j);return aZ(q,$)}var G4=B4;var v$={};U4(v$,{default:()=>oZ});var oZ="./icache_sim_bg.wasm";((A)=>{})(v$);var Z4=new R({doc:"",parent:document.querySelector("#editor"),extensions:[j4]}),K4=new R({doc:"click 'Run' to simulate",parent:document.querySelector("#output"),extensions:[R.editable.of(!1)]});function m$(A,j){A.dispatch({changes:{from:0,to:A.state.doc.length,insert:j}})}async function J4(A){return fetch(`/icache_sim/traces/${A}`).then((j)=>j.text()).then((j)=>m$(Z4,j))}G4().then(()=>{let A=document.querySelector("#hit-cycles-input"),j=document.querySelector("#miss-cycles-input");document.querySelector("#simulate-btn").addEventListener("click",()=>{m$(K4,"running simulation ..."),setTimeout(()=>{let B=Z4.state.doc.toString(),G=$4(B,parseInt(A.value),parseInt(j.value));m$(K4,G)},0)});let $=document.querySelector("#traces-select");$.addEventListener("change",(B)=>{J4(B.target.value)}),J4($.value)});

//# debugId=6E21D6D5F9B66AFD64756E2164756E21
//# sourceMappingURL=data:application/json;base64,
