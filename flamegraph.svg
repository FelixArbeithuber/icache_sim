<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="806" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="789.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="789.00"> </text><svg id="frames" x="10" width="1180" total_samples="81117"><g><title>`0x7FF99D0A00F6 (9 samples, 0.01%)</title><rect x="0.0111%" y="693" width="0.0111%" height="15" fill="rgb(227,0,7)" fg:x="9" fg:w="9"/><text x="0.2611%" y="703.50"></text></g><g><title>`0x7FF99D0855ED (9 samples, 0.01%)</title><rect x="0.0111%" y="677" width="0.0111%" height="15" fill="rgb(217,0,24)" fg:x="9" fg:w="9"/><text x="0.2611%" y="687.50"></text></g><g><title>`0x7FF99D01423B (9 samples, 0.01%)</title><rect x="0.0111%" y="661" width="0.0111%" height="15" fill="rgb(221,193,54)" fg:x="9" fg:w="9"/><text x="0.2611%" y="671.50"></text></g><g><title>`0x7FF99D0763F5 (9 samples, 0.01%)</title><rect x="0.0111%" y="645" width="0.0111%" height="15" fill="rgb(248,212,6)" fg:x="9" fg:w="9"/><text x="0.2611%" y="655.50"></text></g><g><title>`0x7FF99D482446 (9 samples, 0.01%)</title><rect x="0.0111%" y="629" width="0.0111%" height="15" fill="rgb(208,68,35)" fg:x="9" fg:w="9"/><text x="0.2611%" y="639.50"></text></g><g><title>`0x7FF99FC6A650 (9 samples, 0.01%)</title><rect x="0.0111%" y="613" width="0.0111%" height="15" fill="rgb(232,128,0)" fg:x="9" fg:w="9"/><text x="0.2611%" y="623.50"></text></g><g><title>`0x7FF99FC5ED20 (9 samples, 0.01%)</title><rect x="0.0111%" y="597" width="0.0111%" height="15" fill="rgb(207,160,47)" fg:x="9" fg:w="9"/><text x="0.2611%" y="607.50"></text></g><g><title>cache.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;lru_sim::simulatiton::Simulation (11 samples, 0.01%)</title><rect x="0.0234%" y="517" width="0.0136%" height="15" fill="rgb(228,23,34)" fg:x="19" fg:w="11"/><text x="0.2734%" y="527.50"></text></g><g><title>cache.exe`alloc::vec::impl$25::drop(alloc::vec::Vec&lt;lru_sim::simulatiton::Simulation (11 samples, 0.01%)</title><rect x="0.0234%" y="501" width="0.0136%" height="15" fill="rgb(218,30,26)" fg:x="19" fg:w="11"/><text x="0.2734%" y="511.50"></text></g><g><title>cache.exe`core::ptr::drop_in_place(ptr_mut$&lt;slice2$&lt;lru_sim::simulatiton::Simulation (11 samples, 0.01%)</title><rect x="0.0234%" y="485" width="0.0136%" height="15" fill="rgb(220,122,19)" fg:x="19" fg:w="11"/><text x="0.2734%" y="495.50"></text></g><g><title>cache.exe`lru_sim::simulatiton::Simulation&lt;1600,1,100&gt;::compare&lt;1600,1,100&gt;(ref$&lt;slice2$&lt;lru_sim::simulatiton::Simulation (9 samples, 0.01%)</title><rect x="0.0259%" y="469" width="0.0111%" height="15" fill="rgb(250,228,42)" fg:x="21" fg:w="9"/><text x="0.2759%" y="479.50"></text></g><g><title>cache.exe`alloc::vec::Vec&lt;ref$&lt;enum2$&lt;lru_sim::trace::Op&gt; &gt;,alloc::alloc::Global&gt;::pop (20 samples, 0.02%)</title><rect x="3.0635%" y="309" width="0.0247%" height="15" fill="rgb(240,193,28)" fg:x="2485" fg:w="20"/><text x="3.3135%" y="319.50"></text></g><g><title>cache.exe`core::ptr::read(enum2$ (14 samples, 0.02%)</title><rect x="3.0709%" y="293" width="0.0173%" height="15" fill="rgb(216,20,37)" fg:x="2491" fg:w="14"/><text x="3.3209%" y="303.50"></text></g><g><title>`0x7FF99FC1BFC4 (42 samples, 0.05%)</title><rect x="3.1436%" y="149" width="0.0518%" height="15" fill="rgb(206,188,39)" fg:x="2550" fg:w="42"/><text x="3.3936%" y="159.50"></text></g><g><title>`0x7FF99FC1BE86 (54 samples, 0.07%)</title><rect x="3.1300%" y="165" width="0.0666%" height="15" fill="rgb(217,207,13)" fg:x="2539" fg:w="54"/><text x="3.3800%" y="175.50"></text></g><g><title>cache.exe`alloc::alloc::impl$1::allocate (14 samples, 0.02%)</title><rect x="3.1991%" y="165" width="0.0173%" height="15" fill="rgb(231,73,38)" fg:x="2595" fg:w="14"/><text x="3.4491%" y="175.50"></text></g><g><title>cache.exe`alloc::alloc::Global::alloc_impl (14 samples, 0.02%)</title><rect x="3.1991%" y="149" width="0.0173%" height="15" fill="rgb(225,20,46)" fg:x="2595" fg:w="14"/><text x="3.4491%" y="159.50"></text></g><g><title>cache.exe`alloc::alloc::alloc (14 samples, 0.02%)</title><rect x="3.1991%" y="133" width="0.0173%" height="15" fill="rgb(210,31,41)" fg:x="2595" fg:w="14"/><text x="3.4491%" y="143.50"></text></g><g><title>cache.exe`rand::rng::Rng::random_range&lt;rand::rngs::std::StdRng,usize,core::ops::range::RangeInclusive&lt;usize&gt; &gt;(rand::rngs::std::StdRng*, core::ops::range::RangeInclusive (20 samples, 0.02%)</title><rect x="3.2163%" y="165" width="0.0247%" height="15" fill="rgb(221,200,47)" fg:x="2609" fg:w="20"/><text x="3.4663%" y="175.50"></text></g><g><title>cache.exe`rand::distr::uniform::impl$9::sample_single(core::ops::range::RangeInclusive (15 samples, 0.02%)</title><rect x="3.2225%" y="149" width="0.0185%" height="15" fill="rgb(226,26,5)" fg:x="2614" fg:w="15"/><text x="3.4725%" y="159.50"></text></g><g><title>cache.exe`rand::distr::uniform::int::impl$1::sample_single_inclusive (15 samples, 0.02%)</title><rect x="3.2225%" y="133" width="0.0185%" height="15" fill="rgb(249,33,26)" fg:x="2614" fg:w="15"/><text x="3.4725%" y="143.50"></text></g><g><title>cache.exe`rand::distr::uniform::int::impl$23::sample_single_inclusive (13 samples, 0.02%)</title><rect x="3.2250%" y="117" width="0.0160%" height="15" fill="rgb(235,183,28)" fg:x="2616" fg:w="13"/><text x="3.4750%" y="127.50"></text></g><g><title>`0x7FF99EBA3F90 (9 samples, 0.01%)</title><rect x="3.2521%" y="133" width="0.0111%" height="15" fill="rgb(221,5,38)" fg:x="2638" fg:w="9"/><text x="3.5021%" y="143.50"></text></g><g><title>cache.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity (133 samples, 0.16%)</title><rect x="3.1079%" y="245" width="0.1640%" height="15" fill="rgb(247,18,42)" fg:x="2521" fg:w="133"/><text x="3.3579%" y="255.50"></text></g><g><title>cache.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (133 samples, 0.16%)</title><rect x="3.1079%" y="229" width="0.1640%" height="15" fill="rgb(241,131,45)" fg:x="2521" fg:w="133"/><text x="3.3579%" y="239.50"></text></g><g><title>cache.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (133 samples, 0.16%)</title><rect x="3.1079%" y="213" width="0.1640%" height="15" fill="rgb(249,31,29)" fg:x="2521" fg:w="133"/><text x="3.3579%" y="223.50"></text></g><g><title>cache.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (133 samples, 0.16%)</title><rect x="3.1079%" y="197" width="0.1640%" height="15" fill="rgb(225,111,53)" fg:x="2521" fg:w="133"/><text x="3.3579%" y="207.50"></text></g><g><title>cache.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (133 samples, 0.16%)</title><rect x="3.1079%" y="181" width="0.1640%" height="15" fill="rgb(238,160,17)" fg:x="2521" fg:w="133"/><text x="3.3579%" y="191.50"></text></g><g><title>cache.exe`std::sys::alloc::windows::process_heap_alloc (22 samples, 0.03%)</title><rect x="3.2447%" y="165" width="0.0271%" height="15" fill="rgb(214,148,48)" fg:x="2632" fg:w="22"/><text x="3.4947%" y="175.50"></text></g><g><title>cache.exe`core::intrinsics::unlikely (16 samples, 0.02%)</title><rect x="3.2521%" y="149" width="0.0197%" height="15" fill="rgb(232,36,49)" fg:x="2638" fg:w="16"/><text x="3.5021%" y="159.50"></text></g><g><title>cache.exe`core::iter::traits::iterator::Iterator::collect(core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter (138 samples, 0.17%)</title><rect x="3.1079%" y="309" width="0.1701%" height="15" fill="rgb(209,103,24)" fg:x="2521" fg:w="138"/><text x="3.3579%" y="319.50"></text></g><g><title>cache.exe`alloc::vec::impl$15::from_iter(core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter (138 samples, 0.17%)</title><rect x="3.1079%" y="293" width="0.1701%" height="15" fill="rgb(229,88,8)" fg:x="2521" fg:w="138"/><text x="3.3579%" y="303.50"></text></g><g><title>cache.exe`alloc::vec::spec_from_iter::impl$0::from_iter(core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter (138 samples, 0.17%)</title><rect x="3.1079%" y="277" width="0.1701%" height="15" fill="rgb(213,181,19)" fg:x="2521" fg:w="138"/><text x="3.3579%" y="287.50"></text></g><g><title>cache.exe`alloc::vec::spec_from_iter_nested::impl$1::from_iter(core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter (138 samples, 0.17%)</title><rect x="3.1079%" y="261" width="0.1701%" height="15" fill="rgb(254,191,54)" fg:x="2521" fg:w="138"/><text x="3.3579%" y="271.50"></text></g><g><title>`0x7FF99FD65113 (3,114 samples, 3.84%)</title><rect x="3.2952%" y="85" width="3.8389%" height="15" fill="rgb(241,83,37)" fg:x="2673" fg:w="3114"/><text x="3.5452%" y="95.50">`0x7..</text></g><g><title>`0x7FF99FD65117 (1,267 samples, 1.56%)</title><rect x="7.1341%" y="85" width="1.5619%" height="15" fill="rgb(233,36,39)" fg:x="5787" fg:w="1267"/><text x="7.3841%" y="95.50"></text></g><g><title>`0x7FF99FD65120 (34 samples, 0.04%)</title><rect x="8.7010%" y="85" width="0.0419%" height="15" fill="rgb(226,3,54)" fg:x="7058" fg:w="34"/><text x="8.9510%" y="95.50"></text></g><g><title>`0x7FF99FD65127 (109 samples, 0.13%)</title><rect x="8.7429%" y="85" width="0.1344%" height="15" fill="rgb(245,192,40)" fg:x="7092" fg:w="109"/><text x="8.9929%" y="95.50"></text></g><g><title>`0x7FF99FD6512B (92 samples, 0.11%)</title><rect x="8.8773%" y="85" width="0.1134%" height="15" fill="rgb(238,167,29)" fg:x="7201" fg:w="92"/><text x="9.1273%" y="95.50"></text></g><g><title>`0x7FF99FD6512F (130 samples, 0.16%)</title><rect x="8.9907%" y="85" width="0.1603%" height="15" fill="rgb(232,182,51)" fg:x="7293" fg:w="130"/><text x="9.2407%" y="95.50"></text></g><g><title>`0x7FF99FC2AB69 (4,789 samples, 5.90%)</title><rect x="3.2804%" y="101" width="5.9038%" height="15" fill="rgb(231,60,39)" fg:x="2661" fg:w="4789"/><text x="3.5304%" y="111.50">`0x7FF99..</text></g><g><title>`0x7FF99FD65132 (27 samples, 0.03%)</title><rect x="9.1510%" y="85" width="0.0333%" height="15" fill="rgb(208,69,12)" fg:x="7423" fg:w="27"/><text x="9.4010%" y="95.50"></text></g><g><title>cache.exe`alloc::vec::set_len_on_drop::SetLenOnDrop::new (4,810 samples, 5.93%)</title><rect x="3.2792%" y="261" width="5.9297%" height="15" fill="rgb(235,93,37)" fg:x="2660" fg:w="4810"/><text x="3.5292%" y="271.50">cache.ex..</text></g><g><title>cache.exe`alloc::raw_vec::impl$5::reserve::do_reserve_and_handle&lt;alloc::alloc::Global&gt;(alloc::raw_vec::RawVecInner (4,810 samples, 5.93%)</title><rect x="3.2792%" y="245" width="5.9297%" height="15" fill="rgb(213,116,39)" fg:x="2660" fg:w="4810"/><text x="3.5292%" y="255.50">cache.ex..</text></g><g><title>cache.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (4,810 samples, 5.93%)</title><rect x="3.2792%" y="229" width="5.9297%" height="15" fill="rgb(222,207,29)" fg:x="2660" fg:w="4810"/><text x="3.5292%" y="239.50">cache.ex..</text></g><g><title>cache.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (4,810 samples, 5.93%)</title><rect x="3.2792%" y="213" width="5.9297%" height="15" fill="rgb(206,96,30)" fg:x="2660" fg:w="4810"/><text x="3.5292%" y="223.50">cache.ex..</text></g><g><title>cache.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (4,810 samples, 5.93%)</title><rect x="3.2792%" y="197" width="5.9297%" height="15" fill="rgb(218,138,4)" fg:x="2660" fg:w="4810"/><text x="3.5292%" y="207.50">cache.ex..</text></g><g><title>cache.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (4,810 samples, 5.93%)</title><rect x="3.2792%" y="181" width="5.9297%" height="15" fill="rgb(250,191,14)" fg:x="2660" fg:w="4810"/><text x="3.5292%" y="191.50">cache.ex..</text></g><g><title>cache.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (4,810 samples, 5.93%)</title><rect x="3.2792%" y="165" width="5.9297%" height="15" fill="rgb(239,60,40)" fg:x="2660" fg:w="4810"/><text x="3.5292%" y="175.50">cache.ex..</text></g><g><title>cache.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (4,810 samples, 5.93%)</title><rect x="3.2792%" y="149" width="5.9297%" height="15" fill="rgb(206,27,48)" fg:x="2660" fg:w="4810"/><text x="3.5292%" y="159.50">cache.ex..</text></g><g><title>`0x7FF99FC29A86 (4,810 samples, 5.93%)</title><rect x="3.2792%" y="133" width="5.9297%" height="15" fill="rgb(225,35,8)" fg:x="2660" fg:w="4810"/><text x="3.5292%" y="143.50">`0x7FF99..</text></g><g><title>`0x7FF99FC29BC5 (4,810 samples, 5.93%)</title><rect x="3.2792%" y="117" width="5.9297%" height="15" fill="rgb(250,213,24)" fg:x="2660" fg:w="4810"/><text x="3.5292%" y="127.50">`0x7FF99..</text></g><g><title>`0x7FF99FC2AB7C (20 samples, 0.02%)</title><rect x="9.1843%" y="101" width="0.0247%" height="15" fill="rgb(247,123,22)" fg:x="7450" fg:w="20"/><text x="9.4343%" y="111.50"></text></g><g><title>`0x7FF99FC26F81 (20 samples, 0.02%)</title><rect x="9.1843%" y="85" width="0.0247%" height="15" fill="rgb(231,138,38)" fg:x="7450" fg:w="20"/><text x="9.4343%" y="95.50"></text></g><g><title>`0x7FF99FC1FAFD (19 samples, 0.02%)</title><rect x="9.1855%" y="69" width="0.0234%" height="15" fill="rgb(231,145,46)" fg:x="7451" fg:w="19"/><text x="9.4355%" y="79.50"></text></g><g><title>`0x7FF99FC4813F (19 samples, 0.02%)</title><rect x="9.1855%" y="53" width="0.0234%" height="15" fill="rgb(251,118,11)" fg:x="7451" fg:w="19"/><text x="9.4355%" y="63.50"></text></g><g><title>`0x7FF99FD5FBB4 (19 samples, 0.02%)</title><rect x="9.1855%" y="37" width="0.0234%" height="15" fill="rgb(217,147,25)" fg:x="7451" fg:w="19"/><text x="9.4355%" y="47.50"></text></g><g><title>cache.exe`core::iter::range::impl$6::next(core::ops::range::Range (1,163 samples, 1.43%)</title><rect x="9.2089%" y="213" width="1.4337%" height="15" fill="rgb(247,81,37)" fg:x="7470" fg:w="1163"/><text x="9.4589%" y="223.50"></text></g><g><title>cache.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (1,163 samples, 1.43%)</title><rect x="9.2089%" y="197" width="1.4337%" height="15" fill="rgb(209,12,38)" fg:x="7470" fg:w="1163"/><text x="9.4589%" y="207.50"></text></g><g><title>cache.exe`core::iter::range::impl$43::forward_unchecked (1,157 samples, 1.43%)</title><rect x="9.2163%" y="181" width="1.4263%" height="15" fill="rgb(227,1,9)" fg:x="7476" fg:w="1157"/><text x="9.4663%" y="191.50"></text></g><g><title>cache.exe`core::num::impl$11::unchecked_add (1,157 samples, 1.43%)</title><rect x="9.2163%" y="165" width="1.4263%" height="15" fill="rgb(248,47,43)" fg:x="7476" fg:w="1157"/><text x="9.4663%" y="175.50"></text></g><g><title>cache.exe`alloc::vec::spec_extend::impl$1::spec_extend(alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;*, core::iter::adapters::step_by::StepBy&lt;core::ops::range::Range (8,522 samples, 10.51%)</title><rect x="3.2780%" y="293" width="10.5058%" height="15" fill="rgb(221,10,30)" fg:x="2659" fg:w="8522"/><text x="3.5280%" y="303.50">cache.exe`alloc..</text></g><g><title>cache.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::extend_trusted(core::iter::adapters::step_by::StepBy&lt;core::ops::range::Range (8,522 samples, 10.51%)</title><rect x="3.2780%" y="277" width="10.5058%" height="15" fill="rgb(210,229,1)" fg:x="2659" fg:w="8522"/><text x="3.5280%" y="287.50">cache.exe`alloc..</text></g><g><title>cache.exe`core::iter::traits::iterator::Iterator::for_each(core::iter::adapters::step_by::StepBy&lt;core::ops::range::Range&lt;usize&gt; &gt;, alloc::vec::impl$20::extend_trusted::closure_env$0&lt;usize,alloc::alloc::Global,core::iter::adapters::step_by::StepBy&lt;core::ops::range::Range (3,711 samples, 4.57%)</title><rect x="9.2089%" y="261" width="4.5749%" height="15" fill="rgb(222,148,37)" fg:x="7470" fg:w="3711"/><text x="9.4589%" y="271.50">cache..</text></g><g><title>cache.exe`core::iter::adapters::step_by::impl$1::fold(core::iter::adapters::step_by::StepBy&lt;core::ops::range::Range&lt;usize&gt; &gt;, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;usize,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;usize,alloc::alloc::Global,core::iter::adapters::step_by::StepBy&lt;core::ops::range::Range (3,711 samples, 4.57%)</title><rect x="9.2089%" y="245" width="4.5749%" height="15" fill="rgb(234,67,33)" fg:x="7470" fg:w="3711"/><text x="9.4589%" y="255.50">cache..</text></g><g><title>cache.exe`core::iter::adapters::step_by::impl$20::spec_fold(core::iter::adapters::step_by::StepBy&lt;core::ops::range::Range&lt;usize&gt; &gt;, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;usize,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;usize,alloc::alloc::Global,core::iter::adapters::step_by::StepBy&lt;core::ops::range::Range (3,711 samples, 4.57%)</title><rect x="9.2089%" y="229" width="4.5749%" height="15" fill="rgb(247,98,35)" fg:x="7470" fg:w="3711"/><text x="9.4589%" y="239.50">cache..</text></g><g><title>cache.exe`core::iter::traits::iterator::Iterator::for_each::call::closure$0(core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;usize,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;usize,alloc::alloc::Global,core::iter::adapters::step_by::StepBy&lt;core::ops::range::Range&lt;usize&gt; &gt; &gt; &gt;*, tuple$ (2,548 samples, 3.14%)</title><rect x="10.6427%" y="213" width="3.1411%" height="15" fill="rgb(247,138,52)" fg:x="8633" fg:w="2548"/><text x="10.8927%" y="223.50">cac..</text></g><g><title>cache.exe`alloc::vec::impl$20::extend_trusted::closure$0(alloc::vec::impl$20::extend_trusted::closure_env$0&lt;usize,alloc::alloc::Global,core::iter::adapters::step_by::StepBy&lt;core::ops::range::Range (2,548 samples, 3.14%)</title><rect x="10.6427%" y="197" width="3.1411%" height="15" fill="rgb(213,79,30)" fg:x="8633" fg:w="2548"/><text x="10.8927%" y="207.50">cac..</text></g><g><title>cache.exe`core::ptr::write (2,548 samples, 3.14%)</title><rect x="10.6427%" y="181" width="3.1411%" height="15" fill="rgb(246,177,23)" fg:x="8633" fg:w="2548"/><text x="10.8927%" y="191.50">cac..</text></g><g><title>cache.exe`core::iter::traits::iterator::Iterator::step_by(core::ops::range::Range (8,528 samples, 10.51%)</title><rect x="3.2780%" y="309" width="10.5132%" height="15" fill="rgb(230,62,27)" fg:x="2659" fg:w="8528"/><text x="3.5280%" y="319.50">cache.exe`core:..</text></g><g><title>cache.exe`core::iter::traits::iterator::Iterator::sum(core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;tuple$ (12 samples, 0.01%)</title><rect x="13.7912%" y="309" width="0.0148%" height="15" fill="rgb(216,154,8)" fg:x="11187" fg:w="12"/><text x="14.0412%" y="319.50"></text></g><g><title>cache.exe`core::iter::traits::accum::impl$50::sum(core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;tuple$ (12 samples, 0.01%)</title><rect x="13.7912%" y="293" width="0.0148%" height="15" fill="rgb(244,35,45)" fg:x="11187" fg:w="12"/><text x="14.0412%" y="303.50"></text></g><g><title>cache.exe`core::iter::adapters::map::impl$2::fold(core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;,lru_sim::trace::impl$5::into_iter::closure_env$2&gt;, unsigned long long, core::iter::traits::accum::impl$50::sum::closure_env$0&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;tuple$ (12 samples, 0.01%)</title><rect x="13.7912%" y="277" width="0.0148%" height="15" fill="rgb(251,115,12)" fg:x="11187" fg:w="12"/><text x="14.0412%" y="287.50"></text></g><g><title>cache.exe`core::slice::iter::impl$182::fold(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;, unsigned long long, core::iter::adapters::map::map_fold::closure_env$0&lt;ref$&lt;tuple$&lt;usize,usize&gt; &gt;,ref$&lt;usize&gt;,usize,lru_sim::trace::impl$5::into_iter::closure_env$2,core::iter::traits::accum::impl$50::sum::closure_env$0&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;tuple$ (12 samples, 0.01%)</title><rect x="13.7912%" y="261" width="0.0148%" height="15" fill="rgb(240,54,50)" fg:x="11187" fg:w="12"/><text x="14.0412%" y="271.50"></text></g><g><title>cache.exe`core::ptr::drop_in_place(alloc::vec::into_iter::IntoIter&lt;tuple$ (31 samples, 0.04%)</title><rect x="13.8072%" y="309" width="0.0382%" height="15" fill="rgb(233,84,52)" fg:x="11200" fg:w="31"/><text x="14.0572%" y="319.50"></text></g><g><title>cache.exe`alloc::vec::into_iter::impl$15::drop(alloc::vec::into_iter::IntoIter&lt;tuple$ (31 samples, 0.04%)</title><rect x="13.8072%" y="293" width="0.0382%" height="15" fill="rgb(207,117,47)" fg:x="11200" fg:w="31"/><text x="14.0572%" y="303.50"></text></g><g><title>cache.exe`core::ptr::drop_in_place(alloc::vec::into_iter::impl$15::drop::DropGuard&lt;tuple$ (31 samples, 0.04%)</title><rect x="13.8072%" y="277" width="0.0382%" height="15" fill="rgb(249,43,39)" fg:x="11200" fg:w="31"/><text x="14.0572%" y="287.50"></text></g><g><title>cache.exe`alloc::vec::into_iter::impl$15::drop::impl$0::drop(alloc::vec::into_iter::impl$15::drop::DropGuard&lt;tuple$ (31 samples, 0.04%)</title><rect x="13.8072%" y="261" width="0.0382%" height="15" fill="rgb(209,38,44)" fg:x="11200" fg:w="31"/><text x="14.0572%" y="271.50"></text></g><g><title>cache.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (31 samples, 0.04%)</title><rect x="13.8072%" y="245" width="0.0382%" height="15" fill="rgb(236,212,23)" fg:x="11200" fg:w="31"/><text x="14.0572%" y="255.50"></text></g><g><title>cache.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (31 samples, 0.04%)</title><rect x="13.8072%" y="229" width="0.0382%" height="15" fill="rgb(242,79,21)" fg:x="11200" fg:w="31"/><text x="14.0572%" y="239.50"></text></g><g><title>cache.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (31 samples, 0.04%)</title><rect x="13.8072%" y="213" width="0.0382%" height="15" fill="rgb(211,96,35)" fg:x="11200" fg:w="31"/><text x="14.0572%" y="223.50"></text></g><g><title>cache.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (31 samples, 0.04%)</title><rect x="13.8072%" y="197" width="0.0382%" height="15" fill="rgb(253,215,40)" fg:x="11200" fg:w="31"/><text x="14.0572%" y="207.50"></text></g><g><title>cache.exe`hashbrown::map::make_hash(std::hash::random::RandomState*, ref$ (36 samples, 0.04%)</title><rect x="13.8578%" y="261" width="0.0444%" height="15" fill="rgb(211,81,21)" fg:x="11241" fg:w="36"/><text x="14.1078%" y="271.50"></text></g><g><title>cache.exe`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;ref$&lt;str$&gt; &gt; &gt;(std::hash::random::RandomState*, ref$ (36 samples, 0.04%)</title><rect x="13.8578%" y="245" width="0.0444%" height="15" fill="rgb(208,190,38)" fg:x="11241" fg:w="36"/><text x="14.1078%" y="255.50"></text></g><g><title>cache.exe`std::hash::random::impl$4::finish (30 samples, 0.04%)</title><rect x="13.8652%" y="229" width="0.0370%" height="15" fill="rgb(235,213,38)" fg:x="11247" fg:w="30"/><text x="14.1152%" y="239.50"></text></g><g><title>cache.exe`core::hash::sip::impl$4::finish (30 samples, 0.04%)</title><rect x="13.8652%" y="213" width="0.0370%" height="15" fill="rgb(237,122,38)" fg:x="11247" fg:w="30"/><text x="14.1152%" y="223.50"></text></g><g><title>cache.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (30 samples, 0.04%)</title><rect x="13.8652%" y="197" width="0.0370%" height="15" fill="rgb(244,218,35)" fg:x="11247" fg:w="30"/><text x="14.1152%" y="207.50"></text></g><g><title>cache.exe`hashbrown::map::equivalent_key::closure$0(hashbrown::map::equivalent_key::closure_env$0&lt;ref$&lt;str$&gt;,ref$&lt;str$&gt;,lru_sim::trace::Function&gt;*, tuple$&lt;ref$ (15 samples, 0.02%)</title><rect x="13.9120%" y="197" width="0.0185%" height="15" fill="rgb(240,68,47)" fg:x="11285" fg:w="15"/><text x="14.1620%" y="207.50"></text></g><g><title>cache.exe`hashbrown::impl$0::equivalent(ref$&lt;str$&gt;*, ref$ (15 samples, 0.02%)</title><rect x="13.9120%" y="181" width="0.0185%" height="15" fill="rgb(210,16,53)" fg:x="11285" fg:w="15"/><text x="14.1620%" y="191.50"></text></g><g><title>cache.exe`core::cmp::impls::impl$9::eq(ref$&lt;str$&gt;**, ref$ (15 samples, 0.02%)</title><rect x="13.9120%" y="165" width="0.0185%" height="15" fill="rgb(235,124,12)" fg:x="11285" fg:w="15"/><text x="14.1620%" y="175.50"></text></g><g><title>cache.exe`core::cmp::impls::impl$9::eq(ref$&lt;str$&gt;*, ref$ (14 samples, 0.02%)</title><rect x="13.9132%" y="149" width="0.0173%" height="15" fill="rgb(224,169,11)" fg:x="11286" fg:w="14"/><text x="14.1632%" y="159.50"></text></g><g><title>cache.exe`core::str::traits::impl$1::eq(ref$&lt;str$&gt;, ref$ (14 samples, 0.02%)</title><rect x="13.9132%" y="133" width="0.0173%" height="15" fill="rgb(250,166,2)" fg:x="11286" fg:w="14"/><text x="14.1632%" y="143.50"></text></g><g><title>cache.exe`core::cmp::impls::impl$9::eq(ref$&lt;slice2$&lt;u8&gt; &gt;*, ref$&lt;slice2$ (14 samples, 0.02%)</title><rect x="13.9132%" y="117" width="0.0173%" height="15" fill="rgb(242,216,29)" fg:x="11286" fg:w="14"/><text x="14.1632%" y="127.50"></text></g><g><title>cache.exe`core::slice::cmp::impl$0::eq(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (14 samples, 0.02%)</title><rect x="13.9132%" y="101" width="0.0173%" height="15" fill="rgb(230,116,27)" fg:x="11286" fg:w="14"/><text x="14.1632%" y="111.50"></text></g><g><title>cache.exe`core::slice::cmp::impl$5::equal(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (14 samples, 0.02%)</title><rect x="13.9132%" y="85" width="0.0173%" height="15" fill="rgb(228,99,48)" fg:x="11286" fg:w="14"/><text x="14.1632%" y="95.50"></text></g><g><title>cache.exe`core::cmp::PartialEq::ne(core::ptr::non_null::NonNull&lt;usize&gt;*, core::ptr::non_null::NonNull (8,886 samples, 10.95%)</title><rect x="2.9784%" y="357" width="10.9545%" height="15" fill="rgb(253,11,6)" fg:x="2416" fg:w="8886"/><text x="3.2284%" y="367.50">cache.exe`core::..</text></g><g><title>cache.exe`core::ptr::non_null::impl$14::eq(core::ptr::non_null::NonNull&lt;usize&gt;*, core::ptr::non_null::NonNull (8,886 samples, 10.95%)</title><rect x="2.9784%" y="341" width="10.9545%" height="15" fill="rgb(247,143,39)" fg:x="2416" fg:w="8886"/><text x="3.2284%" y="351.50">cache.exe`core::..</text></g><g><title>cache.exe`lru_sim::trace::impl$5::into_iter (8,840 samples, 10.90%)</title><rect x="3.0351%" y="325" width="10.8978%" height="15" fill="rgb(236,97,10)" fg:x="2462" fg:w="8840"/><text x="3.2851%" y="335.50">cache.exe`lru_si..</text></g><g><title>cache.exe`std::collections::hash::map::HashMap&lt;ref$&lt;str$&gt;,lru_sim::trace::Function,std::hash::random::RandomState&gt;::get(ref$ (62 samples, 0.08%)</title><rect x="13.8565%" y="309" width="0.0764%" height="15" fill="rgb(233,208,19)" fg:x="11240" fg:w="62"/><text x="14.1065%" y="319.50"></text></g><g><title>cache.exe`hashbrown::map::HashMap&lt;ref$&lt;str$&gt;,lru_sim::trace::Function,std::hash::random::RandomState,alloc::alloc::Global&gt;::get(ref$ (62 samples, 0.08%)</title><rect x="13.8565%" y="293" width="0.0764%" height="15" fill="rgb(216,164,2)" fg:x="11240" fg:w="62"/><text x="14.1065%" y="303.50"></text></g><g><title>cache.exe`hashbrown::map::HashMap&lt;ref$&lt;str$&gt;,lru_sim::trace::Function,std::hash::random::RandomState,alloc::alloc::Global&gt;::get_inner(ref$ (62 samples, 0.08%)</title><rect x="13.8565%" y="277" width="0.0764%" height="15" fill="rgb(220,129,5)" fg:x="11240" fg:w="62"/><text x="14.1065%" y="287.50"></text></g><g><title>cache.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;str$&gt;,lru_sim::trace::Function&gt;,alloc::alloc::Global&gt;::get(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;ref$&lt;str$&gt;,ref$ (25 samples, 0.03%)</title><rect x="13.9021%" y="261" width="0.0308%" height="15" fill="rgb(242,17,10)" fg:x="11277" fg:w="25"/><text x="14.1521%" y="271.50"></text></g><g><title>cache.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;str$&gt;,lru_sim::trace::Function&gt;,alloc::alloc::Global&gt;::find(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;ref$&lt;str$&gt;,ref$ (25 samples, 0.03%)</title><rect x="13.9021%" y="245" width="0.0308%" height="15" fill="rgb(242,107,0)" fg:x="11277" fg:w="25"/><text x="14.1521%" y="255.50"></text></g><g><title>cache.exe`hashbrown::raw::RawTableInner::find_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (25 samples, 0.03%)</title><rect x="13.9021%" y="229" width="0.0308%" height="15" fill="rgb(251,28,31)" fg:x="11277" fg:w="25"/><text x="14.1521%" y="239.50"></text></g><g><title>cache.exe`hashbrown::raw::impl$8::find::closure$0(hashbrown::raw::impl$8::find::closure_env$0&lt;tuple$&lt;ref$&lt;str$&gt;,lru_sim::trace::Function&gt;,alloc::alloc::Global,hashbrown::map::equivalent_key::closure_env$0&lt;ref$&lt;str$&gt;,ref$ (17 samples, 0.02%)</title><rect x="13.9120%" y="213" width="0.0210%" height="15" fill="rgb(233,223,10)" fg:x="11285" fg:w="17"/><text x="14.1620%" y="223.50"></text></g><g><title>cache.exe`core::ptr::non_null::NonNull&lt;usize&gt;::read(core::ptr::non_null::NonNull (98 samples, 0.12%)</title><rect x="13.9354%" y="357" width="0.1208%" height="15" fill="rgb(215,21,27)" fg:x="11304" fg:w="98"/><text x="14.1854%" y="367.50"></text></g><g><title>cache.exe`core::ptr::read (98 samples, 0.12%)</title><rect x="13.9354%" y="341" width="0.1208%" height="15" fill="rgb(232,23,21)" fg:x="11304" fg:w="98"/><text x="14.1854%" y="351.50"></text></g><g><title>`0x7FF99FD65104 (19 samples, 0.02%)</title><rect x="17.7287%" y="85" width="0.0234%" height="15" fill="rgb(244,5,23)" fg:x="14381" fg:w="19"/><text x="17.9787%" y="95.50"></text></g><g><title>`0x7FF99FD65109 (16 samples, 0.02%)</title><rect x="17.7521%" y="85" width="0.0197%" height="15" fill="rgb(226,81,46)" fg:x="14400" fg:w="16"/><text x="18.0021%" y="95.50"></text></g><g><title>`0x7FF99FD65113 (9,854 samples, 12.15%)</title><rect x="17.7756%" y="85" width="12.1479%" height="15" fill="rgb(247,70,30)" fg:x="14419" fg:w="9854"/><text x="18.0256%" y="95.50">`0x7FF99FD65113</text></g><g><title>`0x7FF99FD65117 (3,709 samples, 4.57%)</title><rect x="29.9234%" y="85" width="4.5724%" height="15" fill="rgb(212,68,19)" fg:x="24273" fg:w="3709"/><text x="30.1734%" y="95.50">`0x7F..</text></g><g><title>`0x7FF99FD6511B (17 samples, 0.02%)</title><rect x="34.4959%" y="85" width="0.0210%" height="15" fill="rgb(240,187,13)" fg:x="27982" fg:w="17"/><text x="34.7459%" y="95.50"></text></g><g><title>`0x7FF99FD65120 (120 samples, 0.15%)</title><rect x="34.5168%" y="85" width="0.1479%" height="15" fill="rgb(223,113,26)" fg:x="27999" fg:w="120"/><text x="34.7668%" y="95.50"></text></g><g><title>`0x7FF99FD65127 (341 samples, 0.42%)</title><rect x="34.6672%" y="85" width="0.4204%" height="15" fill="rgb(206,192,2)" fg:x="28121" fg:w="341"/><text x="34.9172%" y="95.50"></text></g><g><title>`0x7FF99FD6512B (366 samples, 0.45%)</title><rect x="35.0876%" y="85" width="0.4512%" height="15" fill="rgb(241,108,4)" fg:x="28462" fg:w="366"/><text x="35.3376%" y="95.50"></text></g><g><title>`0x7FF99FD6512F (333 samples, 0.41%)</title><rect x="35.5388%" y="85" width="0.4105%" height="15" fill="rgb(247,173,49)" fg:x="28828" fg:w="333"/><text x="35.7888%" y="95.50"></text></g><g><title>`0x7FF99FC2AB69 (14,847 samples, 18.30%)</title><rect x="17.7250%" y="101" width="18.3032%" height="15" fill="rgb(224,114,35)" fg:x="14378" fg:w="14847"/><text x="17.9750%" y="111.50">`0x7FF99FC2AB69</text></g><g><title>`0x7FF99FD65132 (64 samples, 0.08%)</title><rect x="35.9493%" y="85" width="0.0789%" height="15" fill="rgb(245,159,27)" fg:x="29161" fg:w="64"/><text x="36.1993%" y="95.50"></text></g><g><title>`0x7FF99FC29A86 (14,875 samples, 18.34%)</title><rect x="17.7213%" y="133" width="18.3377%" height="15" fill="rgb(245,172,44)" fg:x="14375" fg:w="14875"/><text x="17.9713%" y="143.50">`0x7FF99FC29A86</text></g><g><title>`0x7FF99FC29BC5 (14,875 samples, 18.34%)</title><rect x="17.7213%" y="117" width="18.3377%" height="15" fill="rgb(236,23,11)" fg:x="14375" fg:w="14875"/><text x="17.9713%" y="127.50">`0x7FF99FC29BC5</text></g><g><title>`0x7FF99FC2AB7C (25 samples, 0.03%)</title><rect x="36.0282%" y="101" width="0.0308%" height="15" fill="rgb(205,117,38)" fg:x="29225" fg:w="25"/><text x="36.2782%" y="111.50"></text></g><g><title>`0x7FF99FC26F81 (25 samples, 0.03%)</title><rect x="36.0282%" y="85" width="0.0308%" height="15" fill="rgb(237,72,25)" fg:x="29225" fg:w="25"/><text x="36.2782%" y="95.50"></text></g><g><title>`0x7FF99FC1FAFD (24 samples, 0.03%)</title><rect x="36.0294%" y="69" width="0.0296%" height="15" fill="rgb(244,70,9)" fg:x="29226" fg:w="24"/><text x="36.2794%" y="79.50"></text></g><g><title>`0x7FF99FC4813F (24 samples, 0.03%)</title><rect x="36.0294%" y="53" width="0.0296%" height="15" fill="rgb(217,125,39)" fg:x="29226" fg:w="24"/><text x="36.2794%" y="63.50"></text></g><g><title>`0x7FF99FD5FBB4 (24 samples, 0.03%)</title><rect x="36.0294%" y="37" width="0.0296%" height="15" fill="rgb(235,36,10)" fg:x="29226" fg:w="24"/><text x="36.2794%" y="47.50"></text></g><g><title>cache.exe`alloc::vec::Vec&lt;tuple$&lt;usize,enum2$&lt;lru_sim::simulatiton::CacheHit&gt; &gt;,alloc::alloc::Global&gt;::as_mut_ptr (14,877 samples, 18.34%)</title><rect x="17.7201%" y="325" width="18.3402%" height="15" fill="rgb(251,123,47)" fg:x="14374" fg:w="14877"/><text x="17.9701%" y="335.50">cache.exe`alloc::vec::Vec&lt;tup..</text></g><g><title>cache.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,enum2$&lt;lru_sim::simulatiton::CacheHit&gt; &gt;,alloc::alloc::Global&gt;::ptr (14,877 samples, 18.34%)</title><rect x="17.7201%" y="309" width="18.3402%" height="15" fill="rgb(221,13,13)" fg:x="14374" fg:w="14877"/><text x="17.9701%" y="319.50">cache.exe`alloc::raw_vec::Raw..</text></g><g><title>cache.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (14,877 samples, 18.34%)</title><rect x="17.7201%" y="293" width="18.3402%" height="15" fill="rgb(238,131,9)" fg:x="14374" fg:w="14877"/><text x="17.9701%" y="303.50">cache.exe`alloc::raw_vec::Raw..</text></g><g><title>cache.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (14,877 samples, 18.34%)</title><rect x="17.7201%" y="277" width="18.3402%" height="15" fill="rgb(211,50,8)" fg:x="14374" fg:w="14877"/><text x="17.9701%" y="287.50">cache.exe`alloc::raw_vec::Raw..</text></g><g><title>cache.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,enum2$&lt;lru_sim::simulatiton::CacheHit&gt; &gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,enum2$&lt;lru_sim::simulatiton::CacheHit&gt; &gt;,alloc::alloc::Global&gt; (14,877 samples, 18.34%)</title><rect x="17.7201%" y="261" width="18.3402%" height="15" fill="rgb(245,182,24)" fg:x="14374" fg:w="14877"/><text x="17.9701%" y="271.50">cache.exe`alloc::raw_vec::Raw..</text></g><g><title>cache.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (14,877 samples, 18.34%)</title><rect x="17.7201%" y="245" width="18.3402%" height="15" fill="rgb(242,14,37)" fg:x="14374" fg:w="14877"/><text x="17.9701%" y="255.50">cache.exe`alloc::raw_vec::Raw..</text></g><g><title>cache.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (14,877 samples, 18.34%)</title><rect x="17.7201%" y="229" width="18.3402%" height="15" fill="rgb(246,228,12)" fg:x="14374" fg:w="14877"/><text x="17.9701%" y="239.50">cache.exe`alloc::raw_vec::Raw..</text></g><g><title>cache.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (14,877 samples, 18.34%)</title><rect x="17.7201%" y="213" width="18.3402%" height="15" fill="rgb(213,55,15)" fg:x="14374" fg:w="14877"/><text x="17.9701%" y="223.50">cache.exe`core::result::impl$..</text></g><g><title>cache.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (14,877 samples, 18.34%)</title><rect x="17.7201%" y="197" width="18.3402%" height="15" fill="rgb(209,9,3)" fg:x="14374" fg:w="14877"/><text x="17.9701%" y="207.50">cache.exe`alloc::raw_vec::fin..</text></g><g><title>cache.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (14,877 samples, 18.34%)</title><rect x="17.7201%" y="181" width="18.3402%" height="15" fill="rgb(230,59,30)" fg:x="14374" fg:w="14877"/><text x="17.9701%" y="191.50">cache.exe`alloc::alloc::impl$..</text></g><g><title>cache.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (14,877 samples, 18.34%)</title><rect x="17.7201%" y="165" width="18.3402%" height="15" fill="rgb(209,121,21)" fg:x="14374" fg:w="14877"/><text x="17.9701%" y="175.50">cache.exe`alloc::alloc::Globa..</text></g><g><title>cache.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (14,877 samples, 18.34%)</title><rect x="17.7201%" y="149" width="18.3402%" height="15" fill="rgb(220,109,13)" fg:x="14374" fg:w="14877"/><text x="17.9701%" y="159.50">cache.exe`core::result::impl$..</text></g><g><title>cache.exe`core::ptr::write(tuple$&lt;usize,enum2$&lt;lru_sim::simulatiton::CacheHit&gt; &gt;*, tuple$&lt;usize,enum2$ (5,487 samples, 6.76%)</title><rect x="36.0603%" y="325" width="6.7643%" height="15" fill="rgb(232,18,1)" fg:x="29251" fg:w="5487"/><text x="36.3103%" y="335.50">cache.exe..</text></g><g><title>cache.exe`alloc::collections::vec_deque::VecDeque&lt;usize,alloc::alloc::Global&gt;::buffer_range(core::ops::range::Range (1,293 samples, 1.59%)</title><rect x="49.4323%" y="261" width="1.5940%" height="15" fill="rgb(215,41,42)" fg:x="40098" fg:w="1293"/><text x="49.6823%" y="271.50"></text></g><g><title>cache.exe`alloc::collections::vec_deque::VecDeque&lt;usize,alloc::alloc::Global&gt;::ptr (1,293 samples, 1.59%)</title><rect x="49.4323%" y="245" width="1.5940%" height="15" fill="rgb(224,123,36)" fg:x="40098" fg:w="1293"/><text x="49.6823%" y="255.50"></text></g><g><title>cache.exe`alloc::raw_vec::RawVec&lt;usize,alloc::alloc::Global&gt;::ptr (1,179 samples, 1.45%)</title><rect x="49.5728%" y="229" width="1.4535%" height="15" fill="rgb(240,125,3)" fg:x="40212" fg:w="1179"/><text x="49.8228%" y="239.50"></text></g><g><title>cache.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (1,179 samples, 1.45%)</title><rect x="49.5728%" y="213" width="1.4535%" height="15" fill="rgb(205,98,50)" fg:x="40212" fg:w="1179"/><text x="49.8228%" y="223.50"></text></g><g><title>cache.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (1,179 samples, 1.45%)</title><rect x="49.5728%" y="197" width="1.4535%" height="15" fill="rgb(205,185,37)" fg:x="40212" fg:w="1179"/><text x="49.8228%" y="207.50"></text></g><g><title>cache.exe`alloc::collections::vec_deque::VecDeque&lt;usize,alloc::alloc::Global&gt;::iter (5,502 samples, 6.78%)</title><rect x="49.1056%" y="293" width="6.7828%" height="15" fill="rgb(238,207,15)" fg:x="39833" fg:w="5502"/><text x="49.3556%" y="303.50">cache.exe..</text></g><g><title>cache.exe`alloc::collections::vec_deque::VecDeque&lt;usize,alloc::alloc::Global&gt;::as_slices (5,502 samples, 6.78%)</title><rect x="49.1056%" y="277" width="6.7828%" height="15" fill="rgb(213,199,42)" fg:x="39833" fg:w="5502"/><text x="49.3556%" y="287.50">cache.exe..</text></g><g><title>cache.exe`alloc::collections::vec_deque::VecDeque&lt;usize,alloc::alloc::Global&gt;::slice_ranges (3,944 samples, 4.86%)</title><rect x="51.0263%" y="261" width="4.8621%" height="15" fill="rgb(235,201,11)" fg:x="41391" fg:w="3944"/><text x="51.2763%" y="271.50">cache...</text></g><g><title>cache.exe`alloc::collections::vec_deque::VecDeque&lt;usize,alloc::alloc::Global&gt;::to_physical_idx (489 samples, 0.60%)</title><rect x="55.2856%" y="245" width="0.6028%" height="15" fill="rgb(207,46,11)" fg:x="44846" fg:w="489"/><text x="55.5356%" y="255.50"></text></g><g><title>cache.exe`alloc::collections::vec_deque::VecDeque&lt;usize,alloc::alloc::Global&gt;::wrap_add (489 samples, 0.60%)</title><rect x="55.2856%" y="229" width="0.6028%" height="15" fill="rgb(241,35,35)" fg:x="44846" fg:w="489"/><text x="55.5356%" y="239.50"></text></g><g><title>cache.exe`alloc::collections::vec_deque::wrap_index (489 samples, 0.60%)</title><rect x="55.2856%" y="213" width="0.6028%" height="15" fill="rgb(243,32,47)" fg:x="44846" fg:w="489"/><text x="55.5356%" y="223.50"></text></g><g><title>cache.exe`alloc::collections::vec_deque::VecDeque&lt;usize,alloc::alloc::Global&gt;::pop_front (40 samples, 0.05%)</title><rect x="55.8884%" y="293" width="0.0493%" height="15" fill="rgb(247,202,23)" fg:x="45335" fg:w="40"/><text x="56.1384%" y="303.50"></text></g><g><title>cache.exe`alloc::collections::vec_deque::VecDeque&lt;usize,alloc::alloc::Global&gt;::to_physical_idx (12 samples, 0.01%)</title><rect x="55.9229%" y="277" width="0.0148%" height="15" fill="rgb(219,102,11)" fg:x="45363" fg:w="12"/><text x="56.1729%" y="287.50"></text></g><g><title>cache.exe`alloc::collections::vec_deque::VecDeque&lt;usize,alloc::alloc::Global&gt;::wrap_add (12 samples, 0.01%)</title><rect x="55.9229%" y="261" width="0.0148%" height="15" fill="rgb(243,110,44)" fg:x="45363" fg:w="12"/><text x="56.1729%" y="271.50"></text></g><g><title>cache.exe`core::num::impl$11::wrapping_add (12 samples, 0.01%)</title><rect x="55.9229%" y="245" width="0.0148%" height="15" fill="rgb(222,74,54)" fg:x="45363" fg:w="12"/><text x="56.1729%" y="255.50"></text></g><g><title>cache.exe`alloc::collections::vec_deque::VecDeque&lt;usize,alloc::alloc::Global&gt;::buffer_read (420 samples, 0.52%)</title><rect x="73.4002%" y="197" width="0.5178%" height="15" fill="rgb(216,99,12)" fg:x="59540" fg:w="420"/><text x="73.6502%" y="207.50"></text></g><g><title>cache.exe`alloc::collections::vec_deque::VecDeque&lt;usize,alloc::alloc::Global&gt;::ptr (420 samples, 0.52%)</title><rect x="73.4002%" y="181" width="0.5178%" height="15" fill="rgb(226,22,26)" fg:x="59540" fg:w="420"/><text x="73.6502%" y="191.50"></text></g><g><title>cache.exe`alloc::raw_vec::RawVec&lt;usize,alloc::alloc::Global&gt;::ptr (70 samples, 0.09%)</title><rect x="73.8316%" y="165" width="0.0863%" height="15" fill="rgb(217,163,10)" fg:x="59890" fg:w="70"/><text x="74.0816%" y="175.50"></text></g><g><title>cache.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (70 samples, 0.09%)</title><rect x="73.8316%" y="149" width="0.0863%" height="15" fill="rgb(213,25,53)" fg:x="59890" fg:w="70"/><text x="74.0816%" y="159.50"></text></g><g><title>cache.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (70 samples, 0.09%)</title><rect x="73.8316%" y="133" width="0.0863%" height="15" fill="rgb(252,105,26)" fg:x="59890" fg:w="70"/><text x="74.0816%" y="143.50"></text></g><g><title>cache.exe`alloc::collections::vec_deque::VecDeque&lt;usize,alloc::alloc::Global&gt;::to_physical_idx (613 samples, 0.76%)</title><rect x="73.9179%" y="197" width="0.7557%" height="15" fill="rgb(220,39,43)" fg:x="59960" fg:w="613"/><text x="74.1679%" y="207.50"></text></g><g><title>cache.exe`alloc::collections::vec_deque::VecDeque&lt;usize,alloc::alloc::Global&gt;::wrap_add (613 samples, 0.76%)</title><rect x="73.9179%" y="181" width="0.7557%" height="15" fill="rgb(229,68,48)" fg:x="59960" fg:w="613"/><text x="74.1679%" y="191.50"></text></g><g><title>cache.exe`core::num::impl$11::wrapping_add (613 samples, 0.76%)</title><rect x="73.9179%" y="165" width="0.7557%" height="15" fill="rgb(252,8,32)" fg:x="59960" fg:w="613"/><text x="74.1679%" y="175.50"></text></g><g><title>cache.exe`alloc::raw_vec::RawVec&lt;usize,alloc::alloc::Global&gt;::capacity (342 samples, 0.42%)</title><rect x="74.2520%" y="149" width="0.4216%" height="15" fill="rgb(223,20,43)" fg:x="60231" fg:w="342"/><text x="74.5020%" y="159.50"></text></g><g><title>cache.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::capacity (342 samples, 0.42%)</title><rect x="74.2520%" y="133" width="0.4216%" height="15" fill="rgb(229,81,49)" fg:x="60231" fg:w="342"/><text x="74.5020%" y="143.50"></text></g><g><title>cache.exe`alloc::collections::vec_deque::VecDeque&lt;usize,alloc::alloc::Global&gt;::wrap_add (386 samples, 0.48%)</title><rect x="74.6736%" y="197" width="0.4759%" height="15" fill="rgb(236,28,36)" fg:x="60573" fg:w="386"/><text x="74.9236%" y="207.50"></text></g><g><title>cache.exe`core::num::impl$11::wrapping_add (386 samples, 0.48%)</title><rect x="74.6736%" y="181" width="0.4759%" height="15" fill="rgb(249,185,26)" fg:x="60573" fg:w="386"/><text x="74.9236%" y="191.50"></text></g><g><title>`0x7FF9868813F0 (19 samples, 0.02%)</title><rect x="76.0445%" y="149" width="0.0234%" height="15" fill="rgb(249,174,33)" fg:x="61685" fg:w="19"/><text x="76.2945%" y="159.50"></text></g><g><title>`0x7FF9868813FA (12 samples, 0.01%)</title><rect x="76.0716%" y="149" width="0.0148%" height="15" fill="rgb(233,201,37)" fg:x="61707" fg:w="12"/><text x="76.3216%" y="159.50"></text></g><g><title>`0x7FF986881418 (52 samples, 0.06%)</title><rect x="76.0926%" y="149" width="0.0641%" height="15" fill="rgb(221,78,26)" fg:x="61724" fg:w="52"/><text x="76.3426%" y="159.50"></text></g><g><title>`0x7FF9868814FD (24 samples, 0.03%)</title><rect x="76.1567%" y="149" width="0.0296%" height="15" fill="rgb(250,127,30)" fg:x="61776" fg:w="24"/><text x="76.4067%" y="159.50"></text></g><g><title>cache.exe`core::intrinsics::copy (184 samples, 0.23%)</title><rect x="75.9779%" y="165" width="0.2268%" height="15" fill="rgb(230,49,44)" fg:x="61631" fg:w="184"/><text x="76.2279%" y="175.50"></text></g><g><title>cache.exe`alloc::collections::vec_deque::VecDeque&lt;usize,alloc::alloc::Global&gt;::copy (209 samples, 0.26%)</title><rect x="75.9779%" y="181" width="0.2577%" height="15" fill="rgb(229,67,23)" fg:x="61631" fg:w="209"/><text x="76.2279%" y="191.50"></text></g><g><title>cache.exe`core::ptr::mut_ptr::impl$0::add (25 samples, 0.03%)</title><rect x="76.2047%" y="165" width="0.0308%" height="15" fill="rgb(249,83,47)" fg:x="61815" fg:w="25"/><text x="76.4547%" y="175.50"></text></g><g><title>cache.exe`alloc::collections::vec_deque::VecDeque&lt;usize,alloc::alloc::Global&gt;::is_full (11,321 samples, 13.96%)</title><rect x="62.3248%" y="277" width="13.9564%" height="15" fill="rgb(215,43,3)" fg:x="50556" fg:w="11321"/><text x="62.5748%" y="287.50">cache.exe`alloc::coll..</text></g><g><title>cache.exe`alloc::collections::vec_deque::VecDeque&lt;usize,alloc::alloc::Global&gt;::capacity (10,544 samples, 13.00%)</title><rect x="63.2827%" y="261" width="12.9985%" height="15" fill="rgb(238,154,13)" fg:x="51333" fg:w="10544"/><text x="63.5327%" y="271.50">cache.exe`alloc::col..</text></g><g><title>cache.exe`alloc::raw_vec::RawVec&lt;usize,alloc::alloc::Global&gt;::capacity (10,544 samples, 13.00%)</title><rect x="63.2827%" y="245" width="12.9985%" height="15" fill="rgb(219,56,2)" fg:x="51333" fg:w="10544"/><text x="63.5327%" y="255.50">cache.exe`alloc::raw..</text></g><g><title>cache.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::capacity (10,544 samples, 13.00%)</title><rect x="63.2827%" y="229" width="12.9985%" height="15" fill="rgb(233,0,4)" fg:x="51333" fg:w="10544"/><text x="63.5327%" y="239.50">cache.exe`alloc::raw..</text></g><g><title>cache.exe`alloc::collections::vec_deque::VecDeque&lt;usize,alloc::alloc::Global&gt;::remove&lt;usize,alloc::alloc::Global&gt; (10,245 samples, 12.63%)</title><rect x="63.6513%" y="213" width="12.6299%" height="15" fill="rgb(235,30,7)" fg:x="51632" fg:w="10245"/><text x="63.9013%" y="223.50">cache.exe`alloc::co..</text></g><g><title>cache.exe`alloc::collections::vec_deque::VecDeque&lt;usize,alloc::alloc::Global&gt;::wrap_copy (918 samples, 1.13%)</title><rect x="75.1495%" y="197" width="1.1317%" height="15" fill="rgb(250,79,13)" fg:x="60959" fg:w="918"/><text x="75.3995%" y="207.50"></text></g><g><title>cache.exe`alloc::collections::vec_deque::VecDeque&lt;usize,alloc::alloc::Global&gt;::wrap_sub (37 samples, 0.05%)</title><rect x="76.2356%" y="181" width="0.0456%" height="15" fill="rgb(211,146,34)" fg:x="61840" fg:w="37"/><text x="76.4856%" y="191.50"></text></g><g><title>cache.exe`core::num::impl$11::wrapping_add (37 samples, 0.05%)</title><rect x="76.2356%" y="165" width="0.0456%" height="15" fill="rgb(228,22,38)" fg:x="61840" fg:w="37"/><text x="76.4856%" y="175.50"></text></g><g><title>cache.exe`alloc::collections::vec_deque::VecDeque&lt;usize,alloc::alloc::Global&gt;::ptr (414 samples, 0.51%)</title><rect x="76.2812%" y="261" width="0.5104%" height="15" fill="rgb(235,168,5)" fg:x="61877" fg:w="414"/><text x="76.5312%" y="271.50"></text></g><g><title>cache.exe`alloc::raw_vec::RawVec&lt;usize,alloc::alloc::Global&gt;::ptr (262 samples, 0.32%)</title><rect x="76.4686%" y="245" width="0.3230%" height="15" fill="rgb(221,155,16)" fg:x="62029" fg:w="262"/><text x="76.7186%" y="255.50"></text></g><g><title>cache.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (262 samples, 0.32%)</title><rect x="76.4686%" y="229" width="0.3230%" height="15" fill="rgb(215,215,53)" fg:x="62029" fg:w="262"/><text x="76.7186%" y="239.50"></text></g><g><title>cache.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (262 samples, 0.32%)</title><rect x="76.4686%" y="213" width="0.3230%" height="15" fill="rgb(223,4,10)" fg:x="62029" fg:w="262"/><text x="76.7186%" y="223.50"></text></g><g><title>cache.exe`alloc::collections::vec_deque::VecDeque&lt;usize,alloc::alloc::Global&gt;::capacity (1,127 samples, 1.39%)</title><rect x="76.7915%" y="245" width="1.3894%" height="15" fill="rgb(234,103,6)" fg:x="62291" fg:w="1127"/><text x="77.0415%" y="255.50"></text></g><g><title>cache.exe`alloc::collections::vec_deque::VecDeque&lt;usize,alloc::alloc::Global&gt;::wrap_add (1,146 samples, 1.41%)</title><rect x="76.7915%" y="261" width="1.4128%" height="15" fill="rgb(227,97,0)" fg:x="62291" fg:w="1146"/><text x="77.0415%" y="271.50"></text></g><g><title>cache.exe`core::num::impl$11::wrapping_add (19 samples, 0.02%)</title><rect x="78.1809%" y="245" width="0.0234%" height="15" fill="rgb(234,150,53)" fg:x="63418" fg:w="19"/><text x="78.4309%" y="255.50"></text></g><g><title>cache.exe`alloc::collections::vec_deque::VecDeque&lt;usize,alloc::alloc::Global&gt;::push_back (18,066 samples, 22.27%)</title><rect x="55.9377%" y="293" width="22.2715%" height="15" fill="rgb(228,201,54)" fg:x="45375" fg:w="18066"/><text x="56.1877%" y="303.50">cache.exe`alloc::collections::vec_d..</text></g><g><title>cache.exe`alloc::collections::vec_deque::VecDeque&lt;usize,alloc::alloc::Global&gt;::to_physical_idx (1,564 samples, 1.93%)</title><rect x="76.2812%" y="277" width="1.9281%" height="15" fill="rgb(222,22,37)" fg:x="61877" fg:w="1564"/><text x="76.5312%" y="287.50">c..</text></g><g><title>cache.exe`core::ops::function::impls::impl$3::call_mut(core::iter::adapters::enumerate::impl$1::try_fold::enumerate::closure_env$0&lt;ref$&lt;usize&gt;,tuple$&lt;&gt;,enum2$&lt;core::ops::control_flow::ControlFlow&lt;tuple$&lt;usize,ref$&lt;usize&gt; &gt;,tuple$&lt;&gt; &gt; &gt;,core::iter::traits::iterator::Iterator::find::check::closure_env$0&lt;tuple$&lt;usize,ref$&lt;usize&gt; &gt;,lru_sim::lru::impl$2::get::closure_env$1&lt;4&gt; &gt; &gt;**, tuple$ (4,272 samples, 5.27%)</title><rect x="80.3358%" y="229" width="5.2665%" height="15" fill="rgb(237,53,32)" fg:x="65166" fg:w="4272"/><text x="80.5858%" y="239.50">cache...</text></g><g><title>cache.exe`core::iter::adapters::enumerate::impl$1::try_fold::enumerate::closure$0(core::iter::adapters::enumerate::impl$1::try_fold::enumerate::closure_env$0&lt;ref$&lt;usize&gt;,tuple$&lt;&gt;,enum2$&lt;core::ops::control_flow::ControlFlow&lt;tuple$&lt;usize,ref$&lt;usize&gt; &gt;,tuple$&lt;&gt; &gt; &gt;,core::iter::traits::iterator::Iterator::find::check::closure_env$0&lt;tuple$&lt;usize,ref$&lt;usize&gt; &gt;,lru_sim::lru::impl$2::get::closure_env$1&lt;4&gt; &gt; &gt;*, tuple$ (4,272 samples, 5.27%)</title><rect x="80.3358%" y="213" width="5.2665%" height="15" fill="rgb(233,25,53)" fg:x="65166" fg:w="4272"/><text x="80.5858%" y="223.50">cache...</text></g><g><title>cache.exe`core::iter::traits::iterator::Iterator::find::check::closure$0(core::iter::traits::iterator::Iterator::find::check::closure_env$0&lt;tuple$&lt;usize,ref$&lt;usize&gt; &gt;,lru_sim::lru::impl$2::get::closure_env$1&lt;4&gt; &gt;*, tuple$&lt;&gt;, tuple$&lt;usize,ref$ (4,272 samples, 5.27%)</title><rect x="80.3358%" y="197" width="5.2665%" height="15" fill="rgb(210,40,34)" fg:x="65166" fg:w="4272"/><text x="80.5858%" y="207.50">cache...</text></g><g><title>cache.exe`lru_sim::lru::impl$2::get::closure$1(lru_sim::lru::impl$2::get::closure_env$1&lt;4&gt;*, tuple$&lt;usize,ref$ (4,272 samples, 5.27%)</title><rect x="80.3358%" y="181" width="5.2665%" height="15" fill="rgb(241,220,44)" fg:x="65166" fg:w="4272"/><text x="80.5858%" y="191.50">cache...</text></g><g><title>cache.exe`core::iter::traits::iterator::Iterator::find(core::iter::adapters::enumerate::Enumerate&lt;alloc::collections::vec_deque::iter::Iter&lt;usize&gt; &gt;*, lru_sim::lru::impl$2::get::closure_env$1 (8,320 samples, 10.26%)</title><rect x="78.2093%" y="293" width="10.2568%" height="15" fill="rgb(235,28,35)" fg:x="63441" fg:w="8320"/><text x="78.4593%" y="303.50">cache.exe`core:..</text></g><g><title>cache.exe`core::iter::adapters::enumerate::impl$1::try_fold(core::iter::adapters::enumerate::Enumerate&lt;alloc::collections::vec_deque::iter::Iter&lt;usize&gt; &gt;*, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::find::check::closure_env$0&lt;tuple$&lt;usize,ref$&lt;usize&gt; &gt;,lru_sim::lru::impl$2::get::closure_env$1 (8,320 samples, 10.26%)</title><rect x="78.2093%" y="277" width="10.2568%" height="15" fill="rgb(210,56,17)" fg:x="63441" fg:w="8320"/><text x="78.4593%" y="287.50">cache.exe`core:..</text></g><g><title>cache.exe`alloc::collections::vec_deque::iter::impl$4::try_fold(alloc::collections::vec_deque::iter::Iter&lt;usize&gt;*, tuple$&lt;&gt;, core::iter::adapters::enumerate::impl$1::try_fold::enumerate::closure_env$0&lt;ref$&lt;usize&gt;,tuple$&lt;&gt;,enum2$&lt;core::ops::control_flow::ControlFlow&lt;tuple$&lt;usize,ref$&lt;usize&gt; &gt;,tuple$&lt;&gt; &gt; &gt;,core::iter::traits::iterator::Iterator::find::check::closure_env$0&lt;tuple$&lt;usize,ref$&lt;usize&gt; &gt;,lru_sim::lru::impl$2::get::closure_env$1 (8,320 samples, 10.26%)</title><rect x="78.2093%" y="261" width="10.2568%" height="15" fill="rgb(224,130,29)" fg:x="63441" fg:w="8320"/><text x="78.4593%" y="271.50">cache.exe`alloc..</text></g><g><title>cache.exe`core::iter::traits::iterator::Iterator::try_fold(core::slice::iter::Iter&lt;usize&gt;*, tuple$&lt;&gt;, core::iter::adapters::enumerate::impl$1::try_fold::enumerate::closure_env$0&lt;ref$&lt;usize&gt;,tuple$&lt;&gt;,enum2$&lt;core::ops::control_flow::ControlFlow&lt;tuple$&lt;usize,ref$&lt;usize&gt; &gt;,tuple$&lt;&gt; &gt; &gt;,core::iter::traits::iterator::Iterator::find::check::closure_env$0&lt;tuple$&lt;usize,ref$&lt;usize&gt; &gt;,lru_sim::lru::impl$2::get::closure_env$1 (8,320 samples, 10.26%)</title><rect x="78.2093%" y="245" width="10.2568%" height="15" fill="rgb(235,212,8)" fg:x="63441" fg:w="8320"/><text x="78.4593%" y="255.50">cache.exe`core:..</text></g><g><title>cache.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter (2,323 samples, 2.86%)</title><rect x="85.6023%" y="229" width="2.8638%" height="15" fill="rgb(223,33,50)" fg:x="69438" fg:w="2323"/><text x="85.8523%" y="239.50">ca..</text></g><g><title>cache.exe`core::ptr::non_null::impl$14::eq(core::ptr::non_null::NonNull&lt;usize&gt;*, core::ptr::non_null::NonNull (1,783 samples, 2.20%)</title><rect x="86.2680%" y="213" width="2.1981%" height="15" fill="rgb(219,149,13)" fg:x="69978" fg:w="1783"/><text x="86.5180%" y="223.50">c..</text></g><g><title>cache.exe`lru_sim::simulatiton::Simulation&lt;1600,1,100&gt;::simulate(lru_sim::lru::LruCache&lt;128,4,64&gt;*, ref$ (81,061 samples, 99.93%)</title><rect x="0.0407%" y="501" width="99.9310%" height="15" fill="rgb(250,156,29)" fg:x="33" fg:w="81061"/><text x="0.2907%" y="511.50">cache.exe`lru_sim::simulatiton::Simulation&lt;1600,1,100&gt;::simulate(lru_sim::lru::LruCache&lt;128,4,64&gt;*, ref$</text></g><g><title>cache.exe`alloc::vec::in_place_collect::from_iter_in_place&lt;core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;lru_sim::trace::Trace,alloc::alloc::Global&gt;,lru_sim::simulatiton::impl$0::simulate::closure_env$0&lt;1600,1,100,128,4,64&gt; &gt;,lru_sim::simulatiton::Simulation&lt;1600,1,100&gt; &gt;(core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;lru_sim::trace::Trace,alloc::alloc::Global&gt;,lru_sim::simulatiton::impl$0::simulate::closure_env$0 (81,061 samples, 99.93%)</title><rect x="0.0407%" y="485" width="99.9310%" height="15" fill="rgb(216,193,19)" fg:x="33" fg:w="81061"/><text x="0.2907%" y="495.50">cache.exe`alloc::vec::in_place_collect::from_iter_in_place&lt;core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;lru_sim::trace::Trace,alloc::alloc::Global&gt;,l..</text></g><g><title>cache.exe`alloc::vec::in_place_collect::impl$2::collect_in_place(core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;lru_sim::trace::Trace,alloc::alloc::Global&gt;,lru_sim::simulatiton::impl$0::simulate::closure_env$0&lt;1600,1,100,128,4,64&gt; &gt;*, lru_sim::simulatiton::Simulation&lt;1600,1,100&gt;*, lru_sim::simulatiton::Simulation (81,061 samples, 99.93%)</title><rect x="0.0407%" y="469" width="99.9310%" height="15" fill="rgb(216,135,14)" fg:x="33" fg:w="81061"/><text x="0.2907%" y="479.50">cache.exe`alloc::vec::in_place_collect::impl$2::collect_in_place(core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;lru_sim::trace::Trace,alloc::alloc::Glo..</text></g><g><title>cache.exe`core::ptr::mut_ptr::impl$0::sub_ptr(lru_sim::simulatiton::Simulation&lt;1600,1,100&gt;*, lru_sim::simulatiton::Simulation (81,061 samples, 99.93%)</title><rect x="0.0407%" y="453" width="99.9310%" height="15" fill="rgb(241,47,5)" fg:x="33" fg:w="81061"/><text x="0.2907%" y="463.50">cache.exe`core::ptr::mut_ptr::impl$0::sub_ptr(lru_sim::simulatiton::Simulation&lt;1600,1,100&gt;*, lru_sim::simulatiton::Simulation</text></g><g><title>cache.exe`core::ptr::const_ptr::impl$0::sub_ptr(lru_sim::simulatiton::Simulation&lt;1600,1,100&gt;*, lru_sim::simulatiton::Simulation (81,061 samples, 99.93%)</title><rect x="0.0407%" y="437" width="99.9310%" height="15" fill="rgb(233,42,35)" fg:x="33" fg:w="81061"/><text x="0.2907%" y="447.50">cache.exe`core::ptr::const_ptr::impl$0::sub_ptr(lru_sim::simulatiton::Simulation&lt;1600,1,100&gt;*, lru_sim::simulatiton::Simulation</text></g><g><title>cache.exe`alloc::vec::into_iter::impl$5::try_fold&lt;lru_sim::trace::Trace,alloc::alloc::Global,alloc::vec::in_place_drop::InPlaceDrop&lt;lru_sim::simulatiton::Simulation&lt;1600,1,100&gt; &gt;,core::iter::adapters::map::map_try_fold::closure_env$0&lt;lru_sim::trace::Trace,lru_sim::simulatiton::Simulation&lt;1600,1,100&gt;,alloc::vec::in_place_drop::InPlaceDrop&lt;lru_sim::simulatiton::Simulation&lt;1600,1,100&gt; &gt;,enum2$&lt;core::result::Result&lt;alloc::vec::in_place_drop::InPlaceDrop&lt;lru_sim::simulatiton::Simulation&lt;1600,1,100&gt; &gt;,never$&gt; &gt;,lru_sim::simulatiton::impl$0::simulate::closure_env$0&lt;1600,1,100,128,4,64&gt;,alloc::vec::in_place_collect::write_in_place_with_drop::closure_env$0&lt;lru_sim::simulatiton::Simulation&lt;1600,1,100&gt; &gt; &gt;,enum2$&lt;core::result::Result&lt;alloc::vec::in_place_drop::InPlaceDrop&lt;lru_sim::simulatiton::Simulation&lt;1600,1,100&gt; &gt;,never$&gt; &gt; &gt;(alloc::vec::into_iter::IntoIter&lt;lru_sim::trace::Trace,alloc::alloc::Global&gt;*, alloc::vec::in_place_drop::InPlaceDrop&lt;lru_sim::simulatiton::Simulation&lt;1600,1,100&gt; &gt;, core::iter::adapters::map::map_try_fold::closure_env$0&lt;lru_sim::trace::Trace,lru_sim::simulatiton::Simulation&lt;1600,1,100&gt;,alloc::vec::in_place_drop::InPlaceDrop&lt;lru_sim::simulatiton::Simulation&lt;1600,1,100&gt; &gt;,enum2$&lt;core::result::Result&lt;alloc::vec::in_place_drop::InPlaceDrop&lt;lru_sim::simulatiton::Simulation&lt;1600,1,100&gt; &gt;,never$&gt; &gt;,lru_sim::simulatiton::impl$0::simulate::closure_env$0&lt;1600,1,100,128,4,64&gt;,alloc::vec::in_place_collect::write_in_place_with_drop::closure_env$0&lt;lru_sim::simulatiton::Simulation (81,061 samples, 99.93%)</title><rect x="0.0407%" y="421" width="99.9310%" height="15" fill="rgb(231,13,6)" fg:x="33" fg:w="81061"/><text x="0.2907%" y="431.50">cache.exe`alloc::vec::into_iter::impl$5::try_fold&lt;lru_sim::trace::Trace,alloc::alloc::Global,alloc::vec::in_place_drop::InPlaceDrop&lt;lru_sim::simulatiton::Simulation&lt;16..</text></g><g><title>cache.exe`core::iter::adapters::map::map_try_fold::closure$0(core::iter::adapters::map::map_try_fold::closure_env$0&lt;lru_sim::trace::Trace,lru_sim::simulatiton::Simulation&lt;1600,1,100&gt;,alloc::vec::in_place_drop::InPlaceDrop&lt;lru_sim::simulatiton::Simulation&lt;1600,1,100&gt; &gt;,enum2$&lt;core::result::Result&lt;alloc::vec::in_place_drop::InPlaceDrop&lt;lru_sim::simulatiton::Simulation&lt;1600,1,100&gt; &gt;,never$&gt; &gt;,lru_sim::simulatiton::impl$0::simulate::closure_env$0&lt;1600,1,100,128,4,64&gt;,alloc::vec::in_place_collect::write_in_place_with_drop::closure_env$0&lt;lru_sim::simulatiton::Simulation&lt;1600,1,100&gt; &gt; &gt;*, alloc::vec::in_place_drop::InPlaceDrop&lt;lru_sim::simulatiton::Simulation (81,061 samples, 99.93%)</title><rect x="0.0407%" y="405" width="99.9310%" height="15" fill="rgb(207,181,40)" fg:x="33" fg:w="81061"/><text x="0.2907%" y="415.50">cache.exe`core::iter::adapters::map::map_try_fold::closure$0(core::iter::adapters::map::map_try_fold::closure_env$0&lt;lru_sim::trace::Trace,lru_sim::simulatiton::Simulat..</text></g><g><title>cache.exe`lru_sim::simulatiton::impl$0::simulate::closure$0(lru_sim::simulatiton::impl$0::simulate::closure_env$0 (81,061 samples, 99.93%)</title><rect x="0.0407%" y="389" width="99.9310%" height="15" fill="rgb(254,173,49)" fg:x="33" fg:w="81061"/><text x="0.2907%" y="399.50">cache.exe`lru_sim::simulatiton::impl$0::simulate::closure$0(lru_sim::simulatiton::impl$0::simulate::closure_env$0</text></g><g><title>cache.exe`alloc::vec::into_iter::impl$5::fold(alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;, lru_sim::simulatiton::Simulation&lt;1600,1,100&gt;, lru_sim::simulatiton::impl$0::simulate::closure$0::closure_env$0 (81,061 samples, 99.93%)</title><rect x="0.0407%" y="373" width="99.9310%" height="15" fill="rgb(221,1,38)" fg:x="33" fg:w="81061"/><text x="0.2907%" y="383.50">cache.exe`alloc::vec::into_iter::impl$5::fold(alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;, lru_sim::simulatiton::Simulation&lt;1600,1,100&gt;, lru_sim::simul..</text></g><g><title>cache.exe`lru_sim::simulatiton::impl$0::simulate::closure$0::closure$0(lru_sim::simulatiton::impl$0::simulate::closure$0::closure_env$0&lt;1600,1,100,128,4,64&gt;*, lru_sim::simulatiton::Simulation (69,692 samples, 85.92%)</title><rect x="14.0562%" y="357" width="85.9154%" height="15" fill="rgb(206,124,46)" fg:x="11402" fg:w="69692"/><text x="14.3062%" y="367.50">cache.exe`lru_sim::simulatiton::impl$0::simulate::closure$0::closure$0(lru_sim::simulatiton::impl$0::simulate::closure$0::closure_env$0&lt;1600,1,..</text></g><g><title>cache.exe`alloc::vec::Vec&lt;tuple$&lt;usize,enum2$&lt;lru_sim::simulatiton::CacheHit&gt; &gt;,alloc::alloc::Global&gt;::push(tuple$&lt;usize,enum2$ (67,353 samples, 83.03%)</title><rect x="16.9397%" y="341" width="83.0319%" height="15" fill="rgb(249,21,11)" fg:x="13741" fg:w="67353"/><text x="17.1897%" y="351.50">cache.exe`alloc::vec::Vec&lt;tuple$&lt;usize,enum2$&lt;lru_sim::simulatiton::CacheHit&gt; &gt;,alloc::alloc::Global&gt;::push(tuple$&lt;usize,enum2$</text></g><g><title>cache.exe`lru_sim::lru::LruCache&lt;128,4,64&gt;::get&lt;128,4,64&gt; (46,356 samples, 57.15%)</title><rect x="42.8246%" y="325" width="57.1471%" height="15" fill="rgb(222,201,40)" fg:x="34738" fg:w="46356"/><text x="43.0746%" y="335.50">cache.exe`lru_sim::lru::LruCache&lt;128,4,64&gt;::get&lt;128,4,64&gt;</text></g><g><title>cache.exe`lru_sim::lru::CacheSet&lt;4&gt;::get (42,308 samples, 52.16%)</title><rect x="47.8149%" y="309" width="52.1568%" height="15" fill="rgb(235,61,29)" fg:x="38786" fg:w="42308"/><text x="48.0649%" y="319.50">cache.exe`lru_sim::lru::CacheSet&lt;4&gt;::get</text></g><g><title>cache.exe`core::iter::traits::iterator::Iterator::find(core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;lru_sim::lru::CacheLine&gt; &gt;*, lru_sim::lru::impl$2::get::closure_env$0 (9,333 samples, 11.51%)</title><rect x="88.4660%" y="293" width="11.5056%" height="15" fill="rgb(219,207,3)" fg:x="71761" fg:w="9333"/><text x="88.7160%" y="303.50">cache.exe`core::i..</text></g><g><title>cache.exe`core::iter::adapters::enumerate::impl$1::try_fold(core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;lru_sim::lru::CacheLine&gt; &gt;*, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::find::check::closure_env$0&lt;tuple$&lt;usize,ref$&lt;lru_sim::lru::CacheLine&gt; &gt;,lru_sim::lru::impl$2::get::closure_env$0 (9,333 samples, 11.51%)</title><rect x="88.4660%" y="277" width="11.5056%" height="15" fill="rgb(222,56,46)" fg:x="71761" fg:w="9333"/><text x="88.7160%" y="287.50">cache.exe`core::i..</text></g><g><title>cache.exe`core::iter::traits::iterator::Iterator::try_fold(core::slice::iter::Iter&lt;lru_sim::lru::CacheLine&gt;*, tuple$&lt;&gt;, core::iter::adapters::enumerate::impl$1::try_fold::enumerate::closure_env$0&lt;ref$&lt;lru_sim::lru::CacheLine&gt;,tuple$&lt;&gt;,enum2$&lt;core::ops::control_flow::ControlFlow&lt;tuple$&lt;usize,ref$&lt;lru_sim::lru::CacheLine&gt; &gt;,tuple$&lt;&gt; &gt; &gt;,core::iter::traits::iterator::Iterator::find::check::closure_env$0&lt;tuple$&lt;usize,ref$&lt;lru_sim::lru::CacheLine&gt; &gt;,lru_sim::lru::impl$2::get::closure_env$0 (9,333 samples, 11.51%)</title><rect x="88.4660%" y="261" width="11.5056%" height="15" fill="rgb(239,76,54)" fg:x="71761" fg:w="9333"/><text x="88.7160%" y="271.50">cache.exe`core::i..</text></g><g><title>cache.exe`core::iter::adapters::enumerate::impl$1::try_fold::enumerate::closure$0(core::iter::adapters::enumerate::impl$1::try_fold::enumerate::closure_env$0&lt;ref$&lt;lru_sim::lru::CacheLine&gt;,tuple$&lt;&gt;,enum2$&lt;core::ops::control_flow::ControlFlow&lt;tuple$&lt;usize,ref$&lt;lru_sim::lru::CacheLine&gt; &gt;,tuple$&lt;&gt; &gt; &gt;,core::iter::traits::iterator::Iterator::find::check::closure_env$0&lt;tuple$&lt;usize,ref$&lt;lru_sim::lru::CacheLine&gt; &gt;,lru_sim::lru::impl$2::get::closure_env$0&lt;4&gt; &gt; &gt;*, tuple$ (9,333 samples, 11.51%)</title><rect x="88.4660%" y="245" width="11.5056%" height="15" fill="rgb(231,124,27)" fg:x="71761" fg:w="9333"/><text x="88.7160%" y="255.50">cache.exe`core::i..</text></g><g><title>cache.exe`core::iter::traits::iterator::Iterator::find::check::closure$0(core::iter::traits::iterator::Iterator::find::check::closure_env$0&lt;tuple$&lt;usize,ref$&lt;lru_sim::lru::CacheLine&gt; &gt;,lru_sim::lru::impl$2::get::closure_env$0&lt;4&gt; &gt;*, tuple$&lt;&gt;, tuple$&lt;usize,ref$ (9,333 samples, 11.51%)</title><rect x="88.4660%" y="229" width="11.5056%" height="15" fill="rgb(249,195,6)" fg:x="71761" fg:w="9333"/><text x="88.7160%" y="239.50">cache.exe`core::i..</text></g><g><title>cache.exe`lru_sim::lru::impl$2::get::closure$0(lru_sim::lru::impl$2::get::closure_env$0&lt;4&gt;*, tuple$&lt;usize,ref$ (9,333 samples, 11.51%)</title><rect x="88.4660%" y="213" width="11.5056%" height="15" fill="rgb(237,174,47)" fg:x="71761" fg:w="9333"/><text x="88.7160%" y="223.50">cache.exe`lru_sim..</text></g><g><title>cache.exe`core::option::impl$14::eq(enum2$&lt;core::option::Option&lt;usize&gt; &gt;*, enum2$&lt;core::option::Option (9,333 samples, 11.51%)</title><rect x="88.4660%" y="197" width="11.5056%" height="15" fill="rgb(206,201,31)" fg:x="71761" fg:w="9333"/><text x="88.7160%" y="207.50">cache.exe`core::o..</text></g><g><title>cache.exe`lru_sim::simulatiton::Simulation&lt;1600,1,100&gt;::run&lt;1600,1,100,128,4,64,ref$&lt;alloc::string::String&gt; &gt;(lru_sim::lru::LruCache (81,062 samples, 99.93%)</title><rect x="0.0407%" y="517" width="99.9322%" height="15" fill="rgb(231,57,52)" fg:x="33" fg:w="81062"/><text x="0.2907%" y="527.50">cache.exe`lru_sim::simulatiton::Simulation&lt;1600,1,100&gt;::run&lt;1600,1,100,128,4,64,ref$&lt;alloc::string::String&gt; &gt;(lru_sim::lru::LruCache</text></g><g><title>`0x7FF99FCBBF6C (81,091 samples, 99.97%)</title><rect x="0.0062%" y="741" width="99.9679%" height="15" fill="rgb(248,177,22)" fg:x="5" fg:w="81091"/><text x="0.2562%" y="751.50">`0x7FF99FCBBF6C</text></g><g><title>`0x7FF99EBAE8D7 (81,091 samples, 99.97%)</title><rect x="0.0062%" y="725" width="99.9679%" height="15" fill="rgb(215,211,37)" fg:x="5" fg:w="81091"/><text x="0.2562%" y="735.50">`0x7FF99EBAE8D7</text></g><g><title>cache.exe`__scrt_common_main_seh() (81,087 samples, 99.96%)</title><rect x="0.0111%" y="709" width="99.9630%" height="15" fill="rgb(241,128,51)" fg:x="9" fg:w="81087"/><text x="0.2611%" y="719.50">cache.exe`__scrt_common_main_seh()</text></g><g><title>cache.exe`invoke_main() (81,077 samples, 99.95%)</title><rect x="0.0234%" y="693" width="99.9507%" height="15" fill="rgb(227,165,31)" fg:x="19" fg:w="81077"/><text x="0.2734%" y="703.50">cache.exe`invoke_main()</text></g><g><title>cache.exe`main (81,077 samples, 99.95%)</title><rect x="0.0234%" y="677" width="99.9507%" height="15" fill="rgb(228,167,24)" fg:x="19" fg:w="81077"/><text x="0.2734%" y="687.50">cache.exe`main</text></g><g><title>cache.exe`std::rt::lang_start_internal (81,077 samples, 99.95%)</title><rect x="0.0234%" y="661" width="99.9507%" height="15" fill="rgb(228,143,12)" fg:x="19" fg:w="81077"/><text x="0.2734%" y="671.50">cache.exe`std::rt::lang_start_internal</text></g><g><title>cache.exe`std::panic::catch_unwind (81,077 samples, 99.95%)</title><rect x="0.0234%" y="645" width="99.9507%" height="15" fill="rgb(249,149,8)" fg:x="19" fg:w="81077"/><text x="0.2734%" y="655.50">cache.exe`std::panic::catch_unwind</text></g><g><title>cache.exe`std::panicking::try (81,077 samples, 99.95%)</title><rect x="0.0234%" y="629" width="99.9507%" height="15" fill="rgb(243,35,44)" fg:x="19" fg:w="81077"/><text x="0.2734%" y="639.50">cache.exe`std::panicking::try</text></g><g><title>cache.exe`std::panicking::try::do_call (81,077 samples, 99.95%)</title><rect x="0.0234%" y="613" width="99.9507%" height="15" fill="rgb(246,89,9)" fg:x="19" fg:w="81077"/><text x="0.2734%" y="623.50">cache.exe`std::panicking::try::do_call</text></g><g><title>cache.exe`std::rt::lang_start_internal::closure$1 (81,077 samples, 99.95%)</title><rect x="0.0234%" y="597" width="99.9507%" height="15" fill="rgb(233,213,13)" fg:x="19" fg:w="81077"/><text x="0.2734%" y="607.50">cache.exe`std::rt::lang_start_internal::closure$1</text></g><g><title>cache.exe`std::panic::catch_unwind (81,077 samples, 99.95%)</title><rect x="0.0234%" y="581" width="99.9507%" height="15" fill="rgb(233,141,41)" fg:x="19" fg:w="81077"/><text x="0.2734%" y="591.50">cache.exe`std::panic::catch_unwind</text></g><g><title>cache.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$ (81,077 samples, 99.95%)</title><rect x="0.0234%" y="565" width="99.9507%" height="15" fill="rgb(239,167,4)" fg:x="19" fg:w="81077"/><text x="0.2734%" y="575.50">cache.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$</text></g><g><title>cache.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (81,077 samples, 99.95%)</title><rect x="0.0234%" y="549" width="99.9507%" height="15" fill="rgb(209,217,16)" fg:x="19" fg:w="81077"/><text x="0.2734%" y="559.50">cache.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>cache.exe`cache::main (81,077 samples, 99.95%)</title><rect x="0.0234%" y="533" width="99.9507%" height="15" fill="rgb(219,88,35)" fg:x="19" fg:w="81077"/><text x="0.2734%" y="543.50">cache.exe`cache::main</text></g><g><title>`0x7FF99FCF2CFD (9 samples, 0.01%)</title><rect x="99.9803%" y="693" width="0.0111%" height="15" fill="rgb(220,193,23)" fg:x="81101" fg:w="9"/><text x="100.2303%" y="703.50"></text></g><g><title>all (81,117 samples, 100%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(230,90,52)" fg:x="0" fg:w="81117"/><text x="0.2500%" y="767.50"></text></g><g><title>`0x7FF99FCF340E (21 samples, 0.03%)</title><rect x="99.9741%" y="741" width="0.0259%" height="15" fill="rgb(252,106,19)" fg:x="81096" fg:w="21"/><text x="100.2241%" y="751.50"></text></g><g><title>`0x7FF99FD1EA23 (20 samples, 0.02%)</title><rect x="99.9753%" y="725" width="0.0247%" height="15" fill="rgb(206,74,20)" fg:x="81097" fg:w="20"/><text x="100.2253%" y="735.50"></text></g><g><title>`0x7FF99FCF10F8 (20 samples, 0.02%)</title><rect x="99.9753%" y="709" width="0.0247%" height="15" fill="rgb(230,138,44)" fg:x="81097" fg:w="20"/><text x="100.2253%" y="719.50"></text></g></svg></svg>