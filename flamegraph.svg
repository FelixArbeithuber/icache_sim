<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="838" onload="init(evt)" viewBox="0 0 1200 838" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="838" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="821.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="821.00"> </text><svg id="frames" x="10" width="1180" total_samples="73443"><g><title>`0x7FF99D0A00F6 (8 samples, 0.01%)</title><rect x="0.0109%" y="725" width="0.0109%" height="15" fill="rgb(227,0,7)" fg:x="8" fg:w="8"/><text x="0.2609%" y="735.50"></text></g><g><title>`0x7FF99D0855ED (8 samples, 0.01%)</title><rect x="0.0109%" y="709" width="0.0109%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="8"/><text x="0.2609%" y="719.50"></text></g><g><title>`0x7FF99D01423B (8 samples, 0.01%)</title><rect x="0.0109%" y="693" width="0.0109%" height="15" fill="rgb(221,193,54)" fg:x="8" fg:w="8"/><text x="0.2609%" y="703.50"></text></g><g><title>`0x7FF99D0763F5 (8 samples, 0.01%)</title><rect x="0.0109%" y="677" width="0.0109%" height="15" fill="rgb(248,212,6)" fg:x="8" fg:w="8"/><text x="0.2609%" y="687.50"></text></g><g><title>`0x7FF99D482446 (8 samples, 0.01%)</title><rect x="0.0109%" y="661" width="0.0109%" height="15" fill="rgb(208,68,35)" fg:x="8" fg:w="8"/><text x="0.2609%" y="671.50"></text></g><g><title>`0x7FF99FC6A650 (8 samples, 0.01%)</title><rect x="0.0109%" y="645" width="0.0109%" height="15" fill="rgb(232,128,0)" fg:x="8" fg:w="8"/><text x="0.2609%" y="655.50"></text></g><g><title>`0x7FF99FC5ED20 (8 samples, 0.01%)</title><rect x="0.0109%" y="629" width="0.0109%" height="15" fill="rgb(207,160,47)" fg:x="8" fg:w="8"/><text x="0.2609%" y="639.50"></text></g><g><title>cache.exe`alloc::vec::Vec&lt;ref$&lt;enum2$&lt;lru_sim::trace::Op&gt; &gt;,alloc::alloc::Global&gt;::pop (95 samples, 0.13%)</title><rect x="0.9450%" y="309" width="0.1294%" height="15" fill="rgb(228,23,34)" fg:x="694" fg:w="95"/><text x="1.1950%" y="319.50"></text></g><g><title>cache.exe`core::ptr::read(enum2$ (77 samples, 0.10%)</title><rect x="0.9695%" y="293" width="0.1048%" height="15" fill="rgb(218,30,26)" fg:x="712" fg:w="77"/><text x="1.2195%" y="303.50"></text></g><g><title>`0x7FF99FD65113 (9 samples, 0.01%)</title><rect x="1.0757%" y="37" width="0.0123%" height="15" fill="rgb(220,122,19)" fg:x="790" fg:w="9"/><text x="1.3257%" y="47.50"></text></g><g><title>`0x7FF99FC2AB69 (17 samples, 0.02%)</title><rect x="1.0743%" y="53" width="0.0231%" height="15" fill="rgb(250,228,42)" fg:x="789" fg:w="17"/><text x="1.3243%" y="63.50"></text></g><g><title>cache.exe`alloc::vec::Vec&lt;ref$&lt;enum2$&lt;lru_sim::trace::Op&gt; &gt;,alloc::alloc::Global&gt;::as_mut_ptr (19 samples, 0.03%)</title><rect x="1.0743%" y="261" width="0.0259%" height="15" fill="rgb(240,193,28)" fg:x="789" fg:w="19"/><text x="1.3243%" y="271.50"></text></g><g><title>cache.exe`alloc::raw_vec::RawVec&lt;ref$&lt;enum2$&lt;lru_sim::trace::Op&gt; &gt;,alloc::alloc::Global&gt;::ptr (19 samples, 0.03%)</title><rect x="1.0743%" y="245" width="0.0259%" height="15" fill="rgb(216,20,37)" fg:x="789" fg:w="19"/><text x="1.3243%" y="255.50"></text></g><g><title>cache.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (19 samples, 0.03%)</title><rect x="1.0743%" y="229" width="0.0259%" height="15" fill="rgb(206,188,39)" fg:x="789" fg:w="19"/><text x="1.3243%" y="239.50"></text></g><g><title>cache.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (19 samples, 0.03%)</title><rect x="1.0743%" y="213" width="0.0259%" height="15" fill="rgb(217,207,13)" fg:x="789" fg:w="19"/><text x="1.3243%" y="223.50"></text></g><g><title>cache.exe`alloc::raw_vec::impl$5::reserve::do_reserve_and_handle&lt;alloc::alloc::Global&gt;(alloc::raw_vec::RawVecInner (19 samples, 0.03%)</title><rect x="1.0743%" y="197" width="0.0259%" height="15" fill="rgb(231,73,38)" fg:x="789" fg:w="19"/><text x="1.3243%" y="207.50"></text></g><g><title>cache.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (19 samples, 0.03%)</title><rect x="1.0743%" y="181" width="0.0259%" height="15" fill="rgb(225,20,46)" fg:x="789" fg:w="19"/><text x="1.3243%" y="191.50"></text></g><g><title>cache.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (19 samples, 0.03%)</title><rect x="1.0743%" y="165" width="0.0259%" height="15" fill="rgb(210,31,41)" fg:x="789" fg:w="19"/><text x="1.3243%" y="175.50"></text></g><g><title>cache.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (19 samples, 0.03%)</title><rect x="1.0743%" y="149" width="0.0259%" height="15" fill="rgb(221,200,47)" fg:x="789" fg:w="19"/><text x="1.3243%" y="159.50"></text></g><g><title>cache.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (19 samples, 0.03%)</title><rect x="1.0743%" y="133" width="0.0259%" height="15" fill="rgb(226,26,5)" fg:x="789" fg:w="19"/><text x="1.3243%" y="143.50"></text></g><g><title>cache.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (19 samples, 0.03%)</title><rect x="1.0743%" y="117" width="0.0259%" height="15" fill="rgb(249,33,26)" fg:x="789" fg:w="19"/><text x="1.3243%" y="127.50"></text></g><g><title>cache.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (19 samples, 0.03%)</title><rect x="1.0743%" y="101" width="0.0259%" height="15" fill="rgb(235,183,28)" fg:x="789" fg:w="19"/><text x="1.3243%" y="111.50"></text></g><g><title>`0x7FF99FC29A86 (19 samples, 0.03%)</title><rect x="1.0743%" y="85" width="0.0259%" height="15" fill="rgb(221,5,38)" fg:x="789" fg:w="19"/><text x="1.3243%" y="95.50"></text></g><g><title>`0x7FF99FC29BC5 (19 samples, 0.03%)</title><rect x="1.0743%" y="69" width="0.0259%" height="15" fill="rgb(247,18,42)" fg:x="789" fg:w="19"/><text x="1.3243%" y="79.50"></text></g><g><title>cache.exe`core::iter::traits::iterator::Iterator::for_each::call::closure$0(core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;ref$&lt;enum2$&lt;lru_sim::trace::Op&gt; &gt;,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;ref$&lt;enum2$&lt;lru_sim::trace::Op&gt; &gt;,alloc::alloc::Global,core::iter::adapters::rev::Rev&lt;core::slice::iter::Iter&lt;enum2$&lt;lru_sim::trace::Op&gt; &gt; &gt; &gt; &gt;*, tuple$&lt;&gt;, enum2$ (9 samples, 0.01%)</title><rect x="1.1015%" y="213" width="0.0123%" height="15" fill="rgb(241,131,45)" fg:x="809" fg:w="9"/><text x="1.3515%" y="223.50"></text></g><g><title>cache.exe`alloc::vec::impl$20::extend_trusted::closure$0(alloc::vec::impl$20::extend_trusted::closure_env$0&lt;ref$&lt;enum2$&lt;lru_sim::trace::Op&gt; &gt;,alloc::alloc::Global,core::iter::adapters::rev::Rev&lt;core::slice::iter::Iter&lt;enum2$&lt;lru_sim::trace::Op&gt; &gt; &gt; &gt;*, enum2$ (9 samples, 0.01%)</title><rect x="1.1015%" y="197" width="0.0123%" height="15" fill="rgb(249,31,29)" fg:x="809" fg:w="9"/><text x="1.3515%" y="207.50"></text></g><g><title>cache.exe`alloc::vec::impl$19::extend(alloc::vec::Vec&lt;ref$&lt;enum2$&lt;lru_sim::trace::Op&gt; &gt;,alloc::alloc::Global&gt;*, core::iter::adapters::rev::Rev&lt;core::slice::iter::Iter&lt;enum2$ (31 samples, 0.04%)</title><rect x="1.0743%" y="309" width="0.0422%" height="15" fill="rgb(225,111,53)" fg:x="789" fg:w="31"/><text x="1.3243%" y="319.50"></text></g><g><title>cache.exe`alloc::vec::spec_extend::impl$1::spec_extend(alloc::vec::Vec&lt;ref$&lt;enum2$&lt;lru_sim::trace::Op&gt; &gt;,alloc::alloc::Global&gt;*, core::iter::adapters::rev::Rev&lt;core::slice::iter::Iter&lt;enum2$ (31 samples, 0.04%)</title><rect x="1.0743%" y="293" width="0.0422%" height="15" fill="rgb(238,160,17)" fg:x="789" fg:w="31"/><text x="1.3243%" y="303.50"></text></g><g><title>cache.exe`alloc::vec::Vec&lt;ref$&lt;enum2$&lt;lru_sim::trace::Op&gt; &gt;,alloc::alloc::Global&gt;::extend_trusted(core::iter::adapters::rev::Rev&lt;core::slice::iter::Iter&lt;enum2$ (31 samples, 0.04%)</title><rect x="1.0743%" y="277" width="0.0422%" height="15" fill="rgb(214,148,48)" fg:x="789" fg:w="31"/><text x="1.3243%" y="287.50"></text></g><g><title>cache.exe`core::iter::traits::iterator::Iterator::for_each(core::iter::adapters::rev::Rev&lt;core::slice::iter::Iter&lt;enum2$&lt;lru_sim::trace::Op&gt; &gt; &gt;, alloc::vec::impl$20::extend_trusted::closure_env$0&lt;ref$&lt;enum2$&lt;lru_sim::trace::Op&gt; &gt;,alloc::alloc::Global,core::iter::adapters::rev::Rev&lt;core::slice::iter::Iter&lt;enum2$ (11 samples, 0.01%)</title><rect x="1.1015%" y="261" width="0.0150%" height="15" fill="rgb(232,36,49)" fg:x="809" fg:w="11"/><text x="1.3515%" y="271.50"></text></g><g><title>cache.exe`core::iter::adapters::rev::impl$1::fold(core::iter::adapters::rev::Rev&lt;core::slice::iter::Iter&lt;enum2$&lt;lru_sim::trace::Op&gt; &gt; &gt;, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;ref$&lt;enum2$&lt;lru_sim::trace::Op&gt; &gt;,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;ref$&lt;enum2$&lt;lru_sim::trace::Op&gt; &gt;,alloc::alloc::Global,core::iter::adapters::rev::Rev&lt;core::slice::iter::Iter&lt;enum2$ (11 samples, 0.01%)</title><rect x="1.1015%" y="245" width="0.0150%" height="15" fill="rgb(209,103,24)" fg:x="809" fg:w="11"/><text x="1.3515%" y="255.50"></text></g><g><title>cache.exe`core::iter::traits::double_ended::DoubleEndedIterator::rfold(core::slice::iter::Iter&lt;enum2$&lt;lru_sim::trace::Op&gt; &gt;, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;ref$&lt;enum2$&lt;lru_sim::trace::Op&gt; &gt;,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;ref$&lt;enum2$&lt;lru_sim::trace::Op&gt; &gt;,alloc::alloc::Global,core::iter::adapters::rev::Rev&lt;core::slice::iter::Iter&lt;enum2$ (11 samples, 0.01%)</title><rect x="1.1015%" y="229" width="0.0150%" height="15" fill="rgb(229,88,8)" fg:x="809" fg:w="11"/><text x="1.3515%" y="239.50"></text></g><g><title>`0x7FF99FD65104 (28 samples, 0.04%)</title><rect x="1.1288%" y="85" width="0.0381%" height="15" fill="rgb(213,181,19)" fg:x="829" fg:w="28"/><text x="1.3788%" y="95.50"></text></g><g><title>`0x7FF99FD65109 (15 samples, 0.02%)</title><rect x="1.1669%" y="85" width="0.0204%" height="15" fill="rgb(254,191,54)" fg:x="857" fg:w="15"/><text x="1.4169%" y="95.50"></text></g><g><title>`0x7FF99FD65113 (12,860 samples, 17.51%)</title><rect x="1.1968%" y="85" width="17.5102%" height="15" fill="rgb(241,83,37)" fg:x="879" fg:w="12860"/><text x="1.4468%" y="95.50">`0x7FF99FD65113</text></g><g><title>`0x7FF99FD65117 (5,159 samples, 7.02%)</title><rect x="18.7070%" y="85" width="7.0245%" height="15" fill="rgb(233,36,39)" fg:x="13739" fg:w="5159"/><text x="18.9570%" y="95.50">`0x7FF99F..</text></g><g><title>`0x7FF99FD6511B (33 samples, 0.04%)</title><rect x="25.7315%" y="85" width="0.0449%" height="15" fill="rgb(226,3,54)" fg:x="18898" fg:w="33"/><text x="25.9815%" y="95.50"></text></g><g><title>`0x7FF99FD65120 (117 samples, 0.16%)</title><rect x="25.7765%" y="85" width="0.1593%" height="15" fill="rgb(245,192,40)" fg:x="18931" fg:w="117"/><text x="26.0265%" y="95.50"></text></g><g><title>`0x7FF99FD65127 (466 samples, 0.63%)</title><rect x="25.9426%" y="85" width="0.6345%" height="15" fill="rgb(238,167,29)" fg:x="19053" fg:w="466"/><text x="26.1926%" y="95.50"></text></g><g><title>`0x7FF99FD6512B (402 samples, 0.55%)</title><rect x="26.5771%" y="85" width="0.5474%" height="15" fill="rgb(232,182,51)" fg:x="19519" fg:w="402"/><text x="26.8271%" y="95.50"></text></g><g><title>`0x7FF99FD6512F (451 samples, 0.61%)</title><rect x="27.1244%" y="85" width="0.6141%" height="15" fill="rgb(231,60,39)" fg:x="19921" fg:w="451"/><text x="27.3744%" y="95.50"></text></g><g><title>`0x7FF99FC2AB69 (19,635 samples, 26.74%)</title><rect x="1.1288%" y="101" width="26.7350%" height="15" fill="rgb(208,69,12)" fg:x="829" fg:w="19635"/><text x="1.3788%" y="111.50">`0x7FF99FC2AB69</text></g><g><title>`0x7FF99FD65132 (92 samples, 0.13%)</title><rect x="27.7385%" y="85" width="0.1253%" height="15" fill="rgb(235,93,37)" fg:x="20372" fg:w="92"/><text x="27.9885%" y="95.50"></text></g><g><title>`0x7FF99FC4813F (24 samples, 0.03%)</title><rect x="27.8665%" y="53" width="0.0327%" height="15" fill="rgb(213,116,39)" fg:x="20466" fg:w="24"/><text x="28.1165%" y="63.50"></text></g><g><title>`0x7FF99FD5FBB4 (24 samples, 0.03%)</title><rect x="27.8665%" y="37" width="0.0327%" height="15" fill="rgb(222,207,29)" fg:x="20466" fg:w="24"/><text x="28.1165%" y="47.50"></text></g><g><title>cache.exe`alloc::vec::set_len_on_drop::SetLenOnDrop::new (19,667 samples, 26.78%)</title><rect x="1.1220%" y="261" width="26.7786%" height="15" fill="rgb(206,96,30)" fg:x="824" fg:w="19667"/><text x="1.3720%" y="271.50">cache.exe`alloc::vec::set_len_on_drop::SetL..</text></g><g><title>cache.exe`alloc::raw_vec::impl$5::reserve::do_reserve_and_handle&lt;alloc::alloc::Global&gt;(alloc::raw_vec::RawVecInner (19,667 samples, 26.78%)</title><rect x="1.1220%" y="245" width="26.7786%" height="15" fill="rgb(218,138,4)" fg:x="824" fg:w="19667"/><text x="1.3720%" y="255.50">cache.exe`alloc::raw_vec::impl$5::reserve::..</text></g><g><title>cache.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (19,667 samples, 26.78%)</title><rect x="1.1220%" y="229" width="26.7786%" height="15" fill="rgb(250,191,14)" fg:x="824" fg:w="19667"/><text x="1.3720%" y="239.50">cache.exe`alloc::raw_vec::RawVecInner&lt;alloc..</text></g><g><title>cache.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (19,667 samples, 26.78%)</title><rect x="1.1220%" y="213" width="26.7786%" height="15" fill="rgb(239,60,40)" fg:x="824" fg:w="19667"/><text x="1.3720%" y="223.50">cache.exe`core::result::impl$26::branch(enu..</text></g><g><title>cache.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (19,667 samples, 26.78%)</title><rect x="1.1220%" y="197" width="26.7786%" height="15" fill="rgb(206,27,48)" fg:x="824" fg:w="19667"/><text x="1.3720%" y="207.50">cache.exe`alloc::raw_vec::finish_grow&lt;alloc..</text></g><g><title>cache.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (19,667 samples, 26.78%)</title><rect x="1.1220%" y="181" width="26.7786%" height="15" fill="rgb(225,35,8)" fg:x="824" fg:w="19667"/><text x="1.3720%" y="191.50">cache.exe`alloc::alloc::impl$1::grow(alloc:..</text></g><g><title>cache.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (19,667 samples, 26.78%)</title><rect x="1.1220%" y="165" width="26.7786%" height="15" fill="rgb(250,213,24)" fg:x="824" fg:w="19667"/><text x="1.3720%" y="175.50">cache.exe`alloc::alloc::Global::grow_impl(c..</text></g><g><title>cache.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (19,667 samples, 26.78%)</title><rect x="1.1220%" y="149" width="26.7786%" height="15" fill="rgb(247,123,22)" fg:x="824" fg:w="19667"/><text x="1.3720%" y="159.50">cache.exe`core::result::impl$26::branch(enu..</text></g><g><title>`0x7FF99FC29A86 (19,667 samples, 26.78%)</title><rect x="1.1220%" y="133" width="26.7786%" height="15" fill="rgb(231,138,38)" fg:x="824" fg:w="19667"/><text x="1.3720%" y="143.50">`0x7FF99FC29A86</text></g><g><title>`0x7FF99FC29BC5 (19,667 samples, 26.78%)</title><rect x="1.1220%" y="117" width="26.7786%" height="15" fill="rgb(231,145,46)" fg:x="824" fg:w="19667"/><text x="1.3720%" y="127.50">`0x7FF99FC29BC5</text></g><g><title>`0x7FF99FC2AB7C (27 samples, 0.04%)</title><rect x="27.8638%" y="101" width="0.0368%" height="15" fill="rgb(251,118,11)" fg:x="20464" fg:w="27"/><text x="28.1138%" y="111.50"></text></g><g><title>`0x7FF99FC26F81 (27 samples, 0.04%)</title><rect x="27.8638%" y="85" width="0.0368%" height="15" fill="rgb(217,147,25)" fg:x="20464" fg:w="27"/><text x="28.1138%" y="95.50"></text></g><g><title>`0x7FF99FC1FAFD (25 samples, 0.03%)</title><rect x="27.8665%" y="69" width="0.0340%" height="15" fill="rgb(247,81,37)" fg:x="20466" fg:w="25"/><text x="28.1165%" y="79.50"></text></g><g><title>cache.exe`core::iter::range::impl$6::next(core::ops::range::Range (6,316 samples, 8.60%)</title><rect x="27.9005%" y="213" width="8.5999%" height="15" fill="rgb(209,12,38)" fg:x="20491" fg:w="6316"/><text x="28.1505%" y="223.50">cache.exe`co..</text></g><g><title>cache.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (6,316 samples, 8.60%)</title><rect x="27.9005%" y="197" width="8.5999%" height="15" fill="rgb(227,1,9)" fg:x="20491" fg:w="6316"/><text x="28.1505%" y="207.50">cache.exe`co..</text></g><g><title>cache.exe`core::iter::range::impl$43::forward_unchecked (6,291 samples, 8.57%)</title><rect x="27.9346%" y="181" width="8.5658%" height="15" fill="rgb(248,47,43)" fg:x="20516" fg:w="6291"/><text x="28.1846%" y="191.50">cache.exe`co..</text></g><g><title>cache.exe`core::num::impl$11::unchecked_add (6,291 samples, 8.57%)</title><rect x="27.9346%" y="165" width="8.5658%" height="15" fill="rgb(221,10,30)" fg:x="20516" fg:w="6291"/><text x="28.1846%" y="175.50">cache.exe`co..</text></g><g><title>cache.exe`alloc::vec::spec_extend::impl$1::spec_extend(alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;*, core::iter::adapters::step_by::StepBy&lt;core::ops::range::Range (38,132 samples, 51.92%)</title><rect x="1.1220%" y="293" width="51.9205%" height="15" fill="rgb(210,229,1)" fg:x="824" fg:w="38132"/><text x="1.3720%" y="303.50">cache.exe`alloc::vec::spec_extend::impl$1::spec_extend(alloc::vec::Vec&lt;usize,alloc::al..</text></g><g><title>cache.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::extend_trusted(core::iter::adapters::step_by::StepBy&lt;core::ops::range::Range (38,132 samples, 51.92%)</title><rect x="1.1220%" y="277" width="51.9205%" height="15" fill="rgb(222,148,37)" fg:x="824" fg:w="38132"/><text x="1.3720%" y="287.50">cache.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::extend_trusted(core::iter::adap..</text></g><g><title>cache.exe`core::iter::traits::iterator::Iterator::for_each(core::iter::adapters::step_by::StepBy&lt;core::ops::range::Range&lt;usize&gt; &gt;, alloc::vec::impl$20::extend_trusted::closure_env$0&lt;usize,alloc::alloc::Global,core::iter::adapters::step_by::StepBy&lt;core::ops::range::Range (18,465 samples, 25.14%)</title><rect x="27.9005%" y="261" width="25.1419%" height="15" fill="rgb(234,67,33)" fg:x="20491" fg:w="18465"/><text x="28.1505%" y="271.50">cache.exe`core::iter::traits::iterator::..</text></g><g><title>cache.exe`core::iter::adapters::step_by::impl$1::fold(core::iter::adapters::step_by::StepBy&lt;core::ops::range::Range&lt;usize&gt; &gt;, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;usize,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;usize,alloc::alloc::Global,core::iter::adapters::step_by::StepBy&lt;core::ops::range::Range (18,465 samples, 25.14%)</title><rect x="27.9005%" y="245" width="25.1419%" height="15" fill="rgb(247,98,35)" fg:x="20491" fg:w="18465"/><text x="28.1505%" y="255.50">cache.exe`core::iter::adapters::step_by:..</text></g><g><title>cache.exe`core::iter::adapters::step_by::impl$20::spec_fold(core::iter::adapters::step_by::StepBy&lt;core::ops::range::Range&lt;usize&gt; &gt;, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;usize,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;usize,alloc::alloc::Global,core::iter::adapters::step_by::StepBy&lt;core::ops::range::Range (18,465 samples, 25.14%)</title><rect x="27.9005%" y="229" width="25.1419%" height="15" fill="rgb(247,138,52)" fg:x="20491" fg:w="18465"/><text x="28.1505%" y="239.50">cache.exe`core::iter::adapters::step_by:..</text></g><g><title>cache.exe`core::iter::traits::iterator::Iterator::for_each::call::closure$0(core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;usize,alloc::vec::impl$20::extend_trusted::closure_env$0&lt;usize,alloc::alloc::Global,core::iter::adapters::step_by::StepBy&lt;core::ops::range::Range&lt;usize&gt; &gt; &gt; &gt;*, tuple$ (12,149 samples, 16.54%)</title><rect x="36.5004%" y="213" width="16.5421%" height="15" fill="rgb(213,79,30)" fg:x="26807" fg:w="12149"/><text x="36.7504%" y="223.50">cache.exe`core::iter::trai..</text></g><g><title>cache.exe`alloc::vec::impl$20::extend_trusted::closure$0(alloc::vec::impl$20::extend_trusted::closure_env$0&lt;usize,alloc::alloc::Global,core::iter::adapters::step_by::StepBy&lt;core::ops::range::Range (12,149 samples, 16.54%)</title><rect x="36.5004%" y="197" width="16.5421%" height="15" fill="rgb(246,177,23)" fg:x="26807" fg:w="12149"/><text x="36.7504%" y="207.50">cache.exe`alloc::vec::impl..</text></g><g><title>cache.exe`core::ptr::write (12,149 samples, 16.54%)</title><rect x="36.5004%" y="181" width="16.5421%" height="15" fill="rgb(230,62,27)" fg:x="26807" fg:w="12149"/><text x="36.7504%" y="191.50">cache.exe`core::ptr::write</text></g><g><title>cache.exe`core::iter::traits::iterator::Iterator::step_by(core::ops::range::Range (38,155 samples, 51.95%)</title><rect x="1.1220%" y="309" width="51.9519%" height="15" fill="rgb(216,154,8)" fg:x="824" fg:w="38155"/><text x="1.3720%" y="319.50">cache.exe`core::iter::traits::iterator::Iterator::step_by(core::ops::range::Range</text></g><g><title>cache.exe`core::iter::adapters::step_by::StepBy&lt;core::ops::range::Range&lt;usize&gt; &gt;::new(core::ops::range::Range (23 samples, 0.03%)</title><rect x="53.0425%" y="293" width="0.0313%" height="15" fill="rgb(244,35,45)" fg:x="38956" fg:w="23"/><text x="53.2925%" y="303.50"></text></g><g><title>cache.exe`core::iter::adapters::step_by::impl$19::setup(core::ops::range::Range (21 samples, 0.03%)</title><rect x="53.0452%" y="277" width="0.0286%" height="15" fill="rgb(251,115,12)" fg:x="38958" fg:w="21"/><text x="53.2952%" y="287.50"></text></g><g><title>cache.exe`core::num::impl$11::div_ceil (21 samples, 0.03%)</title><rect x="53.0452%" y="261" width="0.0286%" height="15" fill="rgb(240,54,50)" fg:x="38958" fg:w="21"/><text x="53.2952%" y="271.50"></text></g><g><title>cache.exe`core::hash::impls::impl$5::hash(ref$ (21 samples, 0.03%)</title><rect x="53.0983%" y="229" width="0.0286%" height="15" fill="rgb(233,84,52)" fg:x="38997" fg:w="21"/><text x="53.3483%" y="239.50"></text></g><g><title>cache.exe`core::hash::impls::impl$5::hash(ref$ (20 samples, 0.03%)</title><rect x="53.0997%" y="213" width="0.0272%" height="15" fill="rgb(207,117,47)" fg:x="38998" fg:w="20"/><text x="53.3497%" y="223.50"></text></g><g><title>cache.exe`core::hash::impls::impl$2::hash(ref$ (20 samples, 0.03%)</title><rect x="53.0997%" y="197" width="0.0272%" height="15" fill="rgb(249,43,39)" fg:x="38998" fg:w="20"/><text x="53.3497%" y="207.50"></text></g><g><title>cache.exe`std::hash::random::impl$4::write_str(std::hash::random::DefaultHasher*, ref$ (20 samples, 0.03%)</title><rect x="53.0997%" y="181" width="0.0272%" height="15" fill="rgb(209,38,44)" fg:x="38998" fg:w="20"/><text x="53.3497%" y="191.50"></text></g><g><title>cache.exe`core::hash::sip::impl$4::write_str(core::hash::sip::SipHasher13*, ref$ (20 samples, 0.03%)</title><rect x="53.0997%" y="165" width="0.0272%" height="15" fill="rgb(236,212,23)" fg:x="38998" fg:w="20"/><text x="53.3497%" y="175.50"></text></g><g><title>cache.exe`core::hash::sip::impl$5::write_str(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$ (20 samples, 0.03%)</title><rect x="53.0997%" y="149" width="0.0272%" height="15" fill="rgb(242,79,21)" fg:x="38998" fg:w="20"/><text x="53.3497%" y="159.50"></text></g><g><title>cache.exe`core::hash::Hasher::write_u8(core::hash::sip::Hasher (15 samples, 0.02%)</title><rect x="53.1065%" y="133" width="0.0204%" height="15" fill="rgb(211,96,35)" fg:x="39003" fg:w="15"/><text x="53.3565%" y="143.50"></text></g><g><title>cache.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (14 samples, 0.02%)</title><rect x="53.1079%" y="117" width="0.0191%" height="15" fill="rgb(253,215,40)" fg:x="39004" fg:w="14"/><text x="53.3579%" y="127.50"></text></g><g><title>cache.exe`std::hash::random::impl$1::build_hasher (17 samples, 0.02%)</title><rect x="53.1269%" y="229" width="0.0231%" height="15" fill="rgb(211,81,21)" fg:x="39018" fg:w="17"/><text x="53.3769%" y="239.50"></text></g><g><title>cache.exe`core::hash::sip::SipHasher13::new_with_keys (16 samples, 0.02%)</title><rect x="53.1283%" y="213" width="0.0218%" height="15" fill="rgb(208,190,38)" fg:x="39019" fg:w="16"/><text x="53.3783%" y="223.50"></text></g><g><title>cache.exe`core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::new_with_keys (16 samples, 0.02%)</title><rect x="53.1283%" y="197" width="0.0218%" height="15" fill="rgb(235,213,38)" fg:x="39019" fg:w="16"/><text x="53.3783%" y="207.50"></text></g><g><title>cache.exe`core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::reset (16 samples, 0.02%)</title><rect x="53.1283%" y="181" width="0.0218%" height="15" fill="rgb(237,122,38)" fg:x="39019" fg:w="16"/><text x="53.3783%" y="191.50"></text></g><g><title>cache.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (16 samples, 0.02%)</title><rect x="53.1977%" y="181" width="0.0218%" height="15" fill="rgb(244,218,35)" fg:x="39070" fg:w="16"/><text x="53.4477%" y="191.50"></text></g><g><title>cache.exe`core::num::impl$9::rotate_left (9 samples, 0.01%)</title><rect x="53.2318%" y="165" width="0.0123%" height="15" fill="rgb(240,68,47)" fg:x="39095" fg:w="9"/><text x="53.4818%" y="175.50"></text></g><g><title>cache.exe`hashbrown::map::make_hash(std::hash::random::RandomState*, ref$ (129 samples, 0.18%)</title><rect x="53.0779%" y="261" width="0.1756%" height="15" fill="rgb(210,16,53)" fg:x="38982" fg:w="129"/><text x="53.3279%" y="271.50"></text></g><g><title>cache.exe`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;ref$&lt;str$&gt; &gt; &gt;(std::hash::random::RandomState*, ref$ (115 samples, 0.16%)</title><rect x="53.0970%" y="245" width="0.1566%" height="15" fill="rgb(235,124,12)" fg:x="38996" fg:w="115"/><text x="53.3470%" y="255.50"></text></g><g><title>cache.exe`std::hash::random::impl$4::finish (76 samples, 0.10%)</title><rect x="53.1501%" y="229" width="0.1035%" height="15" fill="rgb(224,169,11)" fg:x="39035" fg:w="76"/><text x="53.4001%" y="239.50"></text></g><g><title>cache.exe`core::hash::sip::impl$4::finish (76 samples, 0.10%)</title><rect x="53.1501%" y="213" width="0.1035%" height="15" fill="rgb(250,166,2)" fg:x="39035" fg:w="76"/><text x="53.4001%" y="223.50"></text></g><g><title>cache.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (76 samples, 0.10%)</title><rect x="53.1501%" y="197" width="0.1035%" height="15" fill="rgb(242,216,29)" fg:x="39035" fg:w="76"/><text x="53.4001%" y="207.50"></text></g><g><title>cache.exe`core::hash::sip::impl$8::d_rounds (20 samples, 0.03%)</title><rect x="53.2263%" y="181" width="0.0272%" height="15" fill="rgb(230,116,27)" fg:x="39091" fg:w="20"/><text x="53.4763%" y="191.50"></text></g><g><title>cache.exe`hashbrown::control::group::sse2::Group::match_tag (28 samples, 0.04%)</title><rect x="53.2617%" y="213" width="0.0381%" height="15" fill="rgb(228,99,48)" fg:x="39117" fg:w="28"/><text x="53.5117%" y="223.50"></text></g><g><title>cache.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (28 samples, 0.04%)</title><rect x="53.2617%" y="197" width="0.0381%" height="15" fill="rgb(253,11,6)" fg:x="39117" fg:w="28"/><text x="53.5117%" y="207.50"></text></g><g><title>cache.exe`hashbrown::control::tag::Tag::full (13 samples, 0.02%)</title><rect x="53.2998%" y="213" width="0.0177%" height="15" fill="rgb(247,143,39)" fg:x="39145" fg:w="13"/><text x="53.5498%" y="223.50"></text></g><g><title>cache.exe`hashbrown::map::equivalent_key::closure$0(hashbrown::map::equivalent_key::closure_env$0&lt;ref$&lt;str$&gt;,ref$&lt;str$&gt;,lru_sim::trace::Function&gt;*, tuple$&lt;ref$ (15 samples, 0.02%)</title><rect x="53.3175%" y="197" width="0.0204%" height="15" fill="rgb(236,97,10)" fg:x="39158" fg:w="15"/><text x="53.5675%" y="207.50"></text></g><g><title>cache.exe`hashbrown::impl$0::equivalent(ref$&lt;str$&gt;*, ref$ (15 samples, 0.02%)</title><rect x="53.3175%" y="181" width="0.0204%" height="15" fill="rgb(233,208,19)" fg:x="39158" fg:w="15"/><text x="53.5675%" y="191.50"></text></g><g><title>cache.exe`core::cmp::impls::impl$9::eq(ref$&lt;str$&gt;**, ref$ (15 samples, 0.02%)</title><rect x="53.3175%" y="165" width="0.0204%" height="15" fill="rgb(216,164,2)" fg:x="39158" fg:w="15"/><text x="53.5675%" y="175.50"></text></g><g><title>cache.exe`core::cmp::impls::impl$9::eq(ref$&lt;str$&gt;*, ref$ (13 samples, 0.02%)</title><rect x="53.3203%" y="149" width="0.0177%" height="15" fill="rgb(220,129,5)" fg:x="39160" fg:w="13"/><text x="53.5703%" y="159.50"></text></g><g><title>cache.exe`core::str::traits::impl$1::eq(ref$&lt;str$&gt;, ref$ (13 samples, 0.02%)</title><rect x="53.3203%" y="133" width="0.0177%" height="15" fill="rgb(242,17,10)" fg:x="39160" fg:w="13"/><text x="53.5703%" y="143.50"></text></g><g><title>cache.exe`core::cmp::impls::impl$9::eq(ref$&lt;slice2$&lt;u8&gt; &gt;*, ref$&lt;slice2$ (13 samples, 0.02%)</title><rect x="53.3203%" y="117" width="0.0177%" height="15" fill="rgb(242,107,0)" fg:x="39160" fg:w="13"/><text x="53.5703%" y="127.50"></text></g><g><title>cache.exe`core::slice::cmp::impl$0::eq(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (13 samples, 0.02%)</title><rect x="53.3203%" y="101" width="0.0177%" height="15" fill="rgb(251,28,31)" fg:x="39160" fg:w="13"/><text x="53.5703%" y="111.50"></text></g><g><title>cache.exe`core::slice::cmp::impl$5::equal(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (13 samples, 0.02%)</title><rect x="53.3203%" y="85" width="0.0177%" height="15" fill="rgb(233,223,10)" fg:x="39160" fg:w="13"/><text x="53.5703%" y="95.50"></text></g><g><title>cache.exe`hashbrown::raw::Bucket&lt;tuple$&lt;ref$&lt;str$&gt;,lru_sim::trace::Function&gt; &gt;::as_ptr (8 samples, 0.01%)</title><rect x="53.3380%" y="181" width="0.0109%" height="15" fill="rgb(215,21,27)" fg:x="39173" fg:w="8"/><text x="53.5880%" y="191.50"></text></g><g><title>cache.exe`core::ptr::mut_ptr::impl$0::sub(tuple$&lt;ref$ (8 samples, 0.01%)</title><rect x="53.3380%" y="165" width="0.0109%" height="15" fill="rgb(232,23,21)" fg:x="39173" fg:w="8"/><text x="53.5880%" y="175.50"></text></g><g><title>cache.exe`core::cmp::PartialEq::ne(core::ptr::non_null::NonNull&lt;usize&gt;*, core::ptr::non_null::NonNull (38,842 samples, 52.89%)</title><rect x="0.4629%" y="357" width="52.8873%" height="15" fill="rgb(244,5,23)" fg:x="340" fg:w="38842"/><text x="0.7129%" y="367.50">cache.exe`core::cmp::PartialEq::ne(core::ptr::non_null::NonNull&lt;usize&gt;*, core::ptr::non..</text></g><g><title>cache.exe`core::ptr::non_null::impl$14::eq(core::ptr::non_null::NonNull&lt;usize&gt;*, core::ptr::non_null::NonNull (38,842 samples, 52.89%)</title><rect x="0.4629%" y="341" width="52.8873%" height="15" fill="rgb(226,81,46)" fg:x="340" fg:w="38842"/><text x="0.7129%" y="351.50">cache.exe`core::ptr::non_null::impl$14::eq(core::ptr::non_null::NonNull&lt;usize&gt;*, core::..</text></g><g><title>cache.exe`lru_sim::trace::impl$5::into_iter (38,572 samples, 52.52%)</title><rect x="0.8306%" y="325" width="52.5196%" height="15" fill="rgb(247,70,30)" fg:x="610" fg:w="38572"/><text x="1.0806%" y="335.50">cache.exe`lru_sim::trace::impl$5::into_iter</text></g><g><title>cache.exe`std::collections::hash::map::HashMap&lt;ref$&lt;str$&gt;,lru_sim::trace::Function,std::hash::random::RandomState&gt;::get(ref$ (201 samples, 0.27%)</title><rect x="53.0765%" y="309" width="0.2737%" height="15" fill="rgb(212,68,19)" fg:x="38981" fg:w="201"/><text x="53.3265%" y="319.50"></text></g><g><title>cache.exe`hashbrown::map::HashMap&lt;ref$&lt;str$&gt;,lru_sim::trace::Function,std::hash::random::RandomState,alloc::alloc::Global&gt;::get(ref$ (201 samples, 0.27%)</title><rect x="53.0765%" y="293" width="0.2737%" height="15" fill="rgb(240,187,13)" fg:x="38981" fg:w="201"/><text x="53.3265%" y="303.50"></text></g><g><title>cache.exe`hashbrown::map::HashMap&lt;ref$&lt;str$&gt;,lru_sim::trace::Function,std::hash::random::RandomState,alloc::alloc::Global&gt;::get_inner(ref$ (201 samples, 0.27%)</title><rect x="53.0765%" y="277" width="0.2737%" height="15" fill="rgb(223,113,26)" fg:x="38981" fg:w="201"/><text x="53.3265%" y="287.50"></text></g><g><title>cache.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;str$&gt;,lru_sim::trace::Function&gt;,alloc::alloc::Global&gt;::get(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;ref$&lt;str$&gt;,ref$ (71 samples, 0.10%)</title><rect x="53.2535%" y="261" width="0.0967%" height="15" fill="rgb(206,192,2)" fg:x="39111" fg:w="71"/><text x="53.5035%" y="271.50"></text></g><g><title>cache.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;str$&gt;,lru_sim::trace::Function&gt;,alloc::alloc::Global&gt;::find(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;ref$&lt;str$&gt;,ref$ (71 samples, 0.10%)</title><rect x="53.2535%" y="245" width="0.0967%" height="15" fill="rgb(241,108,4)" fg:x="39111" fg:w="71"/><text x="53.5035%" y="255.50"></text></g><g><title>cache.exe`hashbrown::raw::RawTableInner::find_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (71 samples, 0.10%)</title><rect x="53.2535%" y="229" width="0.0967%" height="15" fill="rgb(247,173,49)" fg:x="39111" fg:w="71"/><text x="53.5035%" y="239.50"></text></g><g><title>cache.exe`hashbrown::raw::impl$8::find::closure$0(hashbrown::raw::impl$8::find::closure_env$0&lt;tuple$&lt;ref$&lt;str$&gt;,lru_sim::trace::Function&gt;,alloc::alloc::Global,hashbrown::map::equivalent_key::closure_env$0&lt;ref$&lt;str$&gt;,ref$ (24 samples, 0.03%)</title><rect x="53.3175%" y="213" width="0.0327%" height="15" fill="rgb(224,114,35)" fg:x="39158" fg:w="24"/><text x="53.5675%" y="223.50"></text></g><g><title>cache.exe`hashbrown::raw::RawTable&lt;tuple$&lt;ref$&lt;str$&gt;,lru_sim::trace::Function&gt;,alloc::alloc::Global&gt;::bucket (9 samples, 0.01%)</title><rect x="53.3380%" y="197" width="0.0123%" height="15" fill="rgb(245,159,27)" fg:x="39173" fg:w="9"/><text x="53.5880%" y="207.50"></text></g><g><title>cache.exe`core::slice::impl$0::get_unchecked_mut(ref_mut$&lt;slice2$&lt;lru_sim::lru::CacheSet (1,767 samples, 2.41%)</title><rect x="60.4755%" y="325" width="2.4059%" height="15" fill="rgb(245,172,44)" fg:x="44415" fg:w="1767"/><text x="60.7255%" y="335.50">ca..</text></g><g><title>cache.exe`core::slice::index::impl$2::get_unchecked_mut(unsigned long long, ptr_mut$&lt;slice2$&lt;lru_sim::lru::CacheSet (1,767 samples, 2.41%)</title><rect x="60.4755%" y="309" width="2.4059%" height="15" fill="rgb(236,23,11)" fg:x="44415" fg:w="1767"/><text x="60.7255%" y="319.50">ca..</text></g><g><title>cache.exe`core::slice::index::get_mut_noubcheck(ptr_mut$&lt;slice2$&lt;lru_sim::lru::CacheSet (1,767 samples, 2.41%)</title><rect x="60.4755%" y="293" width="2.4059%" height="15" fill="rgb(205,117,38)" fg:x="44415" fg:w="1767"/><text x="60.7255%" y="303.50">ca..</text></g><g><title>cache.exe`core::iter::traits::iterator::Iterator::find(core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;lru_sim::lru::CacheLine&gt; &gt;*, lru_sim::lru::impl$2::get::closure_env$0 (16,186 samples, 22.04%)</title><rect x="65.9477%" y="309" width="22.0389%" height="15" fill="rgb(237,72,25)" fg:x="48434" fg:w="16186"/><text x="66.1977%" y="319.50">cache.exe`core::iter::traits::itera..</text></g><g><title>cache.exe`core::iter::adapters::enumerate::impl$1::try_fold(core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;lru_sim::lru::CacheLine&gt; &gt;*, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::find::check::closure_env$0&lt;tuple$&lt;usize,ref$&lt;lru_sim::lru::CacheLine&gt; &gt;,lru_sim::lru::impl$2::get::closure_env$0 (16,186 samples, 22.04%)</title><rect x="65.9477%" y="293" width="22.0389%" height="15" fill="rgb(244,70,9)" fg:x="48434" fg:w="16186"/><text x="66.1977%" y="303.50">cache.exe`core::iter::adapters::enu..</text></g><g><title>cache.exe`core::iter::traits::iterator::Iterator::try_fold(core::slice::iter::Iter&lt;lru_sim::lru::CacheLine&gt;*, tuple$&lt;&gt;, core::iter::adapters::enumerate::impl$1::try_fold::enumerate::closure_env$0&lt;ref$&lt;lru_sim::lru::CacheLine&gt;,tuple$&lt;&gt;,enum2$&lt;core::ops::control_flow::ControlFlow&lt;tuple$&lt;usize,ref$&lt;lru_sim::lru::CacheLine&gt; &gt;,tuple$&lt;&gt; &gt; &gt;,core::iter::traits::iterator::Iterator::find::check::closure_env$0&lt;tuple$&lt;usize,ref$&lt;lru_sim::lru::CacheLine&gt; &gt;,lru_sim::lru::impl$2::get::closure_env$0 (16,186 samples, 22.04%)</title><rect x="65.9477%" y="277" width="22.0389%" height="15" fill="rgb(217,125,39)" fg:x="48434" fg:w="16186"/><text x="66.1977%" y="287.50">cache.exe`core::iter::traits::itera..</text></g><g><title>cache.exe`core::iter::adapters::enumerate::impl$1::try_fold::enumerate::closure$0(core::iter::adapters::enumerate::impl$1::try_fold::enumerate::closure_env$0&lt;ref$&lt;lru_sim::lru::CacheLine&gt;,tuple$&lt;&gt;,enum2$&lt;core::ops::control_flow::ControlFlow&lt;tuple$&lt;usize,ref$&lt;lru_sim::lru::CacheLine&gt; &gt;,tuple$&lt;&gt; &gt; &gt;,core::iter::traits::iterator::Iterator::find::check::closure_env$0&lt;tuple$&lt;usize,ref$&lt;lru_sim::lru::CacheLine&gt; &gt;,lru_sim::lru::impl$2::get::closure_env$0&lt;2&gt; &gt; &gt;*, tuple$ (16,186 samples, 22.04%)</title><rect x="65.9477%" y="261" width="22.0389%" height="15" fill="rgb(235,36,10)" fg:x="48434" fg:w="16186"/><text x="66.1977%" y="271.50">cache.exe`core::iter::adapters::enu..</text></g><g><title>cache.exe`core::iter::traits::iterator::Iterator::find::check::closure$0(core::iter::traits::iterator::Iterator::find::check::closure_env$0&lt;tuple$&lt;usize,ref$&lt;lru_sim::lru::CacheLine&gt; &gt;,lru_sim::lru::impl$2::get::closure_env$0&lt;2&gt; &gt;*, tuple$&lt;&gt;, tuple$&lt;usize,ref$ (16,186 samples, 22.04%)</title><rect x="65.9477%" y="245" width="22.0389%" height="15" fill="rgb(251,123,47)" fg:x="48434" fg:w="16186"/><text x="66.1977%" y="255.50">cache.exe`core::iter::traits::itera..</text></g><g><title>cache.exe`lru_sim::lru::impl$2::get::closure$0(lru_sim::lru::impl$2::get::closure_env$0&lt;2&gt;*, tuple$&lt;usize,ref$ (16,186 samples, 22.04%)</title><rect x="65.9477%" y="229" width="22.0389%" height="15" fill="rgb(221,13,13)" fg:x="48434" fg:w="16186"/><text x="66.1977%" y="239.50">cache.exe`lru_sim::lru::impl$2::get..</text></g><g><title>cache.exe`core::option::impl$14::eq(enum2$&lt;core::option::Option&lt;usize&gt; &gt;*, enum2$&lt;core::option::Option (16,186 samples, 22.04%)</title><rect x="65.9477%" y="213" width="22.0389%" height="15" fill="rgb(238,131,9)" fg:x="48434" fg:w="16186"/><text x="66.1977%" y="223.50">cache.exe`core::option::impl$14::eq..</text></g><g><title>cache.exe`core::iter::traits::iterator::Iterator::find(core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;usize&gt; &gt;*, lru_sim::lru::impl$2::get::closure_env$2 (6,549 samples, 8.92%)</title><rect x="87.9866%" y="309" width="8.9171%" height="15" fill="rgb(211,50,8)" fg:x="64620" fg:w="6549"/><text x="88.2366%" y="319.50">cache.exe`cor..</text></g><g><title>cache.exe`core::iter::adapters::enumerate::impl$1::try_fold(core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;usize&gt; &gt;*, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::find::check::closure_env$0&lt;tuple$&lt;usize,ref$&lt;usize&gt; &gt;,lru_sim::lru::impl$2::get::closure_env$2 (6,549 samples, 8.92%)</title><rect x="87.9866%" y="293" width="8.9171%" height="15" fill="rgb(245,182,24)" fg:x="64620" fg:w="6549"/><text x="88.2366%" y="303.50">cache.exe`cor..</text></g><g><title>cache.exe`core::iter::traits::iterator::Iterator::try_fold(core::slice::iter::Iter&lt;usize&gt;*, tuple$&lt;&gt;, core::iter::adapters::enumerate::impl$1::try_fold::enumerate::closure_env$0&lt;ref$&lt;usize&gt;,tuple$&lt;&gt;,enum2$&lt;core::ops::control_flow::ControlFlow&lt;tuple$&lt;usize,ref$&lt;usize&gt; &gt;,tuple$&lt;&gt; &gt; &gt;,core::iter::traits::iterator::Iterator::find::check::closure_env$0&lt;tuple$&lt;usize,ref$&lt;usize&gt; &gt;,lru_sim::lru::impl$2::get::closure_env$2 (6,549 samples, 8.92%)</title><rect x="87.9866%" y="277" width="8.9171%" height="15" fill="rgb(242,14,37)" fg:x="64620" fg:w="6549"/><text x="88.2366%" y="287.50">cache.exe`cor..</text></g><g><title>cache.exe`core::iter::adapters::enumerate::impl$1::try_fold::enumerate::closure$0(core::iter::adapters::enumerate::impl$1::try_fold::enumerate::closure_env$0&lt;ref$&lt;usize&gt;,tuple$&lt;&gt;,enum2$&lt;core::ops::control_flow::ControlFlow&lt;tuple$&lt;usize,ref$&lt;usize&gt; &gt;,tuple$&lt;&gt; &gt; &gt;,core::iter::traits::iterator::Iterator::find::check::closure_env$0&lt;tuple$&lt;usize,ref$&lt;usize&gt; &gt;,lru_sim::lru::impl$2::get::closure_env$2&lt;2&gt; &gt; &gt;*, tuple$ (4,389 samples, 5.98%)</title><rect x="90.9277%" y="261" width="5.9761%" height="15" fill="rgb(246,228,12)" fg:x="66780" fg:w="4389"/><text x="91.1777%" y="271.50">cache.ex..</text></g><g><title>cache.exe`core::iter::traits::iterator::Iterator::find::check::closure$0(core::iter::traits::iterator::Iterator::find::check::closure_env$0&lt;tuple$&lt;usize,ref$&lt;usize&gt; &gt;,lru_sim::lru::impl$2::get::closure_env$2&lt;2&gt; &gt;*, tuple$&lt;&gt;, tuple$&lt;usize,ref$ (4,389 samples, 5.98%)</title><rect x="90.9277%" y="245" width="5.9761%" height="15" fill="rgb(213,55,15)" fg:x="66780" fg:w="4389"/><text x="91.1777%" y="255.50">cache.ex..</text></g><g><title>cache.exe`lru_sim::lru::impl$2::get::closure$2(lru_sim::lru::impl$2::get::closure_env$2&lt;2&gt;*, tuple$&lt;usize,ref$ (4,389 samples, 5.98%)</title><rect x="90.9277%" y="229" width="5.9761%" height="15" fill="rgb(209,9,3)" fg:x="66780" fg:w="4389"/><text x="91.1777%" y="239.50">cache.ex..</text></g><g><title>cache.exe`core::slice::impl$0::get_unchecked_mut(ref_mut$&lt;slice2$ (574 samples, 0.78%)</title><rect x="96.9037%" y="309" width="0.7816%" height="15" fill="rgb(230,59,30)" fg:x="71169" fg:w="574"/><text x="97.1537%" y="319.50"></text></g><g><title>cache.exe`core::slice::index::impl$2::get_unchecked_mut(unsigned long long, ptr_mut$&lt;slice2$ (574 samples, 0.78%)</title><rect x="96.9037%" y="293" width="0.7816%" height="15" fill="rgb(209,121,21)" fg:x="71169" fg:w="574"/><text x="97.1537%" y="303.50"></text></g><g><title>cache.exe`core::slice::index::get_mut_noubcheck(ptr_mut$&lt;slice2$ (574 samples, 0.78%)</title><rect x="96.9037%" y="277" width="0.7816%" height="15" fill="rgb(220,109,13)" fg:x="71169" fg:w="574"/><text x="97.1537%" y="287.50"></text></g><g><title>cache.exe`core::slice::impl$0::rotate_right(ref_mut$&lt;slice2$ (130 samples, 0.18%)</title><rect x="97.6853%" y="309" width="0.1770%" height="15" fill="rgb(232,18,1)" fg:x="71743" fg:w="130"/><text x="97.9353%" y="319.50"></text></g><g><title>cache.exe`core::ptr::mut_ptr::impl$0::add (100 samples, 0.14%)</title><rect x="97.7261%" y="293" width="0.1362%" height="15" fill="rgb(215,41,42)" fg:x="71773" fg:w="100"/><text x="97.9761%" y="303.50"></text></g><g><title>cache.exe`core::iter::range::impl$6::next(core::ops::range::Range (79 samples, 0.11%)</title><rect x="99.3505%" y="293" width="0.1076%" height="15" fill="rgb(224,123,36)" fg:x="72966" fg:w="79"/><text x="99.6005%" y="303.50"></text></g><g><title>cache.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (79 samples, 0.11%)</title><rect x="99.3505%" y="277" width="0.1076%" height="15" fill="rgb(240,125,3)" fg:x="72966" fg:w="79"/><text x="99.6005%" y="287.50"></text></g><g><title>cache.exe`core::cmp::impls::impl$58::lt (75 samples, 0.10%)</title><rect x="99.3560%" y="261" width="0.1021%" height="15" fill="rgb(205,98,50)" fg:x="72970" fg:w="75"/><text x="99.6060%" y="271.50"></text></g><g><title>cache.exe`core::ptr::mut_ptr::impl$0::read (177 samples, 0.24%)</title><rect x="99.4581%" y="293" width="0.2410%" height="15" fill="rgb(205,185,37)" fg:x="73045" fg:w="177"/><text x="99.7081%" y="303.50"></text></g><g><title>cache.exe`core::ptr::read (177 samples, 0.24%)</title><rect x="99.4581%" y="277" width="0.2410%" height="15" fill="rgb(238,207,15)" fg:x="73045" fg:w="177"/><text x="99.7081%" y="287.50"></text></g><g><title>cache.exe`core::ptr::mut_ptr::impl$0::replace (106 samples, 0.14%)</title><rect x="99.6991%" y="293" width="0.1443%" height="15" fill="rgb(213,199,42)" fg:x="73222" fg:w="106"/><text x="99.9491%" y="303.50"></text></g><g><title>cache.exe`core::ptr::replace (106 samples, 0.14%)</title><rect x="99.6991%" y="277" width="0.1443%" height="15" fill="rgb(235,201,11)" fg:x="73222" fg:w="106"/><text x="99.9491%" y="287.50"></text></g><g><title>cache.exe`core::mem::replace (106 samples, 0.14%)</title><rect x="99.6991%" y="261" width="0.1443%" height="15" fill="rgb(207,46,11)" fg:x="73222" fg:w="106"/><text x="99.9491%" y="271.50"></text></g><g><title>cache.exe`core::ptr::write (102 samples, 0.14%)</title><rect x="99.7045%" y="245" width="0.1389%" height="15" fill="rgb(241,35,35)" fg:x="73226" fg:w="102"/><text x="99.9545%" y="255.50"></text></g><g><title>cache.exe`core::ptr::mut_ptr::impl$0::sub (82 samples, 0.11%)</title><rect x="99.8434%" y="293" width="0.1117%" height="15" fill="rgb(243,32,47)" fg:x="73328" fg:w="82"/><text x="100.0934%" y="303.50"></text></g><g><title>cache.exe`alloc::vec::in_place_collect::impl$1::from_iter&lt;lru_sim::simulatiton::Simulation&lt;1600,1,3&gt;,core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;lru_sim::trace::Trace,alloc::alloc::Global&gt;,lru_sim::simulatiton::impl$0::simulate::closure_env$0&lt;1600,1,3,128,2,64&gt; &gt; &gt;(core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;lru_sim::trace::Trace,alloc::alloc::Global&gt;,lru_sim::simulatiton::impl$0::simulate::closure_env$0 (73,390 samples, 99.93%)</title><rect x="0.0354%" y="517" width="99.9278%" height="15" fill="rgb(247,202,23)" fg:x="26" fg:w="73390"/><text x="0.2854%" y="527.50">cache.exe`alloc::vec::in_place_collect::impl$1::from_iter&lt;lru_sim::simulatiton::Simulation&lt;1600,1,3&gt;,core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;lru..</text></g><g><title>cache.exe`alloc::vec::in_place_collect::from_iter_in_place(core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;lru_sim::trace::Trace,alloc::alloc::Global&gt;,lru_sim::simulatiton::impl$0::simulate::closure_env$0 (73,390 samples, 99.93%)</title><rect x="0.0354%" y="501" width="99.9278%" height="15" fill="rgb(219,102,11)" fg:x="26" fg:w="73390"/><text x="0.2854%" y="511.50">cache.exe`alloc::vec::in_place_collect::from_iter_in_place(core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;lru_sim::trace::Trace,alloc::alloc::Global&gt;,l..</text></g><g><title>cache.exe`alloc::vec::in_place_collect::from_iter_in_place(core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;lru_sim::trace::Trace,alloc::alloc::Global&gt;,lru_sim::simulatiton::impl$0::simulate::closure_env$0 (73,390 samples, 99.93%)</title><rect x="0.0354%" y="485" width="99.9278%" height="15" fill="rgb(243,110,44)" fg:x="26" fg:w="73390"/><text x="0.2854%" y="495.50">cache.exe`alloc::vec::in_place_collect::from_iter_in_place(core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;lru_sim::trace::Trace,alloc::alloc::Global&gt;,l..</text></g><g><title>cache.exe`alloc::vec::in_place_collect::impl$2::collect_in_place(core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;lru_sim::trace::Trace,alloc::alloc::Global&gt;,lru_sim::simulatiton::impl$0::simulate::closure_env$0&lt;1600,1,3,128,2,64&gt; &gt;*, lru_sim::simulatiton::Simulation&lt;1600,1,3&gt;*, lru_sim::simulatiton::Simulation (73,390 samples, 99.93%)</title><rect x="0.0354%" y="469" width="99.9278%" height="15" fill="rgb(222,74,54)" fg:x="26" fg:w="73390"/><text x="0.2854%" y="479.50">cache.exe`alloc::vec::in_place_collect::impl$2::collect_in_place(core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;lru_sim::trace::Trace,alloc::alloc::Glo..</text></g><g><title>cache.exe`core::ptr::mut_ptr::impl$0::sub_ptr(lru_sim::simulatiton::Simulation&lt;1600,1,3&gt;*, lru_sim::simulatiton::Simulation (73,390 samples, 99.93%)</title><rect x="0.0354%" y="453" width="99.9278%" height="15" fill="rgb(216,99,12)" fg:x="26" fg:w="73390"/><text x="0.2854%" y="463.50">cache.exe`core::ptr::mut_ptr::impl$0::sub_ptr(lru_sim::simulatiton::Simulation&lt;1600,1,3&gt;*, lru_sim::simulatiton::Simulation</text></g><g><title>cache.exe`core::ptr::const_ptr::impl$0::sub_ptr(lru_sim::simulatiton::Simulation&lt;1600,1,3&gt;*, lru_sim::simulatiton::Simulation (73,390 samples, 99.93%)</title><rect x="0.0354%" y="437" width="99.9278%" height="15" fill="rgb(226,22,26)" fg:x="26" fg:w="73390"/><text x="0.2854%" y="447.50">cache.exe`core::ptr::const_ptr::impl$0::sub_ptr(lru_sim::simulatiton::Simulation&lt;1600,1,3&gt;*, lru_sim::simulatiton::Simulation</text></g><g><title>cache.exe`alloc::vec::into_iter::impl$5::try_fold&lt;lru_sim::trace::Trace,alloc::alloc::Global,alloc::vec::in_place_drop::InPlaceDrop&lt;lru_sim::simulatiton::Simulation&lt;1600,1,3&gt; &gt;,core::iter::adapters::map::map_try_fold::closure_env$0&lt;lru_sim::trace::Trace,lru_sim::simulatiton::Simulation&lt;1600,1,3&gt;,alloc::vec::in_place_drop::InPlaceDrop&lt;lru_sim::simulatiton::Simulation&lt;1600,1,3&gt; &gt;,enum2$&lt;core::result::Result&lt;alloc::vec::in_place_drop::InPlaceDrop&lt;lru_sim::simulatiton::Simulation&lt;1600,1,3&gt; &gt;,never$&gt; &gt;,lru_sim::simulatiton::impl$0::simulate::closure_env$0&lt;1600,1,3,128,2,64&gt;,alloc::vec::in_place_collect::write_in_place_with_drop::closure_env$0&lt;lru_sim::simulatiton::Simulation&lt;1600,1,3&gt; &gt; &gt;,enum2$&lt;core::result::Result&lt;alloc::vec::in_place_drop::InPlaceDrop&lt;lru_sim::simulatiton::Simulation&lt;1600,1,3&gt; &gt;,never$&gt; &gt; &gt;(alloc::vec::into_iter::IntoIter&lt;lru_sim::trace::Trace,alloc::alloc::Global&gt;*, alloc::vec::in_place_drop::InPlaceDrop&lt;lru_sim::simulatiton::Simulation&lt;1600,1,3&gt; &gt;, core::iter::adapters::map::map_try_fold::closure_env$0&lt;lru_sim::trace::Trace,lru_sim::simulatiton::Simulation&lt;1600,1,3&gt;,alloc::vec::in_place_drop::InPlaceDrop&lt;lru_sim::simulatiton::Simulation&lt;1600,1,3&gt; &gt;,enum2$&lt;core::result::Result&lt;alloc::vec::in_place_drop::InPlaceDrop&lt;lru_sim::simulatiton::Simulation&lt;1600,1,3&gt; &gt;,never$&gt; &gt;,lru_sim::simulatiton::impl$0::simulate::closure_env$0&lt;1600,1,3,128,2,64&gt;,alloc::vec::in_place_collect::write_in_place_with_drop::closure_env$0&lt;lru_sim::simulatiton::Simulation (73,390 samples, 99.93%)</title><rect x="0.0354%" y="421" width="99.9278%" height="15" fill="rgb(217,163,10)" fg:x="26" fg:w="73390"/><text x="0.2854%" y="431.50">cache.exe`alloc::vec::into_iter::impl$5::try_fold&lt;lru_sim::trace::Trace,alloc::alloc::Global,alloc::vec::in_place_drop::InPlaceDrop&lt;lru_sim::simulatiton::Simulation&lt;16..</text></g><g><title>cache.exe`core::iter::adapters::map::map_try_fold::closure$0(core::iter::adapters::map::map_try_fold::closure_env$0&lt;lru_sim::trace::Trace,lru_sim::simulatiton::Simulation&lt;1600,1,3&gt;,alloc::vec::in_place_drop::InPlaceDrop&lt;lru_sim::simulatiton::Simulation&lt;1600,1,3&gt; &gt;,enum2$&lt;core::result::Result&lt;alloc::vec::in_place_drop::InPlaceDrop&lt;lru_sim::simulatiton::Simulation&lt;1600,1,3&gt; &gt;,never$&gt; &gt;,lru_sim::simulatiton::impl$0::simulate::closure_env$0&lt;1600,1,3,128,2,64&gt;,alloc::vec::in_place_collect::write_in_place_with_drop::closure_env$0&lt;lru_sim::simulatiton::Simulation&lt;1600,1,3&gt; &gt; &gt;*, alloc::vec::in_place_drop::InPlaceDrop&lt;lru_sim::simulatiton::Simulation (73,390 samples, 99.93%)</title><rect x="0.0354%" y="405" width="99.9278%" height="15" fill="rgb(213,25,53)" fg:x="26" fg:w="73390"/><text x="0.2854%" y="415.50">cache.exe`core::iter::adapters::map::map_try_fold::closure$0(core::iter::adapters::map::map_try_fold::closure_env$0&lt;lru_sim::trace::Trace,lru_sim::simulatiton::Simulat..</text></g><g><title>cache.exe`lru_sim::simulatiton::impl$0::simulate::closure$0(lru_sim::simulatiton::impl$0::simulate::closure_env$0 (73,390 samples, 99.93%)</title><rect x="0.0354%" y="389" width="99.9278%" height="15" fill="rgb(252,105,26)" fg:x="26" fg:w="73390"/><text x="0.2854%" y="399.50">cache.exe`lru_sim::simulatiton::impl$0::simulate::closure$0(lru_sim::simulatiton::impl$0::simulate::closure_env$0</text></g><g><title>cache.exe`alloc::vec::into_iter::impl$5::fold(alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;, lru_sim::simulatiton::Simulation&lt;1600,1,3&gt;, lru_sim::simulatiton::impl$0::simulate::closure$0::closure_env$0 (73,390 samples, 99.93%)</title><rect x="0.0354%" y="373" width="99.9278%" height="15" fill="rgb(220,39,43)" fg:x="26" fg:w="73390"/><text x="0.2854%" y="383.50">cache.exe`alloc::vec::into_iter::impl$5::fold(alloc::vec::into_iter::IntoIter&lt;usize,alloc::alloc::Global&gt;, lru_sim::simulatiton::Simulation&lt;1600,1,3&gt;, lru_sim::simulat..</text></g><g><title>cache.exe`lru_sim::simulatiton::impl$0::simulate::closure$0::closure$0(lru_sim::simulatiton::impl$0::simulate::closure$0::closure_env$0&lt;1600,1,3,128,2,64&gt;*, lru_sim::simulatiton::Simulation (34,229 samples, 46.61%)</title><rect x="53.3570%" y="357" width="46.6062%" height="15" fill="rgb(229,68,48)" fg:x="39187" fg:w="34229"/><text x="53.6070%" y="367.50">cache.exe`lru_sim::simulatiton::impl$0::simulate::closure$0::closure$0(lru_s..</text></g><g><title>cache.exe`lru_sim::lru::LruCache&lt;128,2,64&gt;::get (33,970 samples, 46.25%)</title><rect x="53.7097%" y="341" width="46.2536%" height="15" fill="rgb(252,8,32)" fg:x="39446" fg:w="33970"/><text x="53.9597%" y="351.50">cache.exe`lru_sim::lru::LruCache&lt;128,2,64&gt;::get</text></g><g><title>cache.exe`lru_sim::lru::CacheSet&lt;2&gt;::get (27,234 samples, 37.08%)</title><rect x="62.8814%" y="325" width="37.0818%" height="15" fill="rgb(223,20,43)" fg:x="46182" fg:w="27234"/><text x="63.1314%" y="335.50">cache.exe`lru_sim::lru::CacheSet&lt;2&gt;::get</text></g><g><title>cache.exe`core::slice::rotate::ptr_rotate&lt;usize&gt; (1,543 samples, 2.10%)</title><rect x="97.8623%" y="309" width="2.1009%" height="15" fill="rgb(229,81,49)" fg:x="71873" fg:w="1543"/><text x="98.1123%" y="319.50">c..</text></g><g><title>cache.exe`lru_sim::simulatiton::Simulation&lt;1600,1,3&gt;::simulate(lru_sim::lru::LruCache&lt;128,2,64&gt;*, ref$ (73,391 samples, 99.93%)</title><rect x="0.0354%" y="533" width="99.9292%" height="15" fill="rgb(236,28,36)" fg:x="26" fg:w="73391"/><text x="0.2854%" y="543.50">cache.exe`lru_sim::simulatiton::Simulation&lt;1600,1,3&gt;::simulate(lru_sim::lru::LruCache&lt;128,2,64&gt;*, ref$</text></g><g><title>`0x7FF99FCBBF6C (73,415 samples, 99.96%)</title><rect x="0.0054%" y="773" width="99.9619%" height="15" fill="rgb(249,185,26)" fg:x="4" fg:w="73415"/><text x="0.2554%" y="783.50">`0x7FF99FCBBF6C</text></g><g><title>`0x7FF99EBAE8D7 (73,415 samples, 99.96%)</title><rect x="0.0054%" y="757" width="99.9619%" height="15" fill="rgb(249,174,33)" fg:x="4" fg:w="73415"/><text x="0.2554%" y="767.50">`0x7FF99EBAE8D7</text></g><g><title>cache.exe`__scrt_common_main_seh() (73,411 samples, 99.96%)</title><rect x="0.0109%" y="741" width="99.9564%" height="15" fill="rgb(233,201,37)" fg:x="8" fg:w="73411"/><text x="0.2609%" y="751.50">cache.exe`__scrt_common_main_seh()</text></g><g><title>cache.exe`invoke_main() (73,402 samples, 99.94%)</title><rect x="0.0231%" y="725" width="99.9442%" height="15" fill="rgb(221,78,26)" fg:x="17" fg:w="73402"/><text x="0.2731%" y="735.50">cache.exe`invoke_main()</text></g><g><title>cache.exe`main (73,401 samples, 99.94%)</title><rect x="0.0245%" y="709" width="99.9428%" height="15" fill="rgb(250,127,30)" fg:x="18" fg:w="73401"/><text x="0.2745%" y="719.50">cache.exe`main</text></g><g><title>cache.exe`std::rt::lang_start_internal (73,401 samples, 99.94%)</title><rect x="0.0245%" y="693" width="99.9428%" height="15" fill="rgb(230,49,44)" fg:x="18" fg:w="73401"/><text x="0.2745%" y="703.50">cache.exe`std::rt::lang_start_internal</text></g><g><title>cache.exe`std::panic::catch_unwind (73,401 samples, 99.94%)</title><rect x="0.0245%" y="677" width="99.9428%" height="15" fill="rgb(229,67,23)" fg:x="18" fg:w="73401"/><text x="0.2745%" y="687.50">cache.exe`std::panic::catch_unwind</text></g><g><title>cache.exe`std::panicking::try (73,401 samples, 99.94%)</title><rect x="0.0245%" y="661" width="99.9428%" height="15" fill="rgb(249,83,47)" fg:x="18" fg:w="73401"/><text x="0.2745%" y="671.50">cache.exe`std::panicking::try</text></g><g><title>cache.exe`std::panicking::try::do_call (73,401 samples, 99.94%)</title><rect x="0.0245%" y="645" width="99.9428%" height="15" fill="rgb(215,43,3)" fg:x="18" fg:w="73401"/><text x="0.2745%" y="655.50">cache.exe`std::panicking::try::do_call</text></g><g><title>cache.exe`std::rt::lang_start_internal::closure$1 (73,401 samples, 99.94%)</title><rect x="0.0245%" y="629" width="99.9428%" height="15" fill="rgb(238,154,13)" fg:x="18" fg:w="73401"/><text x="0.2745%" y="639.50">cache.exe`std::rt::lang_start_internal::closure$1</text></g><g><title>cache.exe`std::panic::catch_unwind (73,401 samples, 99.94%)</title><rect x="0.0245%" y="613" width="99.9428%" height="15" fill="rgb(219,56,2)" fg:x="18" fg:w="73401"/><text x="0.2745%" y="623.50">cache.exe`std::panic::catch_unwind</text></g><g><title>cache.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$ (73,401 samples, 99.94%)</title><rect x="0.0245%" y="597" width="99.9428%" height="15" fill="rgb(233,0,4)" fg:x="18" fg:w="73401"/><text x="0.2745%" y="607.50">cache.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$</text></g><g><title>cache.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (73,401 samples, 99.94%)</title><rect x="0.0245%" y="581" width="99.9428%" height="15" fill="rgb(235,30,7)" fg:x="18" fg:w="73401"/><text x="0.2745%" y="591.50">cache.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>cache.exe`cache::main (73,401 samples, 99.94%)</title><rect x="0.0245%" y="565" width="99.9428%" height="15" fill="rgb(250,79,13)" fg:x="18" fg:w="73401"/><text x="0.2745%" y="575.50">cache.exe`cache::main</text></g><g><title>cache.exe`lru_sim::simulatiton::Simulation&lt;1600,1,3&gt;::run&lt;1600,1,3,128,2,64,ref$&lt;alloc::string::String&gt; &gt;(lru_sim::lru::LruCache (73,394 samples, 99.93%)</title><rect x="0.0340%" y="549" width="99.9333%" height="15" fill="rgb(211,146,34)" fg:x="25" fg:w="73394"/><text x="0.2840%" y="559.50">cache.exe`lru_sim::simulatiton::Simulation&lt;1600,1,3&gt;::run&lt;1600,1,3,128,2,64,ref$&lt;alloc::string::String&gt; &gt;(lru_sim::lru::LruCache</text></g><g><title>`0x7FF99FCD7390 (9 samples, 0.01%)</title><rect x="99.9755%" y="709" width="0.0123%" height="15" fill="rgb(228,22,38)" fg:x="73425" fg:w="9"/><text x="100.2255%" y="719.50"></text></g><g><title>`0x7FF99FC6A650 (9 samples, 0.01%)</title><rect x="99.9755%" y="693" width="0.0123%" height="15" fill="rgb(235,168,5)" fg:x="73425" fg:w="9"/><text x="100.2255%" y="703.50"></text></g><g><title>`0x7FF99FC5ED20 (9 samples, 0.01%)</title><rect x="99.9755%" y="677" width="0.0123%" height="15" fill="rgb(221,155,16)" fg:x="73425" fg:w="9"/><text x="100.2255%" y="687.50"></text></g><g><title>`0x7FF99FCF2CFD (11 samples, 0.01%)</title><rect x="99.9755%" y="725" width="0.0150%" height="15" fill="rgb(215,215,53)" fg:x="73425" fg:w="11"/><text x="100.2255%" y="735.50"></text></g><g><title>all (73,443 samples, 100%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(223,4,10)" fg:x="0" fg:w="73443"/><text x="0.2500%" y="799.50"></text></g><g><title>`0x7FF99FCF340E (24 samples, 0.03%)</title><rect x="99.9673%" y="773" width="0.0327%" height="15" fill="rgb(234,103,6)" fg:x="73419" fg:w="24"/><text x="100.2173%" y="783.50"></text></g><g><title>`0x7FF99FD1EA23 (23 samples, 0.03%)</title><rect x="99.9687%" y="757" width="0.0313%" height="15" fill="rgb(227,97,0)" fg:x="73420" fg:w="23"/><text x="100.2187%" y="767.50"></text></g><g><title>`0x7FF99FCF10F8 (23 samples, 0.03%)</title><rect x="99.9687%" y="741" width="0.0313%" height="15" fill="rgb(234,150,53)" fg:x="73420" fg:w="23"/><text x="100.2187%" y="751.50"></text></g></svg></svg>